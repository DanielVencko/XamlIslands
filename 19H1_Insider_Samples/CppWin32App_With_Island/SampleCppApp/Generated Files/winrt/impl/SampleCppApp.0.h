// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

WINRT_EXPORT namespace winrt::SampleCppApp {

struct IMainPage;
struct MainPage;

}

namespace winrt::impl {

template <> struct category<SampleCppApp::IMainPage>{ using type = interface_category; };
template <> struct category<SampleCppApp::MainPage>{ using type = class_category; };
template <> struct name<SampleCppApp::IMainPage>{ static constexpr auto & value{ L"SampleCppApp.IMainPage" }; };
template <> struct name<SampleCppApp::MainPage>{ static constexpr auto & value{ L"SampleCppApp.MainPage" }; };
template <> struct guid_storage<SampleCppApp::IMainPage>{ static constexpr guid value{ 0xA652A882,0x36E4,0x5AC5,{ 0x99,0x51,0xE4,0xBD,0x02,0xE3,0xBE,0x83 } }; };
template <> struct default_interface<SampleCppApp::MainPage>{ using type = SampleCppApp::IMainPage; };

template <> struct abi<SampleCppApp::IMainPage>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_MyProperty(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MyProperty(int32_t value) noexcept = 0;
};};

template <typename D>
struct consume_SampleCppApp_IMainPage
{
    int32_t MyProperty() const;
    void MyProperty(int32_t value) const;
};
template <> struct consume<SampleCppApp::IMainPage> { template <typename D> using type = consume_SampleCppApp_IMainPage<D>; };

}
