// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Markup.2.h"

namespace winrt::impl {

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider> consume_Microsoft_UI_Xaml_Markup_IXamlMetadataProviderContainer<D>::Providers() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer)->get_Providers(put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Markup::IXamlApplication> : produce_base<D, Microsoft::UI::Xaml::Markup::IXamlApplication>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer> : produce_base<D, Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer>
{
    int32_t WINRT_CALL get_Providers(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Providers, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider>>(this->shim().Providers());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup {

inline XamlApplication::XamlApplication() :
    XamlApplication(impl::call_factory<XamlApplication>([](auto&& f) { return f.template ActivateInstance<XamlApplication>(); }))
{}

}

namespace winrt::impl {

struct property_Microsoft_UI_Xaml_Markup_IXamlMetadataProviderContainer
{ struct named {
    struct Providers
    {
        struct name { static constexpr std::wstring_view value{ L"Providers"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider>;
        using target_type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Providers();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Providers>; };
};

struct property_Microsoft_UI_Xaml_Markup_XamlApplication
{ struct named {
    struct Providers
    {
        struct name { static constexpr std::wstring_view value{ L"Providers"sv }; };
        using property_type = winrt::Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Markup::IXamlMetadataProvider>;
        using target_type = winrt::Microsoft::UI::Xaml::Markup::XamlApplication;

        using is_readable = std::true_type;
        using is_writable = std::false_type;
        using is_static = std::false_type;
        struct getter
        {
            auto operator()(target_type const& target) const
            {
                return target.Providers();
            }
        };
    };};
    struct list { using type = impl::typelist<named::Providers>; };
};

}

WINRT_EXPORT namespace winrt::experimental::reflect {
template <> struct named_property<Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer> : impl::property_Microsoft_UI_Xaml_Markup_IXamlMetadataProviderContainer::named {};
template <> struct properties<Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer> : impl::property_Microsoft_UI_Xaml_Markup_IXamlMetadataProviderContainer::list {};
template <> struct named_property<Microsoft::UI::Xaml::Markup::XamlApplication> : impl::property_Microsoft_UI_Xaml_Markup_XamlApplication::named {};
template <> struct properties<Microsoft::UI::Xaml::Markup::XamlApplication> : impl::property_Microsoft_UI_Xaml_Markup_XamlApplication::list {};

template <>
struct base_type<Microsoft::UI::Xaml::Markup::XamlApplication> { using type = Windows::UI::Xaml::Application; };
}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::UI::Xaml::Markup::IXamlApplication> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Markup::IXamlApplication> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Markup::XamlApplication> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Markup::XamlApplication> {};

}
