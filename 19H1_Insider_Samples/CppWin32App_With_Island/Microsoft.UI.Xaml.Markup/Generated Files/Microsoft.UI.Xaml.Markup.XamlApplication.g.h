// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/Windows.UI.Xaml.Interop.h"
#include "winrt/Windows.UI.Xaml.Markup.h"
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.UI.Xaml.h"
#include "winrt/Microsoft.UI.Xaml.Markup.h"

namespace winrt::Microsoft::UI::Xaml::Markup::implementation {

template <typename D, typename... I>
struct WINRT_EBO XamlApplication_base : implements<D, Microsoft::UI::Xaml::Markup::IXamlApplication, Microsoft::UI::Xaml::Markup::IXamlMetadataProviderContainer, Windows::Foundation::IClosable, Windows::UI::Xaml::IApplicationOverrides, Windows::UI::Xaml::IApplicationOverrides2, Windows::UI::Xaml::Markup::IXamlMetadataProvider, composing, I...>,
    impl::require<D, Windows::UI::Xaml::IApplication, Windows::UI::Xaml::IApplication2, Windows::UI::Xaml::IApplication3>,
    impl::base<D, Windows::UI::Xaml::Application>,
    Windows::UI::Xaml::IApplicationOverridesT<D>, Windows::UI::Xaml::IApplicationOverrides2T<D>
{
    using base_type = XamlApplication_base;
    using class_type = Microsoft::UI::Xaml::Markup::XamlApplication;
    using implements_type = typename XamlApplication_base::implements_type;
    using implements_type::implements_type;
    using composable_base = Windows::UI::Xaml::Application;
#if _MSC_VER < 1914
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, default_interface<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<default_interface<class_type>>(*this)));
        return result;
    }
#else
    operator impl::producer_ref<class_type> const() const noexcept
    {
        return { to_abi<default_interface<class_type>>(this) };
    }
#endif

    hstring GetRuntimeClassName() const
    {
        return L"Microsoft.UI.Xaml.Markup.XamlApplication";
    }
    XamlApplication_base()
    {
        impl::call_factory<Windows::UI::Xaml::Application, Windows::UI::Xaml::IApplicationFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

}

namespace winrt::Microsoft::UI::Xaml::Markup::factory_implementation {

template <typename D, typename T, typename... I>
struct WINRT_EBO XamlApplicationT : implements<D, Windows::Foundation::IActivationFactory, I...>
{
    using instance_type = Microsoft::UI::Xaml::Markup::XamlApplication;

    hstring GetRuntimeClassName() const
    {
        return L"Microsoft.UI.Xaml.Markup.XamlApplication";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        return make<T>();
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_XAMLAPPLICATION_XAML_G_H) || __has_include("Microsoft.UI.Xaml.Markup.XamlApplication.xaml.g.h")

#include "Microsoft.UI.Xaml.Markup.XamlApplication.xaml.g.h"

#else

namespace winrt::Microsoft::UI::Xaml::Markup::implementation
{
    template <typename D, typename... I>
    using XamlApplicationT = XamlApplication_base<D, I...>;
}

#endif
