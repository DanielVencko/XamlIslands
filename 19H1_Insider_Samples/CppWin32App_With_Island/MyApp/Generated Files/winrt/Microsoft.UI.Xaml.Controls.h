// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.Primitives.2.h"
#include "winrt/impl/Windows.ApplicationModel.Contacts.2.h"
#include "winrt/impl/Windows.ApplicationModel.DataTransfer.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Text.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.Primitives.2.h"
#include "winrt/impl/Windows.UI.Xaml.Data.2.h"
#include "winrt/impl/Windows.UI.Xaml.Input.2.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.Animation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.2.h"

namespace winrt::impl {

template <typename D> Windows::UI::Composition::Visual consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual<D>::RootVisual() const
{
    Windows::UI::Composition::Visual value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisual)->get_RootVisual(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual<D>::Size() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisual)->get_Size(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual<D>::Duration() const
{
    Windows::Foundation::TimeSpan value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisual)->get_Duration(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Diagnostics() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_Diagnostics(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Duration() const
{
    Windows::Foundation::TimeSpan value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_Duration(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::IAnimatedVisualSource consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Source() const
{
    Microsoft::UI::Xaml::Controls::IAnimatedVisualSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Source(Microsoft::UI::Xaml::Controls::IAnimatedVisualSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->put_Source(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::FallbackContent() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_FallbackContent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::FallbackContent(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->put_FallbackContent(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::AutoPlay() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_AutoPlay(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::AutoPlay(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->put_AutoPlay(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::IsAnimatedVisualLoaded() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_IsAnimatedVisualLoaded(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::IsPlaying() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_IsPlaying(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::PlaybackRate() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_PlaybackRate(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::PlaybackRate(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->put_PlaybackRate(value));
}

template <typename D> Windows::UI::Composition::CompositionObject consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::ProgressObject() const
{
    Windows::UI::Composition::CompositionObject value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_ProgressObject(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Stretch consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->get_Stretch(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Stretch(Windows::UI::Xaml::Media::Stretch const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->put_Stretch(get_abi(value)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Pause() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->Pause());
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::PlayAsync(double fromProgress, double toProgress, bool looped) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->PlayAsync(fromProgress, toProgress, looped, put_abi(operation)));
    return operation;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Resume() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->Resume());
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::SetProgress(double progress) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->SetProgress(progress));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>::Stop() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer)->Stop());
}

template <typename D> Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::AutoPlayProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_AutoPlayProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::DiagnosticsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_DiagnosticsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::DurationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_DurationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::FallbackContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_FallbackContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::IsAnimatedVisualLoadedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_IsAnimatedVisualLoadedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::IsPlayingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_IsPlayingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::PlaybackRateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_PlaybackRateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics)->get_StretchProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::IAnimatedVisual consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource<D>::TryCreateAnimatedVisual(Windows::UI::Composition::Compositor const& compositor, Windows::Foundation::IInspectable& diagnostics) const
{
    Microsoft::UI::Xaml::Controls::IAnimatedVisual result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IAnimatedVisualSource)->TryCreateAnimatedVisual(get_abi(compositor), put_abi(diagnostics), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Uri consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>::UriSource() const
{
    Windows::Foundation::Uri value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSource)->get_UriSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>::UriSource(Windows::Foundation::Uri const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSource)->put_UriSource(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>::ShowAsMonochrome() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSource)->get_ShowAsMonochrome(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>::ShowAsMonochrome(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSource)->put_ShowAsMonochrome(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::BitmapIconSource consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::BitmapIconSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics<D>::UriSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics)->get_UriSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics<D>::ShowAsMonochromeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics)->get_ShowAsMonochromeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Color consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs<D>::OldColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorChangedEventArgs)->get_OldColor(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Color consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs<D>::NewColor() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorChangedEventArgs)->get_NewColor(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Color consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_Color(get_abi(value)));
}

template <typename D> Windows::Foundation::IReference<Windows::UI::Color> consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::PreviousColor() const
{
    Windows::Foundation::IReference<Windows::UI::Color> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_PreviousColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::PreviousColor(optional<Windows::UI::Color> const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_PreviousColor(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsAlphaEnabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsAlphaEnabled(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsAlphaEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsAlphaEnabled(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorSpectrumVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsColorSpectrumVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorSpectrumVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsColorSpectrumVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorPreviewVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsColorPreviewVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorPreviewVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsColorPreviewVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorSliderVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsColorSliderVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorSliderVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsColorSliderVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsAlphaSliderVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsAlphaSliderVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsAlphaSliderVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsAlphaSliderVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsMoreButtonVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsMoreButtonVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsMoreButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsMoreButtonVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorChannelTextInputVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsColorChannelTextInputVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsColorChannelTextInputVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsColorChannelTextInputVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsAlphaTextInputVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsAlphaTextInputVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsAlphaTextInputVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsAlphaTextInputVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsHexInputVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_IsHexInputVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::IsHexInputVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_IsHexInputVisible(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MinHue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_MinHue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MinHue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_MinHue(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MaxHue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_MaxHue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MaxHue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_MaxHue(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MinSaturation() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_MinSaturation(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MinSaturation(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_MinSaturation(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MaxSaturation() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_MaxSaturation(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MaxSaturation(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_MaxSaturation(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MinValue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_MinValue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MinValue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_MinValue(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MaxValue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_MaxValue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::MaxValue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_MaxValue(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::ColorSpectrumShape consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorSpectrumShape() const
{
    Microsoft::UI::Xaml::Controls::ColorSpectrumShape value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_ColorSpectrumShape(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_ColorSpectrumShape(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ColorSpectrumComponents consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorSpectrumComponents() const
{
    Microsoft::UI::Xaml::Controls::ColorSpectrumComponents value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->get_ColorSpectrumComponents(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->put_ColorSpectrumComponents(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->add_ColorChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorChanged_revoker consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ColorChanged_revoker>(this, ColorChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>::ColorChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPicker)->remove_ColorChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ColorPicker consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ColorPicker value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::ColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_ColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::PreviousColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_PreviousColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsAlphaEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsAlphaEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsColorSpectrumVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsColorSpectrumVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsColorPreviewVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsColorPreviewVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsColorSliderVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsColorSliderVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsAlphaSliderVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsAlphaSliderVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsMoreButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsMoreButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsColorChannelTextInputVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsColorChannelTextInputVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsAlphaTextInputVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsAlphaTextInputVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::IsHexInputVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_IsHexInputVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::MinHueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_MinHueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::MaxHueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_MaxHueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::MinSaturationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_MinSaturationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::MaxSaturationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_MaxSaturationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::MinValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_MinValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::MaxValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_MaxValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::ColorSpectrumShapeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_ColorSpectrumShapeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>::ColorSpectrumComponentsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IColorPickerStatics)->get_ColorSpectrumComponentsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout<D>::PrimaryCommands() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ICommandBarFlyout)->get_PrimaryCommands(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout<D>::SecondaryCommands() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ICommandBarFlyout)->get_SecondaryCommands(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::CommandBarFlyout consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::CommandBarFlyout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::DropDownButton consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::DropDownButton value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IDropDownButtonFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource<D>::AnimatedVisualInvalidated(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource)->add_AnimatedVisualInvalidated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource<D>::AnimatedVisualInvalidated_revoker consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource<D>::AnimatedVisualInvalidated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, AnimatedVisualInvalidated_revoker>(this, AnimatedVisualInvalidated(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource<D>::AnimatedVisualInvalidated(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource)->remove_AnimatedVisualInvalidated(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::ShowAnimationCompleted(Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->add_ShowAnimationCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::ShowAnimationCompleted_revoker consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::ShowAnimationCompleted(auto_revoke_t, Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const& handler) const
{
    return impl::make_event_revoker<D, ShowAnimationCompleted_revoker>(this, ShowAnimationCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::ShowAnimationCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->remove_ShowAnimationCompleted(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HideAnimationCompleted(Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->add_HideAnimationCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HideAnimationCompleted_revoker consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HideAnimationCompleted(auto_revoke_t, Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const& handler) const
{
    return impl::make_event_revoker<D, HideAnimationCompleted_revoker>(this, HideAnimationCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HideAnimationCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->remove_HideAnimationCompleted(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::BoundsChangeAnimationCompleted(Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->add_BoundsChangeAnimationCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::BoundsChangeAnimationCompleted_revoker consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::BoundsChangeAnimationCompleted(auto_revoke_t, Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const& handler) const
{
    return impl::make_event_revoker<D, BoundsChangeAnimationCompleted_revoker>(this, BoundsChangeAnimationCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::BoundsChangeAnimationCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->remove_BoundsChangeAnimationCompleted(get_abi(token)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::OnElementShown(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->OnElementShown(get_abi(element), get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::OnElementHidden(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->OnElementHidden(get_abi(element), get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::OnElementBoundsChanged(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->OnElementBoundsChanged(get_abi(element), get_abi(context), get_abi(oldBounds), get_abi(newBounds)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HasShowAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->HasShowAnimation(get_abi(element), get_abi(context), &result));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HasHideAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->HasHideAnimation(get_abi(element), get_abi(context), &result));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimator<D>::HasBoundsChangeAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimator)->HasBoundsChangeAnimation(get_abi(element), get_abi(context), get_abi(oldBounds), get_abi(newBounds), &result));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ElementAnimator consume_Microsoft_UI_Xaml_Controls_IElementAnimatorFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ElementAnimator value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimatorOverrides<D>::HasShowAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides)->HasShowAnimationCore(get_abi(element), get_abi(context), &result));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimatorOverrides<D>::HasHideAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides)->HasHideAnimationCore(get_abi(element), get_abi(context), &result));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimatorOverrides<D>::HasBoundsChangeAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides)->HasBoundsChangeAnimationCore(get_abi(element), get_abi(context), get_abi(oldBounds), get_abi(newBounds), &result));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimatorOverrides<D>::StartShowAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides)->StartShowAnimation(get_abi(element), get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimatorOverrides<D>::StartHideAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides)->StartHideAnimation(get_abi(element), get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimatorOverrides<D>::StartBoundsChangeAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides)->StartBoundsChangeAnimation(get_abi(element), get_abi(context), get_abi(oldBounds), get_abi(newBounds)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::HasShowAnimationsPending() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->get_HasShowAnimationsPending(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::HasHideAnimationsPending() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->get_HasHideAnimationsPending(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::HasBoundsChangeAnimationsPending() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->get_HasBoundsChangeAnimationsPending(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::AnimationContext consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::SharedContext() const
{
    Microsoft::UI::Xaml::Controls::AnimationContext value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->get_SharedContext(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::OnShowAnimationCompleted(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->OnShowAnimationCompleted(get_abi(element)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::OnHideAnimationCompleted(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->OnHideAnimationCompleted(get_abi(element)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementAnimatorProtected<D>::OnBoundsChangeAnimationCompleted(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementAnimatorProtected)->OnBoundsChangeAnimationCompleted(get_abi(element)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ElementFactory consume_Microsoft_UI_Xaml_Controls_IElementFactoryFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ElementFactory value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IElementFactoryGetArgs<D>::Data() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs)->get_Data(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementFactoryGetArgs<D>::Data(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs)->put_Data(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IElementFactoryGetArgs<D>::Parent() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs)->get_Parent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementFactoryGetArgs<D>::Parent(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs)->put_Parent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IElementFactoryOverrides<D>::GetElementCore(Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const& args) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryOverrides)->GetElementCore(get_abi(args), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementFactoryOverrides<D>::RecycleElementCore(Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const& args) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryOverrides)->RecycleElementCore(get_abi(args)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IElementFactoryRecycleArgs<D>::Element() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs)->get_Element(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementFactoryRecycleArgs<D>::Element(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs)->put_Element(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IElementFactoryRecycleArgs<D>::Parent() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs)->get_Parent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementFactoryRecycleArgs<D>::Parent(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs)->put_Parent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IElementFactoryShim<D>::GetElement(Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const& args) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryShim)->GetElement(get_abi(args), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IElementFactoryShim<D>::RecycleElement(Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const& args) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IElementFactoryShim)->RecycleElement(get_abi(args)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->get_Orientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->put_Orientation(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::MinRowSpacing() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->get_MinRowSpacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::MinRowSpacing(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->put_MinRowSpacing(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::MinColumnSpacing() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->get_MinColumnSpacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::MinColumnSpacing(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->put_MinColumnSpacing(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::LineAlignment() const
{
    Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->get_LineAlignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFlowLayout<D>::LineAlignment(Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayout)->put_LineAlignment(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayout consume_Microsoft_UI_Xaml_Controls_IFlowLayoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::FlowLayout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::GetMeasureSize(int32_t index, Windows::Foundation::Size const& availableSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->GetMeasureSize(index, get_abi(availableSize), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::GetProvisionalArrangeSize(int32_t index, Windows::Foundation::Size const& measureSize, Windows::Foundation::Size const& desiredSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->GetProvisionalArrangeSize(index, get_abi(measureSize), get_abi(desiredSize), put_abi(result)));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::ShouldBreakLine(int32_t index, double remainingSpace) const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->ShouldBreakLine(index, remainingSpace, &result));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::GetAnchorForRealizationRect(Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->GetAnchorForRealizationRect(get_abi(availableSize), get_abi(context), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::GetAnchorForTargetElement(int32_t targetIndex, Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->GetAnchorForTargetElement(targetIndex, get_abi(availableSize), get_abi(context), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::GetExtent(Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::UI::Xaml::UIElement const& firstRealized, int32_t firstRealizedItemIndex, Windows::Foundation::Rect const& firstRealizedLayoutBounds, Windows::UI::Xaml::UIElement const& lastRealized, int32_t lastRealizedItemIndex, Windows::Foundation::Rect const& lastRealizedLayoutBounds) const
{
    Windows::Foundation::Rect result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->GetExtent(get_abi(availableSize), get_abi(context), get_abi(firstRealized), firstRealizedItemIndex, get_abi(firstRealizedLayoutBounds), get_abi(lastRealized), lastRealizedItemIndex, get_abi(lastRealizedLayoutBounds), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::OnElementMeasured(Windows::UI::Xaml::UIElement const& element, int32_t index, Windows::Foundation::Size const& availableSize, Windows::Foundation::Size const& measureSize, Windows::Foundation::Size const& desiredSize, Windows::Foundation::Size const& provisionalArrangeSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->OnElementMeasured(get_abi(element), index, get_abi(availableSize), get_abi(measureSize), get_abi(desiredSize), get_abi(provisionalArrangeSize), get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFlowLayoutOverrides<D>::OnLineArranged(int32_t startIndex, int32_t countInLine, double lineSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides)->OnLineArranged(startIndex, countInLine, lineSize, get_abi(context)));
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayoutState consume_Microsoft_UI_Xaml_Controls_IFlowLayoutStateFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::FlowLayoutState value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFlowLayoutStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFlowLayoutStatics<D>::MinRowSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutStatics)->get_MinRowSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFlowLayoutStatics<D>::MinColumnSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutStatics)->get_MinColumnSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFlowLayoutStatics<D>::LineAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFlowLayoutStatics)->get_LineAlignmentProperty(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::Glyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_Glyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::Glyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_Glyph(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontSize() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_FontSize(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontSize(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_FontFamily(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_FontFamily(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontWeight consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_FontWeight(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontWeight(Windows::UI::Text::FontWeight const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_FontWeight(get_abi(value)));
}

template <typename D> Windows::UI::Text::FontStyle consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_FontStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::FontStyle(Windows::UI::Text::FontStyle const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_FontStyle(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::IsTextScaleFactorEnabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_IsTextScaleFactorEnabled(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::MirroredWhenRightToLeft() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->get_MirroredWhenRightToLeft(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>::MirroredWhenRightToLeft(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSource)->put_MirroredWhenRightToLeft(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::FontIconSource consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::FontIconSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::GlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_GlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_FontSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_FontFamilyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_FontWeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_FontStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_IsTextScaleFactorEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>::MirroredWhenRightToLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IFontIconSourceStatics)->get_MirroredWhenRightToLeftProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_IIconSource<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIconSource)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IIconSource<D>::Foreground(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIconSource)->put_Foreground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIconSourceStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IIndexPath<D>::GetSize() const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIndexPath)->GetSize(&result));
    return result;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IIndexPath<D>::GetAt(int32_t index) const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIndexPath)->GetAt(index, &result));
    return result;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IIndexPath<D>::CompareTo(Microsoft::UI::Xaml::Controls::IndexPath const& other) const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIndexPath)->CompareTo(get_abi(other), &result));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::IndexPath consume_Microsoft_UI_Xaml_Controls_IIndexPathStatics<D>::CreateFrom(int32_t index) const
{
    Microsoft::UI::Xaml::Controls::IndexPath result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIndexPathStatics)->CreateFrom(index, put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::IndexPath consume_Microsoft_UI_Xaml_Controls_IIndexPathStatics<D>::CreateFrom(int32_t groupIndex, int32_t itemIndex) const
{
    Microsoft::UI::Xaml::Controls::IndexPath result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIndexPathStatics)->CreateFromGroupAndItemIndex(groupIndex, itemIndex, put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::IndexPath consume_Microsoft_UI_Xaml_Controls_IIndexPathStatics<D>::CreateFromIndices(param::vector<int32_t> const& indices) const
{
    Microsoft::UI::Xaml::Controls::IndexPath result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IIndexPathStatics)->CreateFromIndices(get_abi(indices), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ItemsSource() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_ItemsSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ItemsSource(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->put_ItemsSource(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ItemsSourceView consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ItemsSourceView() const
{
    Microsoft::UI::Xaml::Controls::ItemsSourceView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_ItemsSourceView(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ItemTemplate() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_ItemTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ItemTemplate(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->put_ItemTemplate(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Layout consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::Layout() const
{
    Microsoft::UI::Xaml::Controls::Layout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_Layout(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::Layout(Microsoft::UI::Xaml::Controls::Layout const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->put_Layout(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::HorizontalCacheLength() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_HorizontalCacheLength(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::HorizontalCacheLength(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->put_HorizontalCacheLength(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::VerticalCacheLength() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_VerticalCacheLength(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::VerticalCacheLength(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->put_VerticalCacheLength(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::Background(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->put_Background(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::GetElementIndex(Windows::UI::Xaml::UIElement const& element) const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->GetElementIndex(get_abi(element), &result));
    return result;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::TryGetElement(int32_t index) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->TryGetElement(index, put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::GetOrCreateElement(int32_t index) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->GetOrCreateElement(index, put_abi(result)));
    return result;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementPrepared(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->add_ElementPrepared(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementPrepared_revoker consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementPrepared(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ElementPrepared_revoker>(this, ElementPrepared(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementPrepared(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->remove_ElementPrepared(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementClearing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->add_ElementClearing(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementClearing_revoker consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementClearing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ElementClearing_revoker>(this, ElementClearing(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementClearing(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->remove_ElementClearing(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementIndexChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->add_ElementIndexChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementIndexChanged_revoker consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementIndexChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ElementIndexChanged_revoker>(this, ElementIndexChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>::ElementIndexChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater)->remove_ElementIndexChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ElementAnimator consume_Microsoft_UI_Xaml_Controls_IItemsRepeater2<D>::Animator() const
{
    Microsoft::UI::Xaml::Controls::ElementAnimator value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater2)->get_Animator(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IItemsRepeater2<D>::Animator(Microsoft::UI::Xaml::Controls::ElementAnimator const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeater2)->put_Animator(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementClearingEventArgs<D>::Element() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs)->get_Element(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs<D>::Element() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs)->get_Element(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs<D>::OldIndex() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs)->get_OldIndex(&value));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs<D>::NewIndex() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs)->get_NewIndex(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementPreparedEventArgs<D>::Element() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs)->get_Element(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementPreparedEventArgs<D>::Index() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs)->get_Index(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ItemsRepeater consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ItemsRepeater value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_ItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_ItemTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::LayoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_LayoutProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::AnimatorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_AnimatorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::HorizontalCacheLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_HorizontalCacheLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::VerticalCacheLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_VerticalCacheLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>::Count() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsSourceView)->get_Count(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>::GetAt(int32_t index) const
{
    Windows::Foundation::IInspectable result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsSourceView)->GetAt(index, put_abi(result)));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>::HasKeyIndexMapping() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsSourceView)->get_HasKeyIndexMapping(&value));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>::KeyFromIndex(int32_t index) const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsSourceView)->KeyFromIndex(index, put_abi(result)));
    return result;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>::IndexFromKey(param::hstring const& key) const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsSourceView)->IndexFromKey(get_abi(key), &result));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ItemsSourceView consume_Microsoft_UI_Xaml_Controls_IItemsSourceViewFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& source, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ItemsSourceView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory)->CreateInstance(get_abi(source), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IKeyIndexMapping<D>::KeyFromIndex(int32_t index) const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IKeyIndexMapping)->KeyFromIndex(index, put_abi(result)));
    return result;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IKeyIndexMapping<D>::IndexFromKey(param::hstring const& key) const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IKeyIndexMapping)->IndexFromKey(get_abi(key), &result));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayout<D>::InitializeForContext(Microsoft::UI::Xaml::Controls::LayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->InitializeForContext(get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayout<D>::UninitializeForContext(Microsoft::UI::Xaml::Controls::LayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->UninitializeForContext(get_abi(context)));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_ILayout<D>::Measure(Microsoft::UI::Xaml::Controls::LayoutContext const& context, Windows::Foundation::Size const& availableSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->Measure(get_abi(context), get_abi(availableSize), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_ILayout<D>::Arrange(Microsoft::UI::Xaml::Controls::LayoutContext const& context, Windows::Foundation::Size const& finalSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->Arrange(get_abi(context), get_abi(finalSize), put_abi(result)));
    return result;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ILayout<D>::MeasureInvalidated(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->add_MeasureInvalidated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ILayout<D>::MeasureInvalidated_revoker consume_Microsoft_UI_Xaml_Controls_ILayout<D>::MeasureInvalidated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, MeasureInvalidated_revoker>(this, MeasureInvalidated(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayout<D>::MeasureInvalidated(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->remove_MeasureInvalidated(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ILayout<D>::ArrangeInvalidated(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->add_ArrangeInvalidated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ILayout<D>::ArrangeInvalidated_revoker consume_Microsoft_UI_Xaml_Controls_ILayout<D>::ArrangeInvalidated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ArrangeInvalidated_revoker>(this, ArrangeInvalidated(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayout<D>::ArrangeInvalidated(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayout)->remove_ArrangeInvalidated(get_abi(token)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ILayoutContext<D>::LayoutState() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutContext)->get_LayoutState(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutContext<D>::LayoutState(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutContext)->put_LayoutState(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ILayoutContextOverrides<D>::LayoutStateCore() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutContextOverrides)->get_LayoutStateCore(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutContextOverrides<D>::LayoutStateCore(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutContextOverrides)->put_LayoutStateCore(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Layout consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::Layout() const
{
    Microsoft::UI::Xaml::Controls::Layout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->get_Layout(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::Layout(Microsoft::UI::Xaml::Controls::Layout const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->put_Layout(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->get_BorderBrush(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::BorderBrush(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->put_BorderBrush(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->get_BorderThickness(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::BorderThickness(Windows::UI::Xaml::Thickness const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->put_BorderThickness(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->get_Padding(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::Padding(Windows::UI::Xaml::Thickness const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->put_Padding(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->get_CornerRadius(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutPanel<D>::CornerRadius(Windows::UI::Xaml::CornerRadius const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanel)->put_CornerRadius(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::LayoutPanel consume_Microsoft_UI_Xaml_Controls_ILayoutPanelFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::LayoutPanel value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanelFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ILayoutPanelStatics<D>::LayoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanelStatics)->get_LayoutProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ILayoutPanelStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanelStatics)->get_BorderBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ILayoutPanelStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanelStatics)->get_BorderThicknessProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ILayoutPanelStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanelStatics)->get_PaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ILayoutPanelStatics<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutPanelStatics)->get_CornerRadiusProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutProtected<D>::InvalidateMeasure() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutProtected)->InvalidateMeasure());
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ILayoutProtected<D>::InvalidateArrange() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ILayoutProtected)->InvalidateArrange());
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::MenuBarItem> consume_Microsoft_UI_Xaml_Controls_IMenuBar<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::MenuBarItem> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBar)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::MenuBar consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::MenuBar value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IMenuBarItem<D>::Title() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItem)->get_Title(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IMenuBarItem<D>::Title(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItem)->put_Title(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> consume_Microsoft_UI_Xaml_Controls_IMenuBarItem<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItem)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::MenuBarItem consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::MenuBarItem value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItemFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::MenuBarItemFlyout consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::MenuBarItemFlyout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItemStatics)->get_TitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics<D>::ItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarItemStatics)->get_ItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics<D>::ItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IMenuBarStatics)->get_ItemsProperty(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsPaneOpen() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_IsPaneOpen(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsPaneOpen(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_IsPaneOpen(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::CompactModeThresholdWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_CompactModeThresholdWidth(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::CompactModeThresholdWidth(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_CompactModeThresholdWidth(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ExpandedModeThresholdWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_ExpandedModeThresholdWidth(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ExpandedModeThresholdWidth(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_ExpandedModeThresholdWidth(value));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneFooter() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_PaneFooter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneFooter(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_PaneFooter(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::Header() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::Header(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_Header(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_HeaderTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_HeaderTemplate(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::DisplayMode() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_DisplayMode(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsSettingsVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_IsSettingsVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsSettingsVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_IsSettingsVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsPaneToggleButtonVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_IsPaneToggleButtonVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsPaneToggleButtonVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_IsPaneToggleButtonVisible(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::AlwaysShowHeader() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_AlwaysShowHeader(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::AlwaysShowHeader(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_AlwaysShowHeader(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::CompactPaneLength() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_CompactPaneLength(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::CompactPaneLength(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_CompactPaneLength(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::OpenPaneLength() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_OpenPaneLength(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::OpenPaneLength(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_OpenPaneLength(value));
}

template <typename D> Windows::UI::Xaml::Style consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneToggleButtonStyle() const
{
    Windows::UI::Xaml::Style value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_PaneToggleButtonStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneToggleButtonStyle(Windows::UI::Xaml::Style const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_PaneToggleButtonStyle(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectedItem(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_SelectedItem(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItems() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_MenuItems(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemsSource() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_MenuItemsSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemsSource(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_MenuItemsSource(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SettingsItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_SettingsItem(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AutoSuggestBox consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::AutoSuggestBox() const
{
    Windows::UI::Xaml::Controls::AutoSuggestBox value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_AutoSuggestBox(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::AutoSuggestBox(Windows::UI::Xaml::Controls::AutoSuggestBox const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_AutoSuggestBox(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_MenuItemTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_MenuItemTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_MenuItemTemplateSelector(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_MenuItemTemplateSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemContainerStyle() const
{
    Windows::UI::Xaml::Style value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_MenuItemContainerStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemContainerStyle(Windows::UI::Xaml::Style const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_MenuItemContainerStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemContainerStyleSelector() const
{
    Windows::UI::Xaml::Controls::StyleSelector value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_MenuItemContainerStyleSelector(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_MenuItemContainerStyleSelector(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::MenuItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const
{
    Windows::Foundation::IInspectable result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->MenuItemFromContainer(get_abi(container), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyObject consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ContainerFromMenuItem(Windows::Foundation::IInspectable const& item) const
{
    Windows::UI::Xaml::DependencyObject result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->ContainerFromMenuItem(get_abi(item), put_abi(result)));
    return result;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectionChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_SelectionChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectionChanged_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, SelectionChanged_revoker>(this, SelectionChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectionChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_SelectionChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ItemInvoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_ItemInvoked(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ItemInvoked_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ItemInvoked_revoker>(this, ItemInvoked(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ItemInvoked(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_ItemInvoked(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::DisplayModeChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_DisplayModeChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::DisplayModeChanged_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::DisplayModeChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, DisplayModeChanged_revoker>(this, DisplayModeChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::DisplayModeChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_DisplayModeChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsBackButtonVisible() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_IsBackButtonVisible(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_IsBackButtonVisible(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsBackEnabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_IsBackEnabled(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsBackEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_IsBackEnabled(value));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneTitle() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_PaneTitle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneTitle(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_PaneTitle(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::BackRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_BackRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::BackRequested_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::BackRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, BackRequested_revoker>(this, BackRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::BackRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_BackRequested(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_PaneClosed(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosed_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, PaneClosed_revoker>(this, PaneClosed(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosed(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_PaneClosed(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_PaneClosing(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosing_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, PaneClosing_revoker>(this, PaneClosing(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneClosing(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_PaneClosing(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpened(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_PaneOpened(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpened_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, PaneOpened_revoker>(this, PaneOpened(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpened(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_PaneOpened(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpening(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->add_PaneOpening(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpening_revoker consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpening(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, PaneOpening_revoker>(this, PaneOpening(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneOpening(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->remove_PaneOpening(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneDisplayMode() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_PaneDisplayMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_PaneDisplayMode(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneHeader() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_PaneHeader(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneHeader(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_PaneHeader(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneCustomContent() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_PaneCustomContent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::PaneCustomContent(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_PaneCustomContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ContentOverlay() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_ContentOverlay(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ContentOverlay(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_ContentOverlay(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsPaneVisible() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_IsPaneVisible(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::IsPaneVisible(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_IsPaneVisible(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectionFollowsFocus() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_SelectionFollowsFocus(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_SelectionFollowsFocus(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::TemplateSettings() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ShoulderNavigationEnabled() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_ShoulderNavigationEnabled(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_ShoulderNavigationEnabled(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::OverflowLabelMode() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->get_OverflowLabelMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationView<D>::OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationView)->put_OverflowLabelMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs<D>::DisplayMode() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs)->get_DisplayMode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationView consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NavigationView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::IconElement consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>::Icon() const
{
    Windows::UI::Xaml::Controls::IconElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItem)->get_Icon(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>::Icon(Windows::UI::Xaml::Controls::IconElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItem)->put_Icon(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>::CompactPaneLength() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItem)->get_CompactPaneLength(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>::SelectsOnInvoked() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItem)->get_SelectsOnInvoked(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>::SelectsOnInvoked(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItem)->put_SelectsOnInvoked(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewItem consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NavigationViewItem value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewItemHeader consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NavigationViewItemHeader value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>::InvokedItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs)->get_InvokedItem(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>::IsSettingsInvoked() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs)->get_IsSettingsInvoked(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewItemBase consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>::InvokedItemContainer() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewItemBase value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs)->get_InvokedItemContainer(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>::RecommendedNavigationTransitionInfo() const
{
    Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs)->get_RecommendedNavigationTransitionInfo(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics<D>::IconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemStatics)->get_IconProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics<D>::CompactPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemStatics)->get_CompactPaneLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics<D>::SelectsOnInvokedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewItemStatics)->get_SelectsOnInvokedProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewList consume_Microsoft_UI_Xaml_Controls_INavigationViewListFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NavigationViewList value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewListFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>::Cancel() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>::IsSettingsSelected() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs)->get_IsSettingsSelected(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewItemBase consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>::SelectedItemContainer() const
{
    Microsoft::UI::Xaml::Controls::NavigationViewItemBase value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs)->get_SelectedItemContainer(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>::RecommendedNavigationTransitionInfo() const
{
    Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs)->get_RecommendedNavigationTransitionInfo(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::IsPaneOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_IsPaneOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::CompactModeThresholdWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_CompactModeThresholdWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::ExpandedModeThresholdWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_ExpandedModeThresholdWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::PaneFooterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_PaneFooterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_HeaderTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_DisplayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::IsSettingsVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_IsSettingsVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::IsPaneToggleButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_IsPaneToggleButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::AlwaysShowHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_AlwaysShowHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::CompactPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_CompactPaneLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::OpenPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_OpenPaneLengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::PaneToggleButtonStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_PaneToggleButtonStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::MenuItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_MenuItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::MenuItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_MenuItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::SelectedItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_SelectedItemProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::SettingsItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_SettingsItemProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::AutoSuggestBoxProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_AutoSuggestBoxProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::MenuItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_MenuItemTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::MenuItemTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_MenuItemTemplateSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::MenuItemContainerStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_MenuItemContainerStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::MenuItemContainerStyleSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_MenuItemContainerStyleSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::IsBackButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_IsBackButtonVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::IsBackEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_IsBackEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::PaneTitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_PaneTitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::PaneDisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_PaneDisplayModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::PaneHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_PaneHeaderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::PaneCustomContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_PaneCustomContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::ContentOverlayProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_ContentOverlayProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::IsPaneVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_IsPaneVisibleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::SelectionFollowsFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_SelectionFollowsFocusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::TemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_TemplateSettingsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::ShoulderNavigationEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_ShoulderNavigationEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>::OverflowLabelModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewStatics)->get_OverflowLabelModeProperty(put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::TopPadding() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_TopPadding(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::OverflowButtonVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_OverflowButtonVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::PaneToggleButtonVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_PaneToggleButtonVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::BackButtonVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_BackButtonVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::TopPaneVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_TopPaneVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::LeftPaneVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_LeftPaneVisibility(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>::SingleSelectionFollowsFocus() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings)->get_SingleSelectionFollowsFocus(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::TopPaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_TopPaddingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::OverflowButtonVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_OverflowButtonVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::PaneToggleButtonVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_PaneToggleButtonVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::BackButtonVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_BackButtonVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::TopPaneVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_TopPaneVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::LeftPaneVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_LeftPaneVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>::SingleSelectionFollowsFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics)->get_SingleSelectionFollowsFocusProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement> consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContext<D>::Children() const
{
    Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext)->get_Children(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement> consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextOverrides<D>::ChildrenCore() const
{
    Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides)->get_ChildrenCore(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::NonVirtualizingLayout consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::NonVirtualizingLayout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides<D>::InitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides)->InitializeForContextCore(get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides<D>::UninitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides)->UninitializeForContextCore(get_abi(context)));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides<D>::MeasureOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides)->MeasureOverride(get_abi(context), get_abi(availableSize), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides<D>::ArrangeOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides)->ArrangeOverride(get_abi(context), get_abi(finalSize), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::Child() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_Child(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::Child(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_Child(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalShift() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_HorizontalShift(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalShift(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_HorizontalShift(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalSourceEndOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_HorizontalSourceEndOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalSourceEndOffset(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_HorizontalSourceEndOffset(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalSourceOffsetKind() const
{
    Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_HorizontalSourceOffsetKind(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_HorizontalSourceOffsetKind(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalSourceStartOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_HorizontalSourceStartOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::HorizontalSourceStartOffset(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_HorizontalSourceStartOffset(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::IsHorizontalShiftClamped() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_IsHorizontalShiftClamped(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::IsHorizontalShiftClamped(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_IsHorizontalShiftClamped(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::IsVerticalShiftClamped() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_IsVerticalShiftClamped(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::IsVerticalShiftClamped(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_IsVerticalShiftClamped(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::MaxHorizontalShiftRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_MaxHorizontalShiftRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::MaxHorizontalShiftRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_MaxHorizontalShiftRatio(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::MaxVerticalShiftRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_MaxVerticalShiftRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::MaxVerticalShiftRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_MaxVerticalShiftRatio(value));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::Source() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::Source(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_Source(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalShift() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_VerticalShift(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalShift(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_VerticalShift(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalSourceEndOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_VerticalSourceEndOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalSourceEndOffset(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_VerticalSourceEndOffset(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalSourceOffsetKind() const
{
    Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_VerticalSourceOffsetKind(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_VerticalSourceOffsetKind(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalSourceStartOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->get_VerticalSourceStartOffset(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::VerticalSourceStartOffset(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->put_VerticalSourceStartOffset(value));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::RefreshAutomaticHorizontalOffsets() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->RefreshAutomaticHorizontalOffsets());
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>::RefreshAutomaticVerticalOffsets() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxView)->RefreshAutomaticVerticalOffsets());
}

template <typename D> Microsoft::UI::Xaml::Controls::ParallaxView consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ParallaxView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::ChildProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_ChildProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::HorizontalSourceEndOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_HorizontalSourceEndOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::HorizontalSourceOffsetKindProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_HorizontalSourceOffsetKindProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::HorizontalSourceStartOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_HorizontalSourceStartOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::MaxHorizontalShiftRatioProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_MaxHorizontalShiftRatioProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::HorizontalShiftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_HorizontalShiftProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::IsHorizontalShiftClampedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_IsHorizontalShiftClampedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::IsVerticalShiftClampedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_IsVerticalShiftClampedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_SourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::VerticalSourceEndOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_VerticalSourceEndOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::VerticalSourceOffsetKindProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_VerticalSourceOffsetKindProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::VerticalSourceStartOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_VerticalSourceStartOffsetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::MaxVerticalShiftRatioProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_MaxVerticalShiftRatioProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>::VerticalShiftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IParallaxViewStatics)->get_VerticalShiftProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Geometry consume_Microsoft_UI_Xaml_Controls_IPathIconSource<D>::Data() const
{
    Windows::UI::Xaml::Media::Geometry value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPathIconSource)->get_Data(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPathIconSource<D>::Data(Windows::UI::Xaml::Media::Geometry const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPathIconSource)->put_Data(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::PathIconSource consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::PathIconSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPathIconSourceFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics<D>::DataProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPathIconSourceStatics)->get_DataProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeNumber() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_BadgeNumber(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeNumber(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_BadgeNumber(value));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_BadgeGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_BadgeGlyph(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeImageSource() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_BadgeImageSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeImageSource(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_BadgeImageSource(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeText() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_BadgeText(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::BadgeText(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_BadgeText(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::IsGroup() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_IsGroup(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::IsGroup(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_IsGroup(value));
}

template <typename D> Windows::ApplicationModel::Contacts::Contact consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::Contact() const
{
    Windows::ApplicationModel::Contacts::Contact value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_Contact(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::Contact(Windows::ApplicationModel::Contacts::Contact const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_Contact(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::DisplayName() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_DisplayName(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::DisplayName(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_DisplayName(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::Initials() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_Initials(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::Initials(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_Initials(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::PreferSmallImage() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_PreferSmallImage(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::PreferSmallImage(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_PreferSmallImage(value));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::ProfilePicture() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_ProfilePicture(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::ProfilePicture(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->put_ProfilePicture(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>::TemplateSettings() const
{
    Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPicture)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::PersonPicture consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::PersonPicture value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::BadgeNumberProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_BadgeNumberProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::BadgeGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_BadgeGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::BadgeImageSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_BadgeImageSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::BadgeTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_BadgeTextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::IsGroupProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_IsGroupProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::ContactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_ContactProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::DisplayNameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_DisplayNameProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::InitialsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_InitialsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::PreferSmallImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_PreferSmallImageProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>::ProfilePictureProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureStatics)->get_ProfilePictureProperty(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IPersonPictureTemplateSettings<D>::ActualInitials() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings)->get_ActualInitials(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::ImageBrush consume_Microsoft_UI_Xaml_Controls_IPersonPictureTemplateSettings<D>::ActualImageBrush() const
{
    Windows::UI::Xaml::Media::ImageBrush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings)->get_ActualImageBrush(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::ItemsSource() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_ItemsSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::ItemsSource(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->put_ItemsSource(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::ItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_ItemTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::ItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->put_ItemTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::ContainerFromItem(Windows::Foundation::IInspectable const& item) const
{
    Windows::UI::Xaml::DependencyObject result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->ContainerFromItem(get_abi(item), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyObject consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::ContainerFromIndex(int32_t index) const
{
    Windows::UI::Xaml::DependencyObject result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->ContainerFromIndex(index, put_abi(result)));
    return result;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectedIndex() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_SelectedIndex(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectedIndex(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->put_SelectedIndex(value));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectedItem(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->put_SelectedItem(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectionChanged(Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->add_SelectionChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectionChanged_revoker consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectionChanged(auto_revoke_t, Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const
{
    return impl::make_event_revoker<D, SelectionChanged_revoker>(this, SelectionChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::SelectionChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->remove_SelectionChanged(get_abi(token)));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::MaximumColumns() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_MaximumColumns(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::MaximumColumns(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->put_MaximumColumns(value));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::Header() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->get_Header(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>::Header(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtons)->put_Header(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RadioButtons consume_Microsoft_UI_Xaml_Controls_IRadioButtonsFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RadioButtons value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_ItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::ItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_ItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_ItemTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::SelectedIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_SelectedIndexProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::SelectedItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_SelectedItemProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::MaximumColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_MaximumColumnsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioButtonsStatics)->get_HeaderProperty(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem<D>::IsChecked() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem)->get_IsChecked(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem<D>::IsChecked(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem)->put_IsChecked(value));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem<D>::GroupName() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem)->get_GroupName(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem<D>::GroupName(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem)->put_GroupName(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics<D>::IsCheckedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics)->get_IsCheckedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics<D>::GroupNameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics)->get_GroupNameProperty(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::Caption() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_Caption(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::Caption(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_Caption(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::InitialSetValue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_InitialSetValue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::InitialSetValue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_InitialSetValue(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::IsClearEnabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_IsClearEnabled(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::IsClearEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_IsClearEnabled(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::IsReadOnly() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_IsReadOnly(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::IsReadOnly(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_IsReadOnly(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::MaxRating() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_MaxRating(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::MaxRating(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_MaxRating(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::PlaceholderValue() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_PlaceholderValue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::PlaceholderValue(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_PlaceholderValue(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::RatingItemInfo consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::ItemInfo() const
{
    Microsoft::UI::Xaml::Controls::RatingItemInfo value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_ItemInfo(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::ItemInfo(Microsoft::UI::Xaml::Controls::RatingItemInfo const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_ItemInfo(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::Value() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->get_Value(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::Value(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->put_Value(value));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::ValueChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->add_ValueChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::ValueChanged_revoker consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::ValueChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ValueChanged_revoker>(this, ValueChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>::ValueChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControl)->remove_ValueChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RatingControl consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RatingControl value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::CaptionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_CaptionProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::InitialSetValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_InitialSetValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::IsClearEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_IsClearEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::IsReadOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_IsReadOnlyProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::MaxRatingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_MaxRatingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::PlaceholderValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_PlaceholderValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::ItemInfoProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_ItemInfoProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>::ValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingControlStatics)->get_ValueProperty(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::DisabledGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->get_DisabledGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::DisabledGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->put_DisabledGlyph(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::Glyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->get_Glyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::Glyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->put_Glyph(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::PointerOverGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->get_PointerOverGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::PointerOverGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->put_PointerOverGlyph(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::PointerOverPlaceholderGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->get_PointerOverPlaceholderGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::PointerOverPlaceholderGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->put_PointerOverPlaceholderGlyph(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::PlaceholderGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->get_PlaceholderGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::PlaceholderGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->put_PlaceholderGlyph(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::UnsetGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->get_UnsetGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>::UnsetGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfo)->put_UnsetGlyph(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RatingItemFontInfo consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RatingItemFontInfo value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>::DisabledGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics)->get_DisabledGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>::GlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics)->get_GlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>::PlaceholderGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics)->get_PlaceholderGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>::PointerOverGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics)->get_PointerOverGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>::PointerOverPlaceholderGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics)->get_PointerOverPlaceholderGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>::UnsetGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics)->get_UnsetGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::DisabledImage() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->get_DisabledImage(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::DisabledImage(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->put_DisabledImage(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::Image() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->get_Image(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::Image(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->put_Image(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::PlaceholderImage() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->get_PlaceholderImage(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::PlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->put_PlaceholderImage(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::PointerOverImage() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->get_PointerOverImage(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::PointerOverImage(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->put_PointerOverImage(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::PointerOverPlaceholderImage() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->get_PointerOverPlaceholderImage(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::PointerOverPlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->put_PointerOverPlaceholderImage(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::UnsetImage() const
{
    Windows::UI::Xaml::Media::ImageSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->get_UnsetImage(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>::UnsetImage(Windows::UI::Xaml::Media::ImageSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfo)->put_UnsetImage(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RatingItemImageInfo consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RatingItemImageInfo value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>::DisabledImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics)->get_DisabledImageProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>::ImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics)->get_ImageProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>::PlaceholderImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics)->get_PlaceholderImageProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>::PointerOverImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics)->get_PointerOverImageProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>::PointerOverPlaceholderImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics)->get_PointerOverPlaceholderImageProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>::UnsetImageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics)->get_UnsetImageProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::RatingItemInfo consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RatingItemInfo value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclePool<D>::PutElement(Windows::UI::Xaml::UIElement const& element, param::hstring const& key) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePool)->PutElement(get_abi(element), get_abi(key)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclePool<D>::PutElement(Windows::UI::Xaml::UIElement const& element, param::hstring const& key, Windows::UI::Xaml::UIElement const& owner) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePool)->PutElementWithOwner(get_abi(element), get_abi(key), get_abi(owner)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IRecyclePool<D>::TryGetElement(param::hstring const& key) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePool)->TryGetElement(get_abi(key), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IRecyclePool<D>::TryGetElement(param::hstring const& key, Windows::UI::Xaml::UIElement const& owner) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePool)->TryGetElementWithOwner(get_abi(key), get_abi(owner), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::RecyclePool consume_Microsoft_UI_Xaml_Controls_IRecyclePoolFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RecyclePool value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePoolFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclePoolOverrides<D>::PutElementCore(Windows::UI::Xaml::UIElement const& element, param::hstring const& key, Windows::UI::Xaml::UIElement const& owner) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides)->PutElementCore(get_abi(element), get_abi(key), get_abi(owner)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IRecyclePoolOverrides<D>::TryGetElementCore(param::hstring const& key, Windows::UI::Xaml::UIElement const& owner) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides)->TryGetElementCore(get_abi(key), get_abi(owner), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRecyclePoolStatics<D>::PoolInstanceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePoolStatics)->get_PoolInstanceProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::RecyclePool consume_Microsoft_UI_Xaml_Controls_IRecyclePoolStatics<D>::GetPoolInstance(Windows::UI::Xaml::DataTemplate const& dataTemplate) const
{
    Microsoft::UI::Xaml::Controls::RecyclePool result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePoolStatics)->GetPoolInstance(get_abi(dataTemplate), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclePoolStatics<D>::SetPoolInstance(Windows::UI::Xaml::DataTemplate const& dataTemplate, Microsoft::UI::Xaml::Controls::RecyclePool const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclePoolStatics)->SetPoolInstance(get_abi(dataTemplate), get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RecyclePool consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::RecyclePool() const
{
    Microsoft::UI::Xaml::Controls::RecyclePool value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactory)->get_RecyclePool(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::RecyclePool(Microsoft::UI::Xaml::Controls::RecyclePool const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactory)->put_RecyclePool(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IMap<hstring, Windows::UI::Xaml::DataTemplate> consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::Templates() const
{
    Windows::Foundation::Collections::IMap<hstring, Windows::UI::Xaml::DataTemplate> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactory)->get_Templates(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::Templates(param::map<hstring, Windows::UI::Xaml::DataTemplate> const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactory)->put_Templates(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::SelectTemplateKey(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RecyclingElementFactory, Microsoft::UI::Xaml::Controls::SelectTemplateEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactory)->add_SelectTemplateKey(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::SelectTemplateKey_revoker consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::SelectTemplateKey(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RecyclingElementFactory, Microsoft::UI::Xaml::Controls::SelectTemplateEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, SelectTemplateKey_revoker>(this, SelectTemplateKey(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactory<D>::SelectTemplateKey(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactory)->remove_SelectTemplateKey(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RecyclingElementFactory consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactoryFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RecyclingElementFactory value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_IRecyclingElementFactoryOverrides<D>::OnSelectTemplateKeyCore(Windows::Foundation::IInspectable const& dataContext, Windows::UI::Xaml::UIElement const& owner) const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides)->OnSelectTemplateKeyCore(get_abi(dataContext), get_abi(owner), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshVisualizer consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::Visualizer() const
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->get_Visualizer(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::Visualizer(Microsoft::UI::Xaml::Controls::RefreshVisualizer const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->put_Visualizer(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshPullDirection consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::PullDirection() const
{
    Microsoft::UI::Xaml::Controls::RefreshPullDirection value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->get_PullDirection(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->put_PullDirection(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::RefreshRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->add_RefreshRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::RefreshRequested_revoker consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, RefreshRequested_revoker>(this, RefreshRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::RefreshRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->remove_RefreshRequested(get_abi(token)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>::RequestRefresh() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainer)->RequestRefresh());
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshContainer consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RefreshContainer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainerFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics<D>::VisualizerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainerStatics)->get_VisualizerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics<D>::PullDirectionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshContainerStatics)->get_PullDirectionProperty(put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs<D>::InteractionRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs)->get_InteractionRatio(&value));
    return value;
}

template <typename D> Windows::Foundation::Deferral consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs<D>::GetDeferral() const
{
    Windows::Foundation::Deferral result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs)->GetDeferral(put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshVisualizerState consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>::OldState() const
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizerState value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs)->get_OldState(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshVisualizerState consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>::NewState() const
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizerState value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs)->get_NewState(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RequestRefresh() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->RequestRefresh());
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::Orientation() const
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->get_Orientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->put_Orientation(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::Content() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::Content(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->put_Content(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshVisualizerState consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::State() const
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizerState value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->get_State(put_abi(value)));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->add_RefreshRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshRequested_revoker consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, RefreshRequested_revoker>(this, RefreshRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->remove_RefreshRequested(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshStateChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->add_RefreshStateChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshStateChanged_revoker consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshStateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, RefreshStateChanged_revoker>(this, RefreshStateChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>::RefreshStateChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizer)->remove_RefreshStateChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RefreshVisualizer consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RefreshVisualizer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>::InfoProviderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics)->get_InfoProviderProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>::StateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics)->get_StateProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenterFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollAnchorProvider<D>::HorizontalAnchorRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnchorProvider)->get_HorizontalAnchorRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollAnchorProvider<D>::HorizontalAnchorRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnchorProvider)->put_HorizontalAnchorRatio(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollAnchorProvider<D>::VerticalAnchorRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnchorProvider)->get_VerticalAnchorRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollAnchorProvider<D>::VerticalAnchorRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnchorProvider)->put_VerticalAnchorRatio(value));
}

template <typename D> Windows::UI::Composition::CompositionAnimation consume_Microsoft_UI_Xaml_Controls_IScrollAnimationStartingEventArgs<D>::Animation() const
{
    Windows::UI::Composition::CompositionAnimation value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs)->get_Animation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollAnimationStartingEventArgs<D>::Animation(Windows::UI::Composition::CompositionAnimation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs)->put_Animation(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_UI_Xaml_Controls_IScrollAnimationStartingEventArgs<D>::StartPosition() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs)->get_StartPosition(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_UI_Xaml_Controls_IScrollAnimationStartingEventArgs<D>::EndPosition() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs)->get_EndPosition(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollAnimationStartingEventArgs<D>::ScrollInfo() const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs)->get_ScrollInfo(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollCompletedEventArgs<D>::ScrollInfo() const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollCompletedEventArgs)->get_ScrollInfo(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::AnimationMode consume_Microsoft_UI_Xaml_Controls_IScrollOptions<D>::AnimationMode() const
{
    Microsoft::UI::Xaml::Controls::AnimationMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollOptions)->get_AnimationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollOptions<D>::AnimationMode(Microsoft::UI::Xaml::Controls::AnimationMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollOptions)->put_AnimationMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SnapPointsMode consume_Microsoft_UI_Xaml_Controls_IScrollOptions<D>::SnapPointsMode() const
{
    Microsoft::UI::Xaml::Controls::SnapPointsMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollOptions)->get_SnapPointsMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollOptions<D>::SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollOptions)->put_SnapPointsMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollOptions consume_Microsoft_UI_Xaml_Controls_IScrollOptionsFactory<D>::CreateInstance(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ScrollOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollOptionsFactory)->CreateInstance(get_abi(animationMode), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollOptions consume_Microsoft_UI_Xaml_Controls_IScrollOptionsFactory<D>::CreateInstance2(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode const& snapPointsMode, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ScrollOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollOptionsFactory)->CreateInstance2(get_abi(animationMode), get_abi(snapPointsMode), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::Content() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::Content(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Composition::CompositionPropertySet consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExpressionAnimationSources() const
{
    Windows::UI::Composition::CompositionPropertySet value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ExpressionAnimationSources(put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalOffset(&value));
    return value;
}

template <typename D> float consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomFactor() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ZoomFactor(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExtentWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ExtentWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExtentHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ExtentHeight(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ViewportWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ViewportWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ViewportHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ViewportHeight(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollableWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ScrollableWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollableHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ScrollableHeight(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::InteractionState consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::State() const
{
    Microsoft::UI::Xaml::Controls::InteractionState value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_State(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::IScrollController consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollController() const
{
    Microsoft::UI::Xaml::Controls::Primitives::IScrollController value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalScrollController(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::IScrollController consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollController() const
{
    Microsoft::UI::Xaml::Controls::Primitives::IScrollController value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalScrollController(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollBarVisibility consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollBarVisibility() const
{
    Microsoft::UI::Xaml::Controls::ScrollBarVisibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalScrollBarVisibility(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollBarVisibility(Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_HorizontalScrollBarVisibility(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollBarVisibility consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollBarVisibility() const
{
    Microsoft::UI::Xaml::Controls::ScrollBarVisibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalScrollBarVisibility(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollBarVisibility(Microsoft::UI::Xaml::Controls::ScrollBarVisibility const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_VerticalScrollBarVisibility(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ContentOrientation consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ContentOrientation() const
{
    Microsoft::UI::Xaml::Controls::ContentOrientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ContentOrientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ContentOrientation(Microsoft::UI::Xaml::Controls::ContentOrientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_ContentOrientation(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ChainingMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollChainingMode() const
{
    Microsoft::UI::Xaml::Controls::ChainingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalScrollChainingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_HorizontalScrollChainingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ChainingMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollChainingMode() const
{
    Microsoft::UI::Xaml::Controls::ChainingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalScrollChainingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_VerticalScrollChainingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RailingMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollRailingMode() const
{
    Microsoft::UI::Xaml::Controls::RailingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalScrollRailingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_HorizontalScrollRailingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RailingMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollRailingMode() const
{
    Microsoft::UI::Xaml::Controls::RailingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalScrollRailingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_VerticalScrollRailingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollMode() const
{
    Microsoft::UI::Xaml::Controls::ScrollMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalScrollMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_HorizontalScrollMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollMode() const
{
    Microsoft::UI::Xaml::Controls::ScrollMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalScrollMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_VerticalScrollMode(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ComputedHorizontalScrollBarVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ComputedHorizontalScrollBarVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ComputedVerticalScrollBarVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ComputedVerticalScrollBarVisibility(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ChainingMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomChainingMode() const
{
    Microsoft::UI::Xaml::Controls::ChainingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ZoomChainingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_ZoomChainingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomMode consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomMode() const
{
    Microsoft::UI::Xaml::Controls::ZoomMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_ZoomMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomMode(Microsoft::UI::Xaml::Controls::ZoomMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_ZoomMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::InputKind consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::IgnoredInputKind() const
{
    Microsoft::UI::Xaml::Controls::InputKind value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_IgnoredInputKind(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::IgnoredInputKind(Microsoft::UI::Xaml::Controls::InputKind const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_IgnoredInputKind(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::MinZoomFactor() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_MinZoomFactor(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::MinZoomFactor(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_MinZoomFactor(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::MaxZoomFactor() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_MaxZoomFactor(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::MaxZoomFactor(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_MaxZoomFactor(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalAnchorRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_HorizontalAnchorRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::HorizontalAnchorRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_HorizontalAnchorRatio(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalAnchorRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->get_VerticalAnchorRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::VerticalAnchorRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->put_VerticalAnchorRatio(value));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::RegisterAnchorCandidate(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->RegisterAnchorCandidate(get_abi(element)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::UnregisterAnchorCandidate(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->UnregisterAnchorCandidate(get_abi(element)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollTo(double horizontalOffset, double verticalOffset) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ScrollTo(horizontalOffset, verticalOffset, put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollTo(double horizontalOffset, double verticalOffset, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ScrollToWithOptions(horizontalOffset, verticalOffset, get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ScrollBy(horizontalOffsetDelta, verticalOffsetDelta, put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ScrollByWithOptions(horizontalOffsetDelta, verticalOffsetDelta, get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollFrom(Windows::Foundation::Numerics::float2 const& offsetsVelocity, optional<Windows::Foundation::Numerics::float2> const& inertiaDecayRate) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ScrollFrom(get_abi(offsetsVelocity), get_abi(inertiaDecayRate), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomTo(float zoomFactor, optional<Windows::Foundation::Numerics::float2> const& centerPoint) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ZoomTo(zoomFactor, get_abi(centerPoint), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomTo(float zoomFactor, optional<Windows::Foundation::Numerics::float2> const& centerPoint, Microsoft::UI::Xaml::Controls::ZoomOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ZoomToWithOptions(zoomFactor, get_abi(centerPoint), get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomBy(float zoomFactorDelta, optional<Windows::Foundation::Numerics::float2> const& centerPoint) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ZoomBy(zoomFactorDelta, get_abi(centerPoint), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomBy(float zoomFactorDelta, optional<Windows::Foundation::Numerics::float2> const& centerPoint, Microsoft::UI::Xaml::Controls::ZoomOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ZoomByWithOptions(zoomFactorDelta, get_abi(centerPoint), get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomFrom(float zoomFactorVelocity, optional<Windows::Foundation::Numerics::float2> const& centerPoint, optional<float> const& inertiaDecayRate) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->ZoomFrom(zoomFactorVelocity, get_abi(centerPoint), get_abi(inertiaDecayRate), put_abi(result)));
    return result;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExtentChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_ExtentChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExtentChanged_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExtentChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ExtentChanged_revoker>(this, ExtentChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ExtentChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_ExtentChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::StateChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_StateChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::StateChanged_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::StateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, StateChanged_revoker>(this, StateChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::StateChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_StateChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ViewChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_ViewChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ViewChanged_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ViewChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ViewChanged_revoker>(this, ViewChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ViewChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_ViewChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollAnimationStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_ScrollAnimationStarting(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollAnimationStarting_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollAnimationStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollAnimationStarting_revoker>(this, ScrollAnimationStarting(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollAnimationStarting(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_ScrollAnimationStarting(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomAnimationStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_ZoomAnimationStarting(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomAnimationStarting_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomAnimationStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ZoomAnimationStarting_revoker>(this, ZoomAnimationStarting(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomAnimationStarting(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_ZoomAnimationStarting(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_ScrollCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollCompleted_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollCompleted_revoker>(this, ScrollCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ScrollCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_ScrollCompleted(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_ZoomCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomCompleted_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ZoomCompleted_revoker>(this, ZoomCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::ZoomCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_ZoomCompleted(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::BringingIntoView(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_BringingIntoView(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::BringingIntoView_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::BringingIntoView(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, BringingIntoView_revoker>(this, BringingIntoView(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::BringingIntoView(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_BringingIntoView(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::AnchorRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->add_AnchorRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::AnchorRequested_revoker consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::AnchorRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, AnchorRequested_revoker>(this, AnchorRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollViewer<D>::AnchorRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewer)->remove_AnchorRequested(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollViewer consume_Microsoft_UI_Xaml_Controls_IScrollViewerFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ScrollViewer value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ScrollerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ScrollerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::HorizontalScrollControllerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_HorizontalScrollControllerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::VerticalScrollControllerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_VerticalScrollControllerProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::HorizontalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_HorizontalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::VerticalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_VerticalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ContentOrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ContentOrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::HorizontalScrollChainingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_HorizontalScrollChainingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::VerticalScrollChainingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_VerticalScrollChainingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::HorizontalScrollRailingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_HorizontalScrollRailingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::VerticalScrollRailingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_VerticalScrollRailingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::HorizontalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_HorizontalScrollModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::VerticalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_VerticalScrollModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ComputedHorizontalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ComputedHorizontalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ComputedVerticalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ComputedVerticalScrollBarVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ZoomChainingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ZoomChainingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::ZoomModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_ZoomModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::IgnoredInputKindProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_IgnoredInputKindProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::MinZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_MinZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::MaxZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_MaxZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::HorizontalAnchorRatioProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_HorizontalAnchorRatioProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IScrollViewerStatics<D>::VerticalAnchorRatioProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollViewerStatics)->get_VerticalAnchorRatioProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement> consume_Microsoft_UI_Xaml_Controls_IScrollerAnchorRequestedEventArgs<D>::AnchorCandidates() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs)->get_AnchorCandidates(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IScrollerAnchorRequestedEventArgs<D>::AnchorElement() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs)->get_AnchorElement(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollerAnchorRequestedEventArgs<D>::AnchorElement(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs)->put_AnchorElement(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SnapPointsMode consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::SnapPointsMode() const
{
    Microsoft::UI::Xaml::Controls::SnapPointsMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->get_SnapPointsMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->put_SnapPointsMode(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::BringIntoViewRequestedEventArgs consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::RequestEventArgs() const
{
    Windows::UI::Xaml::BringIntoViewRequestedEventArgs value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->get_RequestEventArgs(put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::TargetHorizontalOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->get_TargetHorizontalOffset(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::TargetVerticalOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->get_TargetVerticalOffset(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::ScrollInfo() const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->get_ScrollInfo(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::Cancel() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IScrollerBringingIntoViewEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs)->put_Cancel(value));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_ISelectTemplateEventArgs<D>::TemplateKey() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs)->get_TemplateKey(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectTemplateEventArgs<D>::TemplateKey(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs)->put_TemplateKey(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISelectTemplateEventArgs<D>::DataContext() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs)->get_DataContext(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_ISelectTemplateEventArgs<D>::Owner() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs)->get_Owner(put_abi(value)));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectionChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelSelectionChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->add_SelectionChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectionChanged_revoker consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelSelectionChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, SelectionChanged_revoker>(this, SelectionChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectionChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->remove_SelectionChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::ChildrenRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelChildrenRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->add_ChildrenRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::ChildrenRequested_revoker consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::ChildrenRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelChildrenRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ChildrenRequested_revoker>(this, ChildrenRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::ChildrenRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->remove_ChildrenRequested(get_abi(token)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::Source() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_Source(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::Source(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->put_Source(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SingleSelect() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_SingleSelect(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SingleSelect(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->put_SingleSelect(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::IndexPath consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::AnchorIndex() const
{
    Microsoft::UI::Xaml::Controls::IndexPath value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_AnchorIndex(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::AnchorIndex(Microsoft::UI::Xaml::Controls::IndexPath const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->put_AnchorIndex(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::IndexPath consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectedIndex() const
{
    Microsoft::UI::Xaml::Controls::IndexPath value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_SelectedIndex(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectedIndex(Microsoft::UI::Xaml::Controls::IndexPath const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->put_SelectedIndex(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectedItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_SelectedItem(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_SelectedItems(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Microsoft::UI::Xaml::Controls::IndexPath> consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectedIndices() const
{
    Windows::Foundation::Collections::IVectorView<Microsoft::UI::Xaml::Controls::IndexPath> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->get_SelectedIndices(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SetAnchorIndex(int32_t index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SetAnchorIndex(index));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SetAnchorIndex(int32_t groupIndex, int32_t itemIndex) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SetAnchorIndexWithGroup(groupIndex, itemIndex));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::Select(int32_t index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->Select(index));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::Select(int32_t groupIndex, int32_t itemIndex) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectWithGroup(groupIndex, itemIndex));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectAt(Microsoft::UI::Xaml::Controls::IndexPath const& index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectAt(get_abi(index)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::Deselect(int32_t index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->Deselect(index));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::Deselect(int32_t groupIndex, int32_t itemIndex) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->DeselectWithGroup(groupIndex, itemIndex));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::DeselectAt(Microsoft::UI::Xaml::Controls::IndexPath const& index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->DeselectAt(get_abi(index)));
}

template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::IsSelected(int32_t index) const
{
    Windows::Foundation::IReference<bool> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->IsSelected(index, put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::IsSelected(int32_t groupIndex, int32_t itemIndex) const
{
    Windows::Foundation::IReference<bool> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->IsSelectedWithGroup(groupIndex, itemIndex, put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::IReference<bool> consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::IsSelectedAt(Microsoft::UI::Xaml::Controls::IndexPath const& index) const
{
    Windows::Foundation::IReference<bool> result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->IsSelectedAt(get_abi(index), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectRangeFromAnchor(int32_t index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectRangeFromAnchor(index));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectRangeFromAnchor(int32_t groupIndex, int32_t itemIndex) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectRangeFromAnchorWithGroup(groupIndex, itemIndex));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectRangeFromAnchorTo(Microsoft::UI::Xaml::Controls::IndexPath const& index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectRangeFromAnchorTo(get_abi(index)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::DeselectRangeFromAnchor(int32_t index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->DeselectRangeFromAnchor(index));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::DeselectRangeFromAnchor(int32_t groupIndex, int32_t itemIndex) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->DeselectRangeFromAnchorWithGroup(groupIndex, itemIndex));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::DeselectRangeFromAnchorTo(Microsoft::UI::Xaml::Controls::IndexPath const& index) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->DeselectRangeFromAnchorTo(get_abi(index)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectRange(Microsoft::UI::Xaml::Controls::IndexPath const& start, Microsoft::UI::Xaml::Controls::IndexPath const& end) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectRange(get_abi(start), get_abi(end)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::DeselectRange(Microsoft::UI::Xaml::Controls::IndexPath const& start, Microsoft::UI::Xaml::Controls::IndexPath const& end) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->DeselectRange(get_abi(start), get_abi(end)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->SelectAll());
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModel<D>::ClearSelection() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModel)->ClearSelection());
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISelectionModelChildrenRequestedEventArgs<D>::Source() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs)->get_Source(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISelectionModelChildrenRequestedEventArgs<D>::Children() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs)->get_Children(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModelChildrenRequestedEventArgs<D>::Children(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs)->put_Children(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SelectionModel consume_Microsoft_UI_Xaml_Controls_ISelectionModelFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::SelectionModel value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModelFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelectionModelProtected<D>::OnPropertyChanged(param::hstring const& propertyName) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelectionModelProtected)->OnPropertyChanged(get_abi(propertyName)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::Pause() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->Pause());
}

template <typename D> Windows::Foundation::IAsyncAction consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::PlayAsync(double fromProgress, double toProgress, bool looped) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->PlayAsync(fromProgress, toProgress, looped, put_abi(operation)));
    return operation;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::Resume() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->Resume());
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::Stop() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->Stop());
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::SetPlaybackRate(double playbackRate) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->SetPlaybackRate(playbackRate));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::SetProgress(double progress) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->SetProgress(progress));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::SetProgressObject(Windows::UI::Composition::CompositionPropertySet const& compositionPropertySet) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->SetProgressObject(get_abi(compositionPropertySet)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISelfPlayingAnimatedVisual<D>::SetSize(Windows::Foundation::Size const& size) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual)->SetSize(get_abi(size)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::FlyoutBase consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Flyout() const
{
    Windows::UI::Xaml::Controls::Primitives::FlyoutBase value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->get_Flyout(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Flyout(Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->put_Flyout(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Command() const
{
    Windows::UI::Xaml::Input::ICommand value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->get_Command(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Command(Windows::UI::Xaml::Input::ICommand const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->put_Command(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::CommandParameter() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->get_CommandParameter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::CommandParameter(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->put_CommandParameter(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Click(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->add_Click(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Click_revoker consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Click(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Click_revoker>(this, Click(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>::Click(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButton)->remove_Click(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SplitButton consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::SplitButton value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButtonFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics<D>::FlyoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButtonStatics)->get_FlyoutProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics<D>::CommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButtonStatics)->get_CommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics<D>::CommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISplitButtonStatics)->get_CommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Orientation consume_Microsoft_UI_Xaml_Controls_IStackLayout<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayout)->get_Orientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IStackLayout<D>::Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayout)->put_Orientation(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IStackLayout<D>::Spacing() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayout)->get_Spacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IStackLayout<D>::Spacing(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayout)->put_Spacing(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::StackLayout consume_Microsoft_UI_Xaml_Controls_IStackLayoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::StackLayout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::StackLayoutState consume_Microsoft_UI_Xaml_Controls_IStackLayoutStateFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::StackLayoutState value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IStackLayoutStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayoutStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IStackLayoutStatics<D>::SpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IStackLayoutStatics)->get_SpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeItems consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::LeftItems() const
{
    Microsoft::UI::Xaml::Controls::SwipeItems value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->get_LeftItems(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::LeftItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->put_LeftItems(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeItems consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::RightItems() const
{
    Microsoft::UI::Xaml::Controls::SwipeItems value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->get_RightItems(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::RightItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->put_RightItems(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeItems consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::TopItems() const
{
    Microsoft::UI::Xaml::Controls::SwipeItems value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->get_TopItems(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::TopItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->put_TopItems(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeItems consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::BottomItems() const
{
    Microsoft::UI::Xaml::Controls::SwipeItems value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->get_BottomItems(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::BottomItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->put_BottomItems(get_abi(value)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>::Close() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControl)->Close());
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeControl consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::SwipeControl value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControlFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>::LeftItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControlStatics)->get_LeftItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>::RightItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControlStatics)->get_RightItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>::TopItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControlStatics)->get_TopItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>::BottomItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeControlStatics)->get_BottomItemsProperty(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Text() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_Text(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Text(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_Text(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::IconSource consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::IconSource() const
{
    Microsoft::UI::Xaml::Controls::IconSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_IconSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::IconSource(Microsoft::UI::Xaml::Controls::IconSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_IconSource(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Background(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_Background(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_Foreground(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Foreground(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_Foreground(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Command() const
{
    Windows::UI::Xaml::Input::ICommand value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_Command(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Command(Windows::UI::Xaml::Input::ICommand const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_Command(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::CommandParameter() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_CommandParameter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::CommandParameter(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_CommandParameter(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::BehaviorOnInvoked() const
{
    Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->get_BehaviorOnInvoked(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->put_BehaviorOnInvoked(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Invoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->add_Invoked(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Invoked_revoker consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Invoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Invoked_revoker>(this, Invoked(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>::Invoked(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItem)->remove_Invoked(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeItem consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::SwipeItem value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeControl consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs<D>::SwipeControl() const
{
    Microsoft::UI::Xaml::Controls::SwipeControl value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs)->get_SwipeControl(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::IconSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_IconSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_TextProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_ForegroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::CommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_CommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::CommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_CommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>::BehaviorOnInvokedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemStatics)->get_BehaviorOnInvokedProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeMode consume_Microsoft_UI_Xaml_Controls_ISwipeItems<D>::Mode() const
{
    Microsoft::UI::Xaml::Controls::SwipeMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItems)->get_Mode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISwipeItems<D>::Mode(Microsoft::UI::Xaml::Controls::SwipeMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItems)->put_Mode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SwipeItems consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::SwipeItems value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemsFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics<D>::ModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISwipeItemsStatics)->get_ModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Symbol consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource<D>::Symbol() const
{
    Windows::UI::Xaml::Controls::Symbol value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISymbolIconSource)->get_Symbol(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource<D>::Symbol(Windows::UI::Xaml::Controls::Symbol const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISymbolIconSource)->put_Symbol(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SymbolIconSource consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::SymbolIconSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics<D>::SymbolProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics)->get_SymbolProperty(put_abi(value)));
    return value;
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Title() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_Title(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Title(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_Title(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Subtitle() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_Subtitle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Subtitle(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_Subtitle(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::IsOpen() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_IsOpen(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::IsOpen(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_IsOpen(value));
}

template <typename D> Windows::UI::Xaml::FrameworkElement consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Target() const
{
    Windows::UI::Xaml::FrameworkElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_Target(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Target(Windows::UI::Xaml::FrameworkElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_Target(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::TailVisibility() const
{
    Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_TailVisibility(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::TailVisibility(Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_TailVisibility(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonContent() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_ActionButtonContent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonContent(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_ActionButtonContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonStyle() const
{
    Windows::UI::Xaml::Style value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_ActionButtonStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonStyle(Windows::UI::Xaml::Style const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_ActionButtonStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonCommand() const
{
    Windows::UI::Xaml::Input::ICommand value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_ActionButtonCommand(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_ActionButtonCommand(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonCommandParameter() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_ActionButtonCommandParameter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonCommandParameter(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_ActionButtonCommandParameter(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonContent() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_CloseButtonContent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonContent(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_CloseButtonContent(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonStyle() const
{
    Windows::UI::Xaml::Style value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_CloseButtonStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonStyle(Windows::UI::Xaml::Style const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_CloseButtonStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonCommand() const
{
    Windows::UI::Xaml::Input::ICommand value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_CloseButtonCommand(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_CloseButtonCommand(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonCommandParameter() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_CloseButtonCommandParameter(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonCommandParameter(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_CloseButtonCommandParameter(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::PlacementMargin() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_PlacementMargin(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::PlacementMargin(Windows::UI::Xaml::Thickness const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_PlacementMargin(get_abi(value)));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::IsLightDismissEnabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_IsLightDismissEnabled(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::IsLightDismissEnabled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_IsLightDismissEnabled(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::PreferredPlacement() const
{
    Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_PreferredPlacement(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::PreferredPlacement(Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_PreferredPlacement(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::HeroContentPlacement() const
{
    Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_HeroContentPlacement(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::HeroContentPlacement(Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_HeroContentPlacement(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::HeroContent() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_HeroContent(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::HeroContent(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_HeroContent(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::IconSource consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::IconSource() const
{
    Microsoft::UI::Xaml::Controls::IconSource value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_IconSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::IconSource(Microsoft::UI::Xaml::Controls::IconSource const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->put_IconSource(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::TemplateSettings() const
{
    Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->get_TemplateSettings(put_abi(value)));
    return value;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonClick(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->add_ActionButtonClick(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonClick_revoker consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ActionButtonClick_revoker>(this, ActionButtonClick(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::ActionButtonClick(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->remove_ActionButtonClick(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonClick(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->add_CloseButtonClick(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonClick_revoker consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, CloseButtonClick_revoker>(this, CloseButtonClick(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::CloseButtonClick(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->remove_CloseButtonClick(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->add_Closing(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closing_revoker consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Closing_revoker>(this, Closing(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closing(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->remove_Closing(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->add_Closed(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closed_revoker consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Closed_revoker>(this, Closed(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>::Closed(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTip)->remove_Closed(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipCloseReason consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosedEventArgs<D>::Reason() const
{
    Microsoft::UI::Xaml::Controls::TeachingTipCloseReason value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs)->get_Reason(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipCloseReason consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs<D>::Reason() const
{
    Microsoft::UI::Xaml::Controls::TeachingTipCloseReason value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs)->get_Reason(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs<D>::Cancel() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::Foundation::Deferral consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs<D>::GetDeferral() const
{
    Windows::Foundation::Deferral result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs)->GetDeferral(put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTip consume_Microsoft_UI_Xaml_Controls_ITeachingTipFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TeachingTip value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::IsOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_IsOpenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::TargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_TargetProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::TailVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_TailVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_TitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::SubtitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_SubtitleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::ActionButtonContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_ActionButtonContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::ActionButtonStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_ActionButtonStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::ActionButtonCommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_ActionButtonCommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::ActionButtonCommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_ActionButtonCommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::CloseButtonContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_CloseButtonContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::CloseButtonStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_CloseButtonStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::CloseButtonCommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_CloseButtonCommandProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::CloseButtonCommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_CloseButtonCommandParameterProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::PlacementMarginProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_PlacementMarginProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::IsLightDismissEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_IsLightDismissEnabledProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::PreferredPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_PreferredPlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::HeroContentPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_HeroContentPlacementProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::HeroContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_HeroContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::IconSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_IconSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>::TemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipStatics)->get_TemplateSettingsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>::TopRightHighlightMargin() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings)->get_TopRightHighlightMargin(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>::TopRightHighlightMargin(Windows::UI::Xaml::Thickness const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings)->put_TopRightHighlightMargin(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Thickness consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>::TopLeftHighlightMargin() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings)->get_TopLeftHighlightMargin(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>::TopLeftHighlightMargin(Windows::UI::Xaml::Thickness const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings)->put_TopLeftHighlightMargin(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::IconElement consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>::IconElement() const
{
    Windows::UI::Xaml::Controls::IconElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings)->get_IconElement(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>::IconElement(Windows::UI::Xaml::Controls::IconElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings)->put_IconElement(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics<D>::TopRightHighlightMarginProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics)->get_TopRightHighlightMarginProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics<D>::TopLeftHighlightMarginProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics)->get_TopLeftHighlightMarginProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics<D>::IconElementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics)->get_IconElementProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TextCommandBarFlyout consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TextCommandBarFlyout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>::IsChecked() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IToggleSplitButton)->get_IsChecked(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>::IsChecked(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IToggleSplitButton)->put_IsChecked(value));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>::IsCheckedChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IToggleSplitButton)->add_IsCheckedChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>::IsCheckedChanged_revoker consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>::IsCheckedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, IsCheckedChanged_revoker>(this, IsCheckedChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>::IsCheckedChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::IToggleSplitButton)->remove_IsCheckedChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ToggleSplitButton consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ToggleSplitButton value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::RootNodes() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_RootNodes(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewSelectionMode consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::SelectionMode() const
{
    Microsoft::UI::Xaml::Controls::TreeViewSelectionMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_SelectionMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_SelectionMode(get_abi(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::SelectedNodes() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_SelectedNodes(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Expand(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->Expand(get_abi(value)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Collapse(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->Collapse(get_abi(value)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::SelectAll() const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->SelectAll());
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemInvoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->add_ItemInvoked(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemInvoked_revoker consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ItemInvoked_revoker>(this, ItemInvoked(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemInvoked(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->remove_ItemInvoked(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Expanding(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->add_Expanding(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Expanding_revoker consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Expanding(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Expanding_revoker>(this, Expanding(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Expanding(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->remove_Expanding(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Collapsed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->add_Collapsed(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Collapsed_revoker consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Collapsed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Collapsed_revoker>(this, Collapsed(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::Collapsed(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->remove_Collapsed(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewNode consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::NodeFromContainer(Windows::UI::Xaml::DependencyObject const& container) const
{
    Microsoft::UI::Xaml::Controls::TreeViewNode result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->NodeFromContainer(get_abi(container), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyObject consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ContainerFromNode(Microsoft::UI::Xaml::Controls::TreeViewNode const& node) const
{
    Windows::UI::Xaml::DependencyObject result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->ContainerFromNode(get_abi(node), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const
{
    Windows::Foundation::IInspectable result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->ItemFromContainer(get_abi(container), put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::DependencyObject consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ContainerFromItem(Windows::Foundation::IInspectable const& item) const
{
    Windows::UI::Xaml::DependencyObject result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->ContainerFromItem(get_abi(item), put_abi(result)));
    return result;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::CanDragItems() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_CanDragItems(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::CanDragItems(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_CanDragItems(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::CanReorderItems() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_CanReorderItems(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::CanReorderItems(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_CanReorderItems(value));
}

template <typename D> Windows::UI::Xaml::DataTemplate consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_ItemTemplate(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_ItemTemplate(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_ItemTemplateSelector(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_ItemTemplateSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Style consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemContainerStyle() const
{
    Windows::UI::Xaml::Style value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_ItemContainerStyle(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemContainerStyle(Windows::UI::Xaml::Style const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_ItemContainerStyle(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemContainerStyleSelector() const
{
    Windows::UI::Xaml::Controls::StyleSelector value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_ItemContainerStyleSelector(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_ItemContainerStyleSelector(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemContainerTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_ItemContainerTransitions(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemContainerTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_ItemContainerTransitions(get_abi(value)));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemsSource() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->get_ItemsSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::ItemsSource(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->put_ItemsSource(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->add_DragItemsStarting(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsStarting_revoker consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, DragItemsStarting_revoker>(this, DragItemsStarting(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsStarting(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->remove_DragItemsStarting(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->add_DragItemsCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsCompleted_revoker consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, DragItemsCompleted_revoker>(this, DragItemsCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeView<D>::DragItemsCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeView)->remove_DragItemsCompleted(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewNode consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>::Node() const
{
    Microsoft::UI::Xaml::Controls::TreeViewNode value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs)->get_Node(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>::Item() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs)->get_Item(put_abi(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackageOperation consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs<D>::DropResult() const
{
    Windows::ApplicationModel::DataTransfer::DataPackageOperation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs)->get_DropResult(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs<D>::Items() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs)->get_Items(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>::Cancel() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs)->get_Cancel(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs)->put_Cancel(value));
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackage consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>::Data() const
{
    Windows::ApplicationModel::DataTransfer::DataPackage value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs)->get_Data(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs)->get_Items(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewNode consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>::Node() const
{
    Microsoft::UI::Xaml::Controls::TreeViewNode value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs)->get_Node(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>::Item() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs)->get_Item(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeView consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TreeView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::GlyphOpacity() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_GlyphOpacity(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::GlyphOpacity(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_GlyphOpacity(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::GlyphBrush() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_GlyphBrush(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::GlyphBrush(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_GlyphBrush(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::ExpandedGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_ExpandedGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::ExpandedGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_ExpandedGlyph(get_abi(value)));
}

template <typename D> hstring consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::CollapsedGlyph() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_CollapsedGlyph(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::CollapsedGlyph(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_CollapsedGlyph(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::GlyphSize() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_GlyphSize(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::GlyphSize(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_GlyphSize(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::IsExpanded() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_IsExpanded(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::IsExpanded(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_IsExpanded(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::TreeViewItemTemplateSettings() const
{
    Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_TreeViewItemTemplateSettings(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::HasUnrealizedChildren() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_HasUnrealizedChildren(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::HasUnrealizedChildren(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_HasUnrealizedChildren(value));
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::ItemsSource() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->get_ItemsSource(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>::ItemsSource(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItem)->put_ItemsSource(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewItem consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TreeViewItem value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>::InvokedItem() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs)->get_InvokedItem(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs)->put_Handled(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>::Handled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::GlyphOpacityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_GlyphOpacityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::GlyphBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_GlyphBrushProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::ExpandedGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_ExpandedGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::CollapsedGlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_CollapsedGlyphProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::GlyphSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_GlyphSizeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::IsExpandedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_IsExpandedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::TreeViewItemTemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_TreeViewItemTemplateSettingsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::HasUnrealizedChildrenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_HasUnrealizedChildrenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemStatics)->get_ItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>::ExpandedGlyphVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings)->get_ExpandedGlyphVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>::CollapsedGlyphVisibility() const
{
    Windows::UI::Xaml::Visibility value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings)->get_CollapsedGlyphVisibility(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>::Indentation() const
{
    Windows::UI::Xaml::Thickness value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings)->get_Indentation(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>::DragItemsCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings)->get_DragItemsCount(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>::ExpandedGlyphVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics)->get_ExpandedGlyphVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>::CollapsedGlyphVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics)->get_CollapsedGlyphVisibilityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>::IndentationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics)->get_IndentationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>::DragItemsCountProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics)->get_DragItemsCountProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewList consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TreeViewList value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewListFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::Content() const
{
    Windows::Foundation::IInspectable value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::Content(Windows::Foundation::IInspectable const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->put_Content(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewNode consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::Parent() const
{
    Microsoft::UI::Xaml::Controls::TreeViewNode value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_Parent(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::IsExpanded() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_IsExpanded(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::IsExpanded(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->put_IsExpanded(value));
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::HasChildren() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_HasChildren(&value));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::Depth() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_Depth(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::HasUnrealizedChildren() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_HasUnrealizedChildren(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::HasUnrealizedChildren(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->put_HasUnrealizedChildren(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>::Children() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNode)->get_Children(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TreeViewNode consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TreeViewNode value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>::DepthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics)->get_DepthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>::IsExpandedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics)->get_IsExpandedProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>::HasChildrenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics)->get_HasChildrenProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_SelectionModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::CanDragItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_CanDragItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::CanReorderItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_CanReorderItemsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_ItemTemplateProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::ItemTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_ItemTemplateSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::ItemContainerStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_ItemContainerStyleProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::ItemContainerStyleSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_ItemContainerStyleSelectorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::ItemContainerTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_ItemContainerTransitionsProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITreeViewStatics)->get_ItemsSourceProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane1() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_Pane1(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane1(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_Pane1(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane2() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_Pane2(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane2(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_Pane2(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::GridLength consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane1Length() const
{
    Windows::UI::Xaml::GridLength value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_Pane1Length(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane1Length(Windows::UI::Xaml::GridLength const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_Pane1Length(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::GridLength consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane2Length() const
{
    Windows::UI::Xaml::GridLength value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_Pane2Length(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Pane2Length(Windows::UI::Xaml::GridLength const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_Pane2Length(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TwoPaneViewPriority consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::PanePriority() const
{
    Microsoft::UI::Xaml::Controls::TwoPaneViewPriority value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_PanePriority(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::PanePriority(Microsoft::UI::Xaml::Controls::TwoPaneViewPriority const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_PanePriority(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TwoPaneViewMode consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::Mode() const
{
    Microsoft::UI::Xaml::Controls::TwoPaneViewMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_Mode(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::WideModeConfiguration() const
{
    Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_WideModeConfiguration(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::WideModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_WideModeConfiguration(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::TallModeConfiguration() const
{
    Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_TallModeConfiguration(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::TallModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_TallModeConfiguration(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::MinWideModeWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_MinWideModeWidth(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::MinWideModeWidth(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_MinWideModeWidth(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::MinTallModeHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->get_MinTallModeHeight(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::MinTallModeHeight(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->put_MinTallModeHeight(value));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::ModeChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->add_ModeChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::ModeChanged_revoker consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::ModeChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ModeChanged_revoker>(this, ModeChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>::ModeChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneView)->remove_ModeChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::TwoPaneView consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::TwoPaneView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::Pane1Property() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_Pane1Property(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::Pane2Property() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_Pane2Property(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::Pane1LengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_Pane1LengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::Pane2LengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_Pane2LengthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::PanePriorityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_PanePriorityProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::ModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_ModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::WideModeConfigurationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_WideModeConfigurationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::TallModeConfigurationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_TallModeConfigurationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::MinWideModeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_MinWideModeWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>::MinTallModeHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics)->get_MinTallModeHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Orientation consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_Orientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_Orientation(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinItemWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_MinItemWidth(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinItemWidth(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_MinItemWidth(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinItemHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_MinItemHeight(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinItemHeight(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_MinItemHeight(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinRowSpacing() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_MinRowSpacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinRowSpacing(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_MinRowSpacing(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinColumnSpacing() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_MinColumnSpacing(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::MinColumnSpacing(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_MinColumnSpacing(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::ItemsJustification() const
{
    Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_ItemsJustification(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::ItemsJustification(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_ItemsJustification(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::ItemsStretch() const
{
    Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->get_ItemsStretch(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>::ItemsStretch(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayout)->put_ItemsStretch(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::UniformGridLayout consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::UniformGridLayout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::UniformGridLayoutState consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStateFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::UniformGridLayoutState value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_OrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::MinItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_MinItemWidthProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::MinItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_MinItemHeightProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::MinRowSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_MinRowSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::MinColumnSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_MinColumnSpacingProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::ItemsJustificationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_ItemsJustificationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>::ItemsStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics)->get_ItemsStretchProperty(put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::ItemCount() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->get_ItemCount(&value));
    return value;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::GetItemAt(int32_t index) const
{
    Windows::Foundation::IInspectable result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->GetItemAt(index, put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::RealizationRect() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->get_RealizationRect(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::GetOrCreateElementAt(int32_t index) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->GetOrCreateElementAt(index, put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::GetOrCreateElementAt(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->GetOrCreateElementAt2(index, get_abi(options), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::RecycleElement(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->RecycleElement(get_abi(element)));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::RecommendedAnchorIndex() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->get_RecommendedAnchorIndex(&value));
    return value;
}

template <typename D> Windows::Foundation::Point consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::LayoutOrigin() const
{
    Windows::Foundation::Point value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->get_LayoutOrigin(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>::LayoutOrigin(Windows::Foundation::Point const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext)->put_LayoutOrigin(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::ItemCountCore() const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->ItemCountCore(&result));
    return result;
}

template <typename D> Windows::Foundation::IInspectable consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::GetItemAtCore(int32_t index) const
{
    Windows::Foundation::IInspectable result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->GetItemAtCore(index, put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::RealizationRectCore() const
{
    Windows::Foundation::Rect result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->RealizationRectCore(put_abi(result)));
    return result;
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::GetElementAtCore(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const
{
    Windows::UI::Xaml::UIElement result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->GetElementAtCore(index, get_abi(options), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::RecycleElementCore(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->RecycleElementCore(get_abi(element)));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::RecommendedAnchorIndexCore() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->get_RecommendedAnchorIndexCore(&value));
    return value;
}

template <typename D> Windows::Foundation::Point consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::LayoutOriginCore() const
{
    Windows::Foundation::Point value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->get_LayoutOriginCore(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>::LayoutOriginCore(Windows::Foundation::Point const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides)->put_LayoutOriginCore(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::VirtualizingLayout consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::VirtualizingLayout value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>::InitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides)->InitializeForContextCore(get_abi(context)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>::UninitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides)->UninitializeForContextCore(get_abi(context)));
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>::MeasureOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides)->MeasureOverride(get_abi(context), get_abi(availableSize), put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::Size consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>::ArrangeOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize) const
{
    Windows::Foundation::Size result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides)->ArrangeOverride(get_abi(context), get_abi(finalSize), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>::OnItemsChangedCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::IInspectable const& source, Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& args) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides)->OnItemsChangedCore(get_abi(context), get_abi(source), get_abi(args)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics<D>::EnsureRevealLights(Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics)->EnsureRevealLights(get_abi(element)));
}

template <typename D> Windows::Foundation::Numerics::float2 consume_Microsoft_UI_Xaml_Controls_IZoomAnimationStartingEventArgs<D>::CenterPoint() const
{
    Windows::Foundation::Numerics::float2 value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs)->get_CenterPoint(put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_UI_Xaml_Controls_IZoomAnimationStartingEventArgs<D>::StartZoomFactor() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs)->get_StartZoomFactor(&value));
    return value;
}

template <typename D> float consume_Microsoft_UI_Xaml_Controls_IZoomAnimationStartingEventArgs<D>::EndZoomFactor() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs)->get_EndZoomFactor(&value));
    return value;
}

template <typename D> Windows::UI::Composition::CompositionAnimation consume_Microsoft_UI_Xaml_Controls_IZoomAnimationStartingEventArgs<D>::Animation() const
{
    Windows::UI::Composition::CompositionAnimation value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs)->get_Animation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IZoomAnimationStartingEventArgs<D>::Animation(Windows::UI::Composition::CompositionAnimation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs)->put_Animation(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IZoomAnimationStartingEventArgs<D>::ZoomInfo() const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs)->get_ZoomInfo(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_IZoomCompletedEventArgs<D>::ZoomInfo() const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomCompletedEventArgs)->get_ZoomInfo(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::AnimationMode consume_Microsoft_UI_Xaml_Controls_IZoomOptions<D>::AnimationMode() const
{
    Microsoft::UI::Xaml::Controls::AnimationMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomOptions)->get_AnimationMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IZoomOptions<D>::AnimationMode(Microsoft::UI::Xaml::Controls::AnimationMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomOptions)->put_AnimationMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::SnapPointsMode consume_Microsoft_UI_Xaml_Controls_IZoomOptions<D>::SnapPointsMode() const
{
    Microsoft::UI::Xaml::Controls::SnapPointsMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomOptions)->get_SnapPointsMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_IZoomOptions<D>::SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomOptions)->put_SnapPointsMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomOptions consume_Microsoft_UI_Xaml_Controls_IZoomOptionsFactory<D>::CreateInstance(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ZoomOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomOptionsFactory)->CreateInstance(get_abi(animationMode), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomOptions consume_Microsoft_UI_Xaml_Controls_IZoomOptionsFactory<D>::CreateInstance2(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode const& snapPointsMode, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::ZoomOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::IZoomOptionsFactory)->CreateInstance2(get_abi(animationMode), get_abi(snapPointsMode), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <> struct delegate<Microsoft::UI::Xaml::Controls::ElementAnimationCompleted>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::UI::Xaml::Controls::ElementAnimationCompleted, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::UI::Xaml::Controls::ElementAnimationCompleted, H>(std::forward<H>(handler)) {}

        int32_t WINRT_CALL Invoke(void* sender, void* element) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementAnimator const*>(&sender), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
                return 0;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IAnimatedVisual> : produce_base<D, Microsoft::UI::Xaml::Controls::IAnimatedVisual>
{
    int32_t WINRT_CALL get_RootVisual(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RootVisual, WINRT_WRAP(Windows::UI::Composition::Visual));
            *value = detach_from<Windows::UI::Composition::Visual>(this->shim().RootVisual());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Size(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Size, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Duration(Windows::Foundation::TimeSpan* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Duration, WINRT_WRAP(Windows::Foundation::TimeSpan));
            *value = detach_from<Windows::Foundation::TimeSpan>(this->shim().Duration());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer> : produce_base<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>
{
    int32_t WINRT_CALL get_Diagnostics(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Diagnostics, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Diagnostics());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Duration(Windows::Foundation::TimeSpan* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Duration, WINRT_WRAP(Windows::Foundation::TimeSpan));
            *value = detach_from<Windows::Foundation::TimeSpan>(this->shim().Duration());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IAnimatedVisualSource));
            *value = detach_from<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IAnimatedVisualSource const&);
            this->shim().Source(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FallbackContent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FallbackContent, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().FallbackContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FallbackContent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FallbackContent, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().FallbackContent(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AutoPlay(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AutoPlay, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AutoPlay());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AutoPlay(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AutoPlay, WINRT_WRAP(void), bool);
            this->shim().AutoPlay(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAnimatedVisualLoaded(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAnimatedVisualLoaded, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsAnimatedVisualLoaded());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsPlaying(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPlaying, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsPlaying());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaybackRate(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaybackRate, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().PlaybackRate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PlaybackRate(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaybackRate, WINRT_WRAP(void), double);
            this->shim().PlaybackRate(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ProgressObject(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ProgressObject, WINRT_WRAP(Windows::UI::Composition::CompositionObject));
            *value = detach_from<Windows::UI::Composition::CompositionObject>(this->shim().ProgressObject());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Stretch(Windows::UI::Xaml::Media::Stretch* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stretch, WINRT_WRAP(Windows::UI::Xaml::Media::Stretch));
            *value = detach_from<Windows::UI::Xaml::Media::Stretch>(this->shim().Stretch());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stretch, WINRT_WRAP(void), Windows::UI::Xaml::Media::Stretch const&);
            this->shim().Stretch(*reinterpret_cast<Windows::UI::Xaml::Media::Stretch const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Pause() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pause, WINRT_WRAP(void));
            this->shim().Pause();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL PlayAsync(double fromProgress, double toProgress, bool looped, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlayAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), double, double, bool);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().PlayAsync(fromProgress, toProgress, looped));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Resume() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Resume, WINRT_WRAP(void));
            this->shim().Resume();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetProgress(double progress) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetProgress, WINRT_WRAP(void), double);
            this->shim().SetProgress(progress);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Stop() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stop, WINRT_WRAP(void));
            this->shim().Stop();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>
{
    int32_t WINRT_CALL get_AutoPlayProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AutoPlayProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AutoPlayProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DiagnosticsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DiagnosticsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DiagnosticsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DurationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DurationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DurationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FallbackContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FallbackContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().FallbackContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAnimatedVisualLoadedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAnimatedVisualLoadedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsAnimatedVisualLoadedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsPlayingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPlayingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsPlayingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaybackRateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaybackRateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PlaybackRateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StretchProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StretchProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().StretchProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualSource> : produce_base<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>
{
    int32_t WINRT_CALL TryCreateAnimatedVisual(void* compositor, void** diagnostics, void** result) noexcept final
    {
        try
        {
            *diagnostics = nullptr;
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TryCreateAnimatedVisual, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IAnimatedVisual), Windows::UI::Composition::Compositor const&, Windows::Foundation::IInspectable&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::IAnimatedVisual>(this->shim().TryCreateAnimatedVisual(*reinterpret_cast<Windows::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<Windows::Foundation::IInspectable*>(diagnostics)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IBitmapIconSource> : produce_base<D, Microsoft::UI::Xaml::Controls::IBitmapIconSource>
{
    int32_t WINRT_CALL get_UriSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UriSource, WINRT_WRAP(Windows::Foundation::Uri));
            *value = detach_from<Windows::Foundation::Uri>(this->shim().UriSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_UriSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UriSource, WINRT_WRAP(void), Windows::Foundation::Uri const&);
            this->shim().UriSource(*reinterpret_cast<Windows::Foundation::Uri const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShowAsMonochrome(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShowAsMonochrome, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().ShowAsMonochrome());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ShowAsMonochrome(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShowAsMonochrome, WINRT_WRAP(void), bool);
            this->shim().ShowAsMonochrome(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::BitmapIconSource), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::BitmapIconSource>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>
{
    int32_t WINRT_CALL get_UriSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UriSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().UriSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShowAsMonochromeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShowAsMonochromeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ShowAsMonochromeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IColorChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>
{
    int32_t WINRT_CALL get_OldColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OldColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().OldColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_NewColor(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(NewColor, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().NewColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IColorPicker> : produce_base<D, Microsoft::UI::Xaml::Controls::IColorPicker>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreviousColor(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreviousColor, WINRT_WRAP(Windows::Foundation::IReference<Windows::UI::Color>));
            *value = detach_from<Windows::Foundation::IReference<Windows::UI::Color>>(this->shim().PreviousColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PreviousColor(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreviousColor, WINRT_WRAP(void), Windows::Foundation::IReference<Windows::UI::Color> const&);
            this->shim().PreviousColor(*reinterpret_cast<Windows::Foundation::IReference<Windows::UI::Color> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAlphaEnabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaEnabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsAlphaEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsAlphaEnabled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaEnabled, WINRT_WRAP(void), bool);
            this->shim().IsAlphaEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorSpectrumVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorSpectrumVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsColorSpectrumVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsColorSpectrumVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorSpectrumVisible, WINRT_WRAP(void), bool);
            this->shim().IsColorSpectrumVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorPreviewVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorPreviewVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsColorPreviewVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsColorPreviewVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorPreviewVisible, WINRT_WRAP(void), bool);
            this->shim().IsColorPreviewVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorSliderVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorSliderVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsColorSliderVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsColorSliderVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorSliderVisible, WINRT_WRAP(void), bool);
            this->shim().IsColorSliderVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAlphaSliderVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaSliderVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsAlphaSliderVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsAlphaSliderVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaSliderVisible, WINRT_WRAP(void), bool);
            this->shim().IsAlphaSliderVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsMoreButtonVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsMoreButtonVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsMoreButtonVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsMoreButtonVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsMoreButtonVisible, WINRT_WRAP(void), bool);
            this->shim().IsMoreButtonVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorChannelTextInputVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorChannelTextInputVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsColorChannelTextInputVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsColorChannelTextInputVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorChannelTextInputVisible, WINRT_WRAP(void), bool);
            this->shim().IsColorChannelTextInputVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAlphaTextInputVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaTextInputVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsAlphaTextInputVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsAlphaTextInputVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaTextInputVisible, WINRT_WRAP(void), bool);
            this->shim().IsAlphaTextInputVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsHexInputVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHexInputVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsHexInputVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsHexInputVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHexInputVisible, WINRT_WRAP(void), bool);
            this->shim().IsHexInputVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinHue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinHue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MinHue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinHue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinHue, WINRT_WRAP(void), int32_t);
            this->shim().MinHue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxHue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxHue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxHue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHue, WINRT_WRAP(void), int32_t);
            this->shim().MaxHue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinSaturation(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinSaturation, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MinSaturation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinSaturation(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinSaturation, WINRT_WRAP(void), int32_t);
            this->shim().MinSaturation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxSaturation(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSaturation, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxSaturation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxSaturation(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSaturation, WINRT_WRAP(void), int32_t);
            this->shim().MaxSaturation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinValue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinValue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MinValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinValue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinValue, WINRT_WRAP(void), int32_t);
            this->shim().MinValue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxValue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxValue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxValue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxValue, WINRT_WRAP(void), int32_t);
            this->shim().MaxValue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpectrumShape, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ColorSpectrumShape));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ColorSpectrumShape>(this->shim().ColorSpectrumShape());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpectrumShape, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ColorSpectrumShape const&);
            this->shim().ColorSpectrumShape(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ColorSpectrumShape const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpectrumComponents, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>(this->shim().ColorSpectrumComponents());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpectrumComponents, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const&);
            this->shim().ColorSpectrumComponents(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ColorChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ColorChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ColorChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ColorChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ColorChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IColorPickerFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IColorPickerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ColorPicker), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ColorPicker>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IColorPickerStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IColorPickerStatics>
{
    int32_t WINRT_CALL get_ColorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ColorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreviousColorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreviousColorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PreviousColorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAlphaEnabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaEnabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsAlphaEnabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorSpectrumVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorSpectrumVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsColorSpectrumVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorPreviewVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorPreviewVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsColorPreviewVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorSliderVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorSliderVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsColorSliderVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAlphaSliderVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaSliderVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsAlphaSliderVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsMoreButtonVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsMoreButtonVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsMoreButtonVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsColorChannelTextInputVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsColorChannelTextInputVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsColorChannelTextInputVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsAlphaTextInputVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsAlphaTextInputVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsAlphaTextInputVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsHexInputVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHexInputVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsHexInputVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinHueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinHueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinHueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxHueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxHueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinSaturationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinSaturationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinSaturationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxSaturationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSaturationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxSaturationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorSpectrumShapeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpectrumShapeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ColorSpectrumShapeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ColorSpectrumComponentsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorSpectrumComponentsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ColorSpectrumComponentsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ICommandBarFlyout> : produce_base<D, Microsoft::UI::Xaml::Controls::ICommandBarFlyout>
{
    int32_t WINRT_CALL get_PrimaryCommands(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PrimaryCommands, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>>(this->shim().PrimaryCommands());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SecondaryCommands(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SecondaryCommands, WINRT_WRAP(Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>));
            *value = detach_from<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>>(this->shim().SecondaryCommands());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::CommandBarFlyout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::CommandBarFlyout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IDropDownButton> : produce_base<D, Microsoft::UI::Xaml::Controls::IDropDownButton>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IDropDownButtonFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::DropDownButton), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::DropDownButton>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource> : produce_base<D, Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>
{
    int32_t WINRT_CALL add_AnimatedVisualInvalidated(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnimatedVisualInvalidated, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().AnimatedVisualInvalidated(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_AnimatedVisualInvalidated(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(AnimatedVisualInvalidated, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().AnimatedVisualInvalidated(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementAnimator> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementAnimator>
{
    int32_t WINRT_CALL add_ShowAnimationCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShowAnimationCompleted, WINRT_WRAP(winrt::event_token), Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const&);
            *token = detach_from<winrt::event_token>(this->shim().ShowAnimationCompleted(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ShowAnimationCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ShowAnimationCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ShowAnimationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_HideAnimationCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HideAnimationCompleted, WINRT_WRAP(winrt::event_token), Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const&);
            *token = detach_from<winrt::event_token>(this->shim().HideAnimationCompleted(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_HideAnimationCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(HideAnimationCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().HideAnimationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_BoundsChangeAnimationCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BoundsChangeAnimationCompleted, WINRT_WRAP(winrt::event_token), Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const&);
            *token = detach_from<winrt::event_token>(this->shim().BoundsChangeAnimationCompleted(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementAnimationCompleted const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_BoundsChangeAnimationCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(BoundsChangeAnimationCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().BoundsChangeAnimationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL OnElementShown(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnElementShown, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            this->shim().OnElementShown(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnElementHidden(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnElementHidden, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            this->shim().OnElementHidden(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnElementBoundsChanged(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, Windows::Foundation::Rect oldBounds, Windows::Foundation::Rect newBounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnElementBoundsChanged, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&);
            this->shim().OnElementBoundsChanged(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context), *reinterpret_cast<Windows::Foundation::Rect const*>(&oldBounds), *reinterpret_cast<Windows::Foundation::Rect const*>(&newBounds));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HasShowAnimation(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasShowAnimation, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            *result = detach_from<bool>(this->shim().HasShowAnimation(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HasHideAnimation(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasHideAnimation, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            *result = detach_from<bool>(this->shim().HasHideAnimation(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HasBoundsChangeAnimation(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, Windows::Foundation::Rect oldBounds, Windows::Foundation::Rect newBounds, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasBoundsChangeAnimation, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&);
            *result = detach_from<bool>(this->shim().HasBoundsChangeAnimation(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context), *reinterpret_cast<Windows::Foundation::Rect const*>(&oldBounds), *reinterpret_cast<Windows::Foundation::Rect const*>(&newBounds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementAnimatorFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementAnimatorFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ElementAnimator), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ElementAnimator>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides>
{
    int32_t WINRT_CALL HasShowAnimationCore(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasShowAnimationCore, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            *result = detach_from<bool>(this->shim().HasShowAnimationCore(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HasHideAnimationCore(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasHideAnimationCore, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            *result = detach_from<bool>(this->shim().HasHideAnimationCore(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL HasBoundsChangeAnimationCore(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, Windows::Foundation::Rect oldBounds, Windows::Foundation::Rect newBounds, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasBoundsChangeAnimationCore, WINRT_WRAP(bool), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&);
            *result = detach_from<bool>(this->shim().HasBoundsChangeAnimationCore(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context), *reinterpret_cast<Windows::Foundation::Rect const*>(&oldBounds), *reinterpret_cast<Windows::Foundation::Rect const*>(&newBounds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL StartShowAnimation(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartShowAnimation, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            this->shim().StartShowAnimation(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL StartHideAnimation(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartHideAnimation, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&);
            this->shim().StartHideAnimation(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL StartBoundsChangeAnimation(void* element, Microsoft::UI::Xaml::Controls::AnimationContext context, Windows::Foundation::Rect oldBounds, Windows::Foundation::Rect newBounds) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartBoundsChangeAnimation, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, Microsoft::UI::Xaml::Controls::AnimationContext const&, Windows::Foundation::Rect const&, Windows::Foundation::Rect const&);
            this->shim().StartBoundsChangeAnimation(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationContext const*>(&context), *reinterpret_cast<Windows::Foundation::Rect const*>(&oldBounds), *reinterpret_cast<Windows::Foundation::Rect const*>(&newBounds));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementAnimatorProtected> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementAnimatorProtected>
{
    int32_t WINRT_CALL get_HasShowAnimationsPending(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasShowAnimationsPending, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasShowAnimationsPending());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasHideAnimationsPending(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasHideAnimationsPending, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasHideAnimationsPending());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasBoundsChangeAnimationsPending(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasBoundsChangeAnimationsPending, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasBoundsChangeAnimationsPending());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SharedContext(Microsoft::UI::Xaml::Controls::AnimationContext* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SharedContext, WINRT_WRAP(Microsoft::UI::Xaml::Controls::AnimationContext));
            *value = detach_from<Microsoft::UI::Xaml::Controls::AnimationContext>(this->shim().SharedContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnShowAnimationCompleted(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnShowAnimationCompleted, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().OnShowAnimationCompleted(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnHideAnimationCompleted(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnHideAnimationCompleted, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().OnHideAnimationCompleted(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnBoundsChangeAnimationCompleted(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnBoundsChangeAnimationCompleted, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().OnBoundsChangeAnimationCompleted(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementFactoryFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementFactoryFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ElementFactory), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ElementFactory>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs>
{
    int32_t WINRT_CALL get_Data(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Data, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Data());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Data(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Data, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().Data(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Parent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Parent, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Parent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Parent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Parent, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Parent(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementFactoryOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementFactoryOverrides>
{
    int32_t WINRT_CALL GetElementCore(void* args, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetElementCore, WINRT_WRAP(Windows::UI::Xaml::UIElement), Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().GetElementCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const*>(&args)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RecycleElementCore(void* args) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecycleElementCore, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const&);
            this->shim().RecycleElementCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs>
{
    int32_t WINRT_CALL get_Element(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Element, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Element());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Element(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Element, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Element(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Parent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Parent, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Parent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Parent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Parent, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Parent(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IElementFactoryShim> : produce_base<D, Microsoft::UI::Xaml::Controls::IElementFactoryShim>
{
    int32_t WINRT_CALL GetElement(void* args, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetElement, WINRT_WRAP(Windows::UI::Xaml::UIElement), Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().GetElement(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const*>(&args)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RecycleElement(void* args) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecycleElement, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const&);
            this->shim().RecycleElement(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFlowLayout> : produce_base<D, Microsoft::UI::Xaml::Controls::IFlowLayout>
{
    int32_t WINRT_CALL get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(Windows::UI::Xaml::Controls::Orientation));
            *value = detach_from<Windows::UI::Xaml::Controls::Orientation>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(void), Windows::UI::Xaml::Controls::Orientation const&);
            this->shim().Orientation(*reinterpret_cast<Windows::UI::Xaml::Controls::Orientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinRowSpacing(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinRowSpacing, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinRowSpacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinRowSpacing(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinRowSpacing, WINRT_WRAP(void), double);
            this->shim().MinRowSpacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinColumnSpacing(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinColumnSpacing, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinColumnSpacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinColumnSpacing(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinColumnSpacing, WINRT_WRAP(void), double);
            this->shim().MinColumnSpacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineAlignment(Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineAlignment, WINRT_WRAP(Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment));
            *value = detach_from<Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment>(this->shim().LineAlignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LineAlignment(Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineAlignment, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment const&);
            this->shim().LineAlignment(*reinterpret_cast<Microsoft::UI::Xaml::Controls::FlowLayoutLineAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFlowLayoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IFlowLayoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::FlowLayout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::FlowLayout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides>
{
    int32_t WINRT_CALL GetMeasureSize(int32_t index, Windows::Foundation::Size availableSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetMeasureSize, WINRT_WRAP(Windows::Foundation::Size), int32_t, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().GetMeasureSize(index, *reinterpret_cast<Windows::Foundation::Size const*>(&availableSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetProvisionalArrangeSize(int32_t index, Windows::Foundation::Size measureSize, Windows::Foundation::Size desiredSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetProvisionalArrangeSize, WINRT_WRAP(Windows::Foundation::Size), int32_t, Windows::Foundation::Size const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().GetProvisionalArrangeSize(index, *reinterpret_cast<Windows::Foundation::Size const*>(&measureSize), *reinterpret_cast<Windows::Foundation::Size const*>(&desiredSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ShouldBreakLine(int32_t index, double remainingSpace, bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShouldBreakLine, WINRT_WRAP(bool), int32_t, double);
            *result = detach_from<bool>(this->shim().ShouldBreakLine(index, remainingSpace));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAnchorForRealizationRect(Windows::Foundation::Size availableSize, void* context, struct struct_Microsoft_UI_Xaml_Controls_FlowLayoutAnchorInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAnchorForRealizationRect, WINRT_WRAP(Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo), Windows::Foundation::Size const&, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo>(this->shim().GetAnchorForRealizationRect(*reinterpret_cast<Windows::Foundation::Size const*>(&availableSize), *reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAnchorForTargetElement(int32_t targetIndex, Windows::Foundation::Size availableSize, void* context, struct struct_Microsoft_UI_Xaml_Controls_FlowLayoutAnchorInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAnchorForTargetElement, WINRT_WRAP(Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo), int32_t, Windows::Foundation::Size const&, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo>(this->shim().GetAnchorForTargetElement(targetIndex, *reinterpret_cast<Windows::Foundation::Size const*>(&availableSize), *reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetExtent(Windows::Foundation::Size availableSize, void* context, void* firstRealized, int32_t firstRealizedItemIndex, Windows::Foundation::Rect firstRealizedLayoutBounds, void* lastRealized, int32_t lastRealizedItemIndex, Windows::Foundation::Rect lastRealizedLayoutBounds, Windows::Foundation::Rect* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetExtent, WINRT_WRAP(Windows::Foundation::Rect), Windows::Foundation::Size const&, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&, Windows::UI::Xaml::UIElement const&, int32_t, Windows::Foundation::Rect const&, Windows::UI::Xaml::UIElement const&, int32_t, Windows::Foundation::Rect const&);
            *result = detach_from<Windows::Foundation::Rect>(this->shim().GetExtent(*reinterpret_cast<Windows::Foundation::Size const*>(&availableSize), *reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&firstRealized), firstRealizedItemIndex, *reinterpret_cast<Windows::Foundation::Rect const*>(&firstRealizedLayoutBounds), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&lastRealized), lastRealizedItemIndex, *reinterpret_cast<Windows::Foundation::Rect const*>(&lastRealizedLayoutBounds)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnElementMeasured(void* element, int32_t index, Windows::Foundation::Size availableSize, Windows::Foundation::Size measureSize, Windows::Foundation::Size desiredSize, Windows::Foundation::Size provisionalArrangeSize, void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnElementMeasured, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, int32_t, Windows::Foundation::Size const&, Windows::Foundation::Size const&, Windows::Foundation::Size const&, Windows::Foundation::Size const&, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&);
            this->shim().OnElementMeasured(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), index, *reinterpret_cast<Windows::Foundation::Size const*>(&availableSize), *reinterpret_cast<Windows::Foundation::Size const*>(&measureSize), *reinterpret_cast<Windows::Foundation::Size const*>(&desiredSize), *reinterpret_cast<Windows::Foundation::Size const*>(&provisionalArrangeSize), *reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnLineArranged(int32_t startIndex, int32_t countInLine, double lineSize, void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnLineArranged, WINRT_WRAP(void), int32_t, int32_t, double, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&);
            this->shim().OnLineArranged(startIndex, countInLine, lineSize, *reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFlowLayoutState> : produce_base<D, Microsoft::UI::Xaml::Controls::IFlowLayoutState>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::FlowLayoutState), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::FlowLayoutState>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFlowLayoutStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IFlowLayoutStatics>
{
    int32_t WINRT_CALL get_OrientationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OrientationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OrientationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinRowSpacingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinRowSpacingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinRowSpacingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinColumnSpacingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinColumnSpacingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinColumnSpacingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LineAlignmentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LineAlignmentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().LineAlignmentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFontIconSource> : produce_base<D, Microsoft::UI::Xaml::Controls::IFontIconSource>
{
    int32_t WINRT_CALL get_Glyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Glyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Glyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Glyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Glyph, WINRT_WRAP(void), hstring const&);
            this->shim().Glyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontSize(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontSize, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().FontSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontSize(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontSize, WINRT_WRAP(void), double);
            this->shim().FontSize(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontFamily(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontFamily, WINRT_WRAP(Windows::UI::Xaml::Media::FontFamily));
            *value = detach_from<Windows::UI::Xaml::Media::FontFamily>(this->shim().FontFamily());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontFamily(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontFamily, WINRT_WRAP(void), Windows::UI::Xaml::Media::FontFamily const&);
            this->shim().FontFamily(*reinterpret_cast<Windows::UI::Xaml::Media::FontFamily const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontWeight(struct struct_Windows_UI_Text_FontWeight* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontWeight, WINRT_WRAP(Windows::UI::Text::FontWeight));
            *value = detach_from<Windows::UI::Text::FontWeight>(this->shim().FontWeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontWeight(struct struct_Windows_UI_Text_FontWeight value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontWeight, WINRT_WRAP(void), Windows::UI::Text::FontWeight const&);
            this->shim().FontWeight(*reinterpret_cast<Windows::UI::Text::FontWeight const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontStyle(Windows::UI::Text::FontStyle* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStyle, WINRT_WRAP(Windows::UI::Text::FontStyle));
            *value = detach_from<Windows::UI::Text::FontStyle>(this->shim().FontStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_FontStyle(Windows::UI::Text::FontStyle value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStyle, WINRT_WRAP(void), Windows::UI::Text::FontStyle const&);
            this->shim().FontStyle(*reinterpret_cast<Windows::UI::Text::FontStyle const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsTextScaleFactorEnabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsTextScaleFactorEnabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsTextScaleFactorEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsTextScaleFactorEnabled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsTextScaleFactorEnabled, WINRT_WRAP(void), bool);
            this->shim().IsTextScaleFactorEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MirroredWhenRightToLeft(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MirroredWhenRightToLeft, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().MirroredWhenRightToLeft());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MirroredWhenRightToLeft(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MirroredWhenRightToLeft, WINRT_WRAP(void), bool);
            this->shim().MirroredWhenRightToLeft(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFontIconSourceFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::FontIconSource), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::FontIconSource>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>
{
    int32_t WINRT_CALL get_GlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().GlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontSizeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontSizeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().FontSizeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontFamilyProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontFamilyProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().FontFamilyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontWeightProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontWeightProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().FontWeightProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_FontStyleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FontStyleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().FontStyleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsTextScaleFactorEnabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsTextScaleFactorEnabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsTextScaleFactorEnabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MirroredWhenRightToLeftProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MirroredWhenRightToLeftProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MirroredWhenRightToLeftProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IIconSource> : produce_base<D, Microsoft::UI::Xaml::Controls::IIconSource>
{
    int32_t WINRT_CALL get_Foreground(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Foreground, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().Foreground());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Foreground(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Foreground, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().Foreground(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IIconSourceFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IIconSourceFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IIconSourceStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IIconSourceStatics>
{
    int32_t WINRT_CALL get_ForegroundProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ForegroundProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ForegroundProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IIndexPath> : produce_base<D, Microsoft::UI::Xaml::Controls::IIndexPath>
{
    int32_t WINRT_CALL GetSize(int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetSize, WINRT_WRAP(int32_t));
            *result = detach_from<int32_t>(this->shim().GetSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAt(int32_t index, int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAt, WINRT_WRAP(int32_t), int32_t);
            *result = detach_from<int32_t>(this->shim().GetAt(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CompareTo(void* other, int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompareTo, WINRT_WRAP(int32_t), Microsoft::UI::Xaml::Controls::IndexPath const&);
            *result = detach_from<int32_t>(this->shim().CompareTo(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&other)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IIndexPathStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IIndexPathStatics>
{
    int32_t WINRT_CALL CreateFrom(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFrom, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IndexPath), int32_t);
            *result = detach_from<Microsoft::UI::Xaml::Controls::IndexPath>(this->shim().CreateFrom(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromGroupAndItemIndex(int32_t groupIndex, int32_t itemIndex, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFrom, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IndexPath), int32_t, int32_t);
            *result = detach_from<Microsoft::UI::Xaml::Controls::IndexPath>(this->shim().CreateFrom(groupIndex, itemIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateFromIndices(void* indices, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateFromIndices, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IndexPath), Windows::Foundation::Collections::IVector<int32_t> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::IndexPath>(this->shim().CreateFromIndices(*reinterpret_cast<Windows::Foundation::Collections::IVector<int32_t> const*>(&indices)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeater> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeater>
{
    int32_t WINRT_CALL get_ItemsSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ItemsSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemsSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ItemsSource(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsSourceView(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSourceView, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ItemsSourceView));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ItemsSourceView>(this->shim().ItemsSourceView());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplate, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ItemTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplate, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ItemTemplate(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Layout(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Layout, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Layout));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Layout>(this->shim().Layout());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Layout(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Layout, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::Layout const&);
            this->shim().Layout(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Layout const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalCacheLength(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalCacheLength, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalCacheLength());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalCacheLength(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalCacheLength, WINRT_WRAP(void), double);
            this->shim().HorizontalCacheLength(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalCacheLength(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalCacheLength, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalCacheLength());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalCacheLength(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalCacheLength, WINRT_WRAP(void), double);
            this->shim().VerticalCacheLength(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Background(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().Background());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Background(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().Background(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetElementIndex(void* element, int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetElementIndex, WINRT_WRAP(int32_t), Windows::UI::Xaml::UIElement const&);
            *result = detach_from<int32_t>(this->shim().GetElementIndex(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL TryGetElement(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TryGetElement, WINRT_WRAP(Windows::UI::Xaml::UIElement), int32_t);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().TryGetElement(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetOrCreateElement(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetOrCreateElement, WINRT_WRAP(Windows::UI::Xaml::UIElement), int32_t);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().GetOrCreateElement(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ElementPrepared(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ElementPrepared, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ElementPrepared(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ElementPrepared(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ElementPrepared, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ElementPrepared(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ElementClearing(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ElementClearing, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ElementClearing(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ElementClearing(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ElementClearing, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ElementClearing(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ElementIndexChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ElementIndexChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ElementIndexChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ElementIndexChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ElementIndexChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ElementIndexChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeater2> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeater2>
{
    int32_t WINRT_CALL get_Animator(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Animator, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ElementAnimator));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ElementAnimator>(this->shim().Animator());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Animator(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Animator, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ElementAnimator const&);
            this->shim().Animator(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementAnimator const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>
{
    int32_t WINRT_CALL get_Element(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Element, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Element());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>
{
    int32_t WINRT_CALL get_Element(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Element, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Element());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OldIndex(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OldIndex, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().OldIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_NewIndex(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(NewIndex, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().NewIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>
{
    int32_t WINRT_CALL get_Element(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Element, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Element());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Index(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Index, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Index());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ItemsRepeater), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ItemsRepeater>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>
{
    int32_t WINRT_CALL get_ItemsSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemTemplateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LayoutProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().LayoutProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AnimatorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnimatorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AnimatorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalCacheLengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalCacheLengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalCacheLengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalCacheLengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalCacheLengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalCacheLengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BackgroundProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BackgroundProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BackgroundProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsSourceView> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsSourceView>
{
    int32_t WINRT_CALL get_Count(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Count, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Count());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetAt(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetAt, WINRT_WRAP(Windows::Foundation::IInspectable), int32_t);
            *result = detach_from<Windows::Foundation::IInspectable>(this->shim().GetAt(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasKeyIndexMapping(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasKeyIndexMapping, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasKeyIndexMapping());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL KeyFromIndex(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KeyFromIndex, WINRT_WRAP(hstring), int32_t);
            *result = detach_from<hstring>(this->shim().KeyFromIndex(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IndexFromKey(void* key, int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IndexFromKey, WINRT_WRAP(int32_t), hstring const&);
            *result = detach_from<int32_t>(this->shim().IndexFromKey(*reinterpret_cast<hstring const*>(&key)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>
{
    int32_t WINRT_CALL CreateInstance(void* source, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ItemsSourceView), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ItemsSourceView>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&source), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IKeyIndexMapping> : produce_base<D, Microsoft::UI::Xaml::Controls::IKeyIndexMapping>
{
    int32_t WINRT_CALL KeyFromIndex(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(KeyFromIndex, WINRT_WRAP(hstring), int32_t);
            *result = detach_from<hstring>(this->shim().KeyFromIndex(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IndexFromKey(void* key, int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IndexFromKey, WINRT_WRAP(int32_t), hstring const&);
            *result = detach_from<int32_t>(this->shim().IndexFromKey(*reinterpret_cast<hstring const*>(&key)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayout> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayout>
{
    int32_t WINRT_CALL InitializeForContext(void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitializeForContext, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::LayoutContext const&);
            this->shim().InitializeForContext(*reinterpret_cast<Microsoft::UI::Xaml::Controls::LayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL UninitializeForContext(void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UninitializeForContext, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::LayoutContext const&);
            this->shim().UninitializeForContext(*reinterpret_cast<Microsoft::UI::Xaml::Controls::LayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Measure(void* context, Windows::Foundation::Size availableSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Measure, WINRT_WRAP(Windows::Foundation::Size), Microsoft::UI::Xaml::Controls::LayoutContext const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().Measure(*reinterpret_cast<Microsoft::UI::Xaml::Controls::LayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::Size const*>(&availableSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Arrange(void* context, Windows::Foundation::Size finalSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Arrange, WINRT_WRAP(Windows::Foundation::Size), Microsoft::UI::Xaml::Controls::LayoutContext const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().Arrange(*reinterpret_cast<Microsoft::UI::Xaml::Controls::LayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::Size const*>(&finalSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_MeasureInvalidated(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MeasureInvalidated, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().MeasureInvalidated(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_MeasureInvalidated(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(MeasureInvalidated, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().MeasureInvalidated(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ArrangeInvalidated(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ArrangeInvalidated, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ArrangeInvalidated(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ArrangeInvalidated(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ArrangeInvalidated, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ArrangeInvalidated(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutContext> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutContext>
{
    int32_t WINRT_CALL get_LayoutState(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutState, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().LayoutState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LayoutState(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutState, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().LayoutState(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutContextFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutContextFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutContextOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
{
    int32_t WINRT_CALL get_LayoutStateCore(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutStateCore, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().LayoutStateCore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LayoutStateCore(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutStateCore, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().LayoutStateCore(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutPanel> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutPanel>
{
    int32_t WINRT_CALL get_Layout(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Layout, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Layout));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Layout>(this->shim().Layout());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Layout(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Layout, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::Layout const&);
            this->shim().Layout(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Layout const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderBrush(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderBrush, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().BorderBrush());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderBrush(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderBrush, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().BorderBrush(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderThickness(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderThickness, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().BorderThickness());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BorderThickness(struct struct_Windows_UI_Xaml_Thickness value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderThickness, WINRT_WRAP(void), Windows::UI::Xaml::Thickness const&);
            this->shim().BorderThickness(*reinterpret_cast<Windows::UI::Xaml::Thickness const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Padding(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Padding, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().Padding());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Padding(struct struct_Windows_UI_Xaml_Thickness value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Padding, WINRT_WRAP(void), Windows::UI::Xaml::Thickness const&);
            this->shim().Padding(*reinterpret_cast<Windows::UI::Xaml::Thickness const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CornerRadius, WINRT_WRAP(Windows::UI::Xaml::CornerRadius));
            *value = detach_from<Windows::UI::Xaml::CornerRadius>(this->shim().CornerRadius());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CornerRadius(struct struct_Windows_UI_Xaml_CornerRadius value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CornerRadius, WINRT_WRAP(void), Windows::UI::Xaml::CornerRadius const&);
            this->shim().CornerRadius(*reinterpret_cast<Windows::UI::Xaml::CornerRadius const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutPanelFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutPanelFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::LayoutPanel), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::LayoutPanel>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics>
{
    int32_t WINRT_CALL get_LayoutProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().LayoutProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderBrushProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderBrushProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BorderBrushProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BorderThicknessProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BorderThicknessProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BorderThicknessProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaddingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaddingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaddingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CornerRadiusProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CornerRadiusProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CornerRadiusProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ILayoutProtected> : produce_base<D, Microsoft::UI::Xaml::Controls::ILayoutProtected>
{
    int32_t WINRT_CALL InvalidateMeasure() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvalidateMeasure, WINRT_WRAP(void));
            this->shim().InvalidateMeasure();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL InvalidateArrange() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvalidateArrange, WINRT_WRAP(void));
            this->shim().InvalidateArrange();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBar> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBar>
{
    int32_t WINRT_CALL get_Items(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Items, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::MenuBarItem>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::MenuBarItem>>(this->shim().Items());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::MenuBar), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::MenuBar>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarItem> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarItem>
{
    int32_t WINRT_CALL get_Title(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Title, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Title(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Title, WINRT_WRAP(void), hstring const&);
            this->shim().Title(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Items(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Items, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>>(this->shim().Items());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::MenuBarItem), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::MenuBarItem>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::MenuBarItemFlyout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarItemStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>
{
    int32_t WINRT_CALL get_TitleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TitleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TitleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IMenuBarStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IMenuBarStatics>
{
    int32_t WINRT_CALL get_ItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationView> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationView>
{
    int32_t WINRT_CALL get_IsPaneOpen(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneOpen, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsPaneOpen());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsPaneOpen(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneOpen, WINRT_WRAP(void), bool);
            this->shim().IsPaneOpen(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CompactModeThresholdWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactModeThresholdWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().CompactModeThresholdWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CompactModeThresholdWidth(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactModeThresholdWidth, WINRT_WRAP(void), double);
            this->shim().CompactModeThresholdWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandedModeThresholdWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedModeThresholdWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandedModeThresholdWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ExpandedModeThresholdWidth(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedModeThresholdWidth, WINRT_WRAP(void), double);
            this->shim().ExpandedModeThresholdWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneFooter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneFooter, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().PaneFooter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaneFooter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneFooter, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().PaneFooter(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Header(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Header, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Header());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Header(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Header, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().Header(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeaderTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeaderTemplate, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().HeaderTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeaderTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeaderTemplate, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().HeaderTemplate(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>(this->shim().DisplayMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsSettingsVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSettingsVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSettingsVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsSettingsVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSettingsVisible, WINRT_WRAP(void), bool);
            this->shim().IsSettingsVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsPaneToggleButtonVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneToggleButtonVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsPaneToggleButtonVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsPaneToggleButtonVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneToggleButtonVisible, WINRT_WRAP(void), bool);
            this->shim().IsPaneToggleButtonVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlwaysShowHeader(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlwaysShowHeader, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AlwaysShowHeader());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AlwaysShowHeader(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlwaysShowHeader, WINRT_WRAP(void), bool);
            this->shim().AlwaysShowHeader(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CompactPaneLength(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactPaneLength, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().CompactPaneLength());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CompactPaneLength(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactPaneLength, WINRT_WRAP(void), double);
            this->shim().CompactPaneLength(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OpenPaneLength(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpenPaneLength, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().OpenPaneLength());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OpenPaneLength(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpenPaneLength, WINRT_WRAP(void), double);
            this->shim().OpenPaneLength(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneToggleButtonStyle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneToggleButtonStyle, WINRT_WRAP(Windows::UI::Xaml::Style));
            *value = detach_from<Windows::UI::Xaml::Style>(this->shim().PaneToggleButtonStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaneToggleButtonStyle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneToggleButtonStyle, WINRT_WRAP(void), Windows::UI::Xaml::Style const&);
            this->shim().PaneToggleButtonStyle(*reinterpret_cast<Windows::UI::Xaml::Style const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().SelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectedItem(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().SelectedItem(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItems, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>>(this->shim().MenuItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemsSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemsSource, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().MenuItemsSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MenuItemsSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemsSource, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().MenuItemsSource(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SettingsItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SettingsItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().SettingsItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AutoSuggestBox(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AutoSuggestBox, WINRT_WRAP(Windows::UI::Xaml::Controls::AutoSuggestBox));
            *value = detach_from<Windows::UI::Xaml::Controls::AutoSuggestBox>(this->shim().AutoSuggestBox());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AutoSuggestBox(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AutoSuggestBox, WINRT_WRAP(void), Windows::UI::Xaml::Controls::AutoSuggestBox const&);
            this->shim().AutoSuggestBox(*reinterpret_cast<Windows::UI::Xaml::Controls::AutoSuggestBox const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemTemplate, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().MenuItemTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MenuItemTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemTemplate, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().MenuItemTemplate(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemTemplateSelector(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemTemplateSelector, WINRT_WRAP(Windows::UI::Xaml::Controls::DataTemplateSelector));
            *value = detach_from<Windows::UI::Xaml::Controls::DataTemplateSelector>(this->shim().MenuItemTemplateSelector());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MenuItemTemplateSelector(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemTemplateSelector, WINRT_WRAP(void), Windows::UI::Xaml::Controls::DataTemplateSelector const&);
            this->shim().MenuItemTemplateSelector(*reinterpret_cast<Windows::UI::Xaml::Controls::DataTemplateSelector const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemContainerStyle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemContainerStyle, WINRT_WRAP(Windows::UI::Xaml::Style));
            *value = detach_from<Windows::UI::Xaml::Style>(this->shim().MenuItemContainerStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MenuItemContainerStyle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemContainerStyle, WINRT_WRAP(void), Windows::UI::Xaml::Style const&);
            this->shim().MenuItemContainerStyle(*reinterpret_cast<Windows::UI::Xaml::Style const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemContainerStyleSelector(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemContainerStyleSelector, WINRT_WRAP(Windows::UI::Xaml::Controls::StyleSelector));
            *value = detach_from<Windows::UI::Xaml::Controls::StyleSelector>(this->shim().MenuItemContainerStyleSelector());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MenuItemContainerStyleSelector(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemContainerStyleSelector, WINRT_WRAP(void), Windows::UI::Xaml::Controls::StyleSelector const&);
            this->shim().MenuItemContainerStyleSelector(*reinterpret_cast<Windows::UI::Xaml::Controls::StyleSelector const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL MenuItemFromContainer(void* container, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemFromContainer, WINRT_WRAP(Windows::Foundation::IInspectable), Windows::UI::Xaml::DependencyObject const&);
            *result = detach_from<Windows::Foundation::IInspectable>(this->shim().MenuItemFromContainer(*reinterpret_cast<Windows::UI::Xaml::DependencyObject const*>(&container)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ContainerFromMenuItem(void* item, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContainerFromMenuItem, WINRT_WRAP(Windows::UI::Xaml::DependencyObject), Windows::Foundation::IInspectable const&);
            *result = detach_from<Windows::UI::Xaml::DependencyObject>(this->shim().ContainerFromMenuItem(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&item)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_SelectionChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().SelectionChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_SelectionChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(SelectionChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().SelectionChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ItemInvoked(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemInvoked, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ItemInvoked(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ItemInvoked(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ItemInvoked, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ItemInvoked(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_DisplayModeChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayModeChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().DisplayModeChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_DisplayModeChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(DisplayModeChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().DisplayModeChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL get_IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBackButtonVisible, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>(this->shim().IsBackButtonVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBackButtonVisible, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible const&);
            this->shim().IsBackButtonVisible(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsBackEnabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBackEnabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsBackEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsBackEnabled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBackEnabled, WINRT_WRAP(void), bool);
            this->shim().IsBackEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneTitle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneTitle, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().PaneTitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaneTitle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneTitle, WINRT_WRAP(void), hstring const&);
            this->shim().PaneTitle(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_BackRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BackRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().BackRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_BackRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(BackRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().BackRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_PaneClosed(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneClosed, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().PaneClosed(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_PaneClosed(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(PaneClosed, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().PaneClosed(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_PaneClosing(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneClosing, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().PaneClosing(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_PaneClosing(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(PaneClosing, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().PaneClosing(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_PaneOpened(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneOpened, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().PaneOpened(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_PaneOpened(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(PaneOpened, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().PaneOpened(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_PaneOpening(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneOpening, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().PaneOpening(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_PaneOpening(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(PaneOpening, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().PaneOpening(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL get_PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneDisplayMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>(this->shim().PaneDisplayMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneDisplayMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode const&);
            this->shim().PaneDisplayMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneHeader(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneHeader, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().PaneHeader());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaneHeader(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneHeader, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().PaneHeader(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneCustomContent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneCustomContent, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().PaneCustomContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PaneCustomContent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneCustomContent, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().PaneCustomContent(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentOverlay(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOverlay, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().ContentOverlay());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ContentOverlay(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOverlay, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().ContentOverlay(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsPaneVisible(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneVisible, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsPaneVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsPaneVisible(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneVisible, WINRT_WRAP(void), bool);
            this->shim().IsPaneVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionFollowsFocus, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>(this->shim().SelectionFollowsFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionFollowsFocus, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const&);
            this->shim().SelectionFollowsFocus(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TemplateSettings(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateSettings, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>(this->shim().TemplateSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShoulderNavigationEnabled, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>(this->shim().ShoulderNavigationEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShoulderNavigationEnabled, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const&);
            this->shim().ShoulderNavigationEnabled(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverflowLabelMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>(this->shim().OverflowLabelMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverflowLabelMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode const&);
            this->shim().OverflowLabelMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
{
    int32_t WINRT_CALL get_DisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>(this->shim().DisplayMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationView), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationView>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItem> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItem>
{
    int32_t WINRT_CALL get_Icon(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Icon, WINRT_WRAP(Windows::UI::Xaml::Controls::IconElement));
            *value = detach_from<Windows::UI::Xaml::Controls::IconElement>(this->shim().Icon());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Icon(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Icon, WINRT_WRAP(void), Windows::UI::Xaml::Controls::IconElement const&);
            this->shim().Icon(*reinterpret_cast<Windows::UI::Xaml::Controls::IconElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CompactPaneLength(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactPaneLength, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().CompactPaneLength());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectsOnInvoked(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectsOnInvoked, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().SelectsOnInvoked());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectsOnInvoked(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectsOnInvoked, WINRT_WRAP(void), bool);
            this->shim().SelectsOnInvoked(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemBase> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemBase>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewItem), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewItem>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemHeader> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewItemHeader), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
{
    int32_t WINRT_CALL get_InvokedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvokedItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().InvokedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsSettingsInvoked(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSettingsInvoked, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSettingsInvoked());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InvokedItemContainer(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvokedItemContainer, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewItemBase));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>(this->shim().InvokedItemContainer());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RecommendedNavigationTransitionInfo(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecommendedNavigationTransitionInfo, WINRT_WRAP(Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo));
            *value = detach_from<Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo>(this->shim().RecommendedNavigationTransitionInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewItemStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>
{
    int32_t WINRT_CALL get_IconProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IconProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CompactPaneLengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactPaneLengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CompactPaneLengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectsOnInvokedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectsOnInvokedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SelectsOnInvokedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewList> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewList>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewListFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewListFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewList), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewList>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
{
    int32_t WINRT_CALL get_Cancel(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Cancel(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void), bool);
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
{
    int32_t WINRT_CALL get_SelectedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().SelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsSettingsSelected(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSettingsSelected, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsSettingsSelected());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItemContainer(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItemContainer, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewItemBase));
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>(this->shim().SelectedItemContainer());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RecommendedNavigationTransitionInfo(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecommendedNavigationTransitionInfo, WINRT_WRAP(Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo));
            *value = detach_from<Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo>(this->shim().RecommendedNavigationTransitionInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewStatics>
{
    int32_t WINRT_CALL get_IsPaneOpenProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneOpenProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsPaneOpenProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CompactModeThresholdWidthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactModeThresholdWidthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CompactModeThresholdWidthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandedModeThresholdWidthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedModeThresholdWidthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ExpandedModeThresholdWidthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneFooterProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneFooterProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneFooterProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeaderProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeaderProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HeaderProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeaderTemplateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeaderTemplateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HeaderTemplateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DisplayModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DisplayModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsSettingsVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSettingsVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsSettingsVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsPaneToggleButtonVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneToggleButtonVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsPaneToggleButtonVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AlwaysShowHeaderProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AlwaysShowHeaderProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AlwaysShowHeaderProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CompactPaneLengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CompactPaneLengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CompactPaneLengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OpenPaneLengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpenPaneLengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OpenPaneLengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneToggleButtonStyleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneToggleButtonStyleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneToggleButtonStyleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MenuItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemsSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemsSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MenuItemsSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItemProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItemProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SelectedItemProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SettingsItemProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SettingsItemProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SettingsItemProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AutoSuggestBoxProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AutoSuggestBoxProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().AutoSuggestBoxProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemTemplateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemTemplateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MenuItemTemplateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemTemplateSelectorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemTemplateSelectorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MenuItemTemplateSelectorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemContainerStyleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemContainerStyleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MenuItemContainerStyleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MenuItemContainerStyleSelectorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MenuItemContainerStyleSelectorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MenuItemContainerStyleSelectorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsBackButtonVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBackButtonVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsBackButtonVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsBackEnabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsBackEnabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsBackEnabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneTitleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneTitleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneTitleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneDisplayModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneDisplayModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneDisplayModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneHeaderProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneHeaderProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneHeaderProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneCustomContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneCustomContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneCustomContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentOverlayProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOverlayProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentOverlayProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsPaneVisibleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsPaneVisibleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsPaneVisibleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectionFollowsFocusProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionFollowsFocusProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SelectionFollowsFocusProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TemplateSettingsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateSettingsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TemplateSettingsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShoulderNavigationEnabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShoulderNavigationEnabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ShoulderNavigationEnabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OverflowLabelModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverflowLabelModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OverflowLabelModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>
{
    int32_t WINRT_CALL get_TopPadding(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopPadding, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().TopPadding());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OverflowButtonVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverflowButtonVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().OverflowButtonVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneToggleButtonVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneToggleButtonVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().PaneToggleButtonVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BackButtonVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BackButtonVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().BackButtonVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopPaneVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopPaneVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().TopPaneVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LeftPaneVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LeftPaneVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().LeftPaneVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SingleSelectionFollowsFocus(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SingleSelectionFollowsFocus, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().SingleSelectionFollowsFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
{
    int32_t WINRT_CALL get_TopPaddingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopPaddingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TopPaddingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OverflowButtonVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverflowButtonVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OverflowButtonVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PaneToggleButtonVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PaneToggleButtonVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PaneToggleButtonVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BackButtonVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BackButtonVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BackButtonVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopPaneVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopPaneVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TopPaneVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LeftPaneVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LeftPaneVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().LeftPaneVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SingleSelectionFollowsFocusProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SingleSelectionFollowsFocusProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SingleSelectionFollowsFocusProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayout> : produce_base<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext> : produce_base<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>
{
    int32_t WINRT_CALL get_Children(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Children, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
{
    int32_t WINRT_CALL get_ChildrenCore(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ChildrenCore, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement>>(this->shim().ChildrenCore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::NonVirtualizingLayout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::NonVirtualizingLayout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
{
    int32_t WINRT_CALL InitializeForContextCore(void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitializeForContextCore, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const&);
            this->shim().InitializeForContextCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL UninitializeForContextCore(void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UninitializeForContextCore, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const&);
            this->shim().UninitializeForContextCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL MeasureOverride(void* context, Windows::Foundation::Size availableSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MeasureOverride, WINRT_WRAP(Windows::Foundation::Size), Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().MeasureOverride(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::Size const*>(&availableSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ArrangeOverride(void* context, Windows::Foundation::Size finalSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ArrangeOverride, WINRT_WRAP(Windows::Foundation::Size), Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().ArrangeOverride(*reinterpret_cast<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::Size const*>(&finalSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IParallaxView> : produce_base<D, Microsoft::UI::Xaml::Controls::IParallaxView>
{
    int32_t WINRT_CALL get_Child(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Child, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Child());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Child(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Child, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Child(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalShift(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalShift, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalShift());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalShift(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalShift, WINRT_WRAP(void), double);
            this->shim().HorizontalShift(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSourceEndOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceEndOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalSourceEndOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalSourceEndOffset(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceEndOffset, WINRT_WRAP(void), double);
            this->shim().HorizontalSourceEndOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceOffsetKind, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind>(this->shim().HorizontalSourceOffsetKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceOffsetKind, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const&);
            this->shim().HorizontalSourceOffsetKind(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSourceStartOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceStartOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalSourceStartOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalSourceStartOffset(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceStartOffset, WINRT_WRAP(void), double);
            this->shim().HorizontalSourceStartOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsHorizontalShiftClamped(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHorizontalShiftClamped, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsHorizontalShiftClamped());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsHorizontalShiftClamped(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHorizontalShiftClamped, WINRT_WRAP(void), bool);
            this->shim().IsHorizontalShiftClamped(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsVerticalShiftClamped(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsVerticalShiftClamped, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsVerticalShiftClamped());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsVerticalShiftClamped(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsVerticalShiftClamped, WINRT_WRAP(void), bool);
            this->shim().IsVerticalShiftClamped(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxHorizontalShiftRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHorizontalShiftRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MaxHorizontalShiftRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxHorizontalShiftRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHorizontalShiftRatio, WINRT_WRAP(void), double);
            this->shim().MaxHorizontalShiftRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxVerticalShiftRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxVerticalShiftRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MaxVerticalShiftRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxVerticalShiftRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxVerticalShiftRatio, WINRT_WRAP(void), double);
            this->shim().MaxVerticalShiftRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Source(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Source(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalShift(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalShift, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalShift());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalShift(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalShift, WINRT_WRAP(void), double);
            this->shim().VerticalShift(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSourceEndOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceEndOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalSourceEndOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalSourceEndOffset(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceEndOffset, WINRT_WRAP(void), double);
            this->shim().VerticalSourceEndOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceOffsetKind, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind>(this->shim().VerticalSourceOffsetKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceOffsetKind, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const&);
            this->shim().VerticalSourceOffsetKind(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSourceStartOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceStartOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalSourceStartOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalSourceStartOffset(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceStartOffset, WINRT_WRAP(void), double);
            this->shim().VerticalSourceStartOffset(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RefreshAutomaticHorizontalOffsets() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RefreshAutomaticHorizontalOffsets, WINRT_WRAP(void));
            this->shim().RefreshAutomaticHorizontalOffsets();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RefreshAutomaticVerticalOffsets() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RefreshAutomaticVerticalOffsets, WINRT_WRAP(void));
            this->shim().RefreshAutomaticVerticalOffsets();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IParallaxViewFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IParallaxViewFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ParallaxView), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ParallaxView>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IParallaxViewStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>
{
    int32_t WINRT_CALL get_ChildProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ChildProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ChildProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSourceEndOffsetProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceEndOffsetProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalSourceEndOffsetProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSourceOffsetKindProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceOffsetKindProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalSourceOffsetKindProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSourceStartOffsetProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSourceStartOffsetProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalSourceStartOffsetProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxHorizontalShiftRatioProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHorizontalShiftRatioProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxHorizontalShiftRatioProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalShiftProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalShiftProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalShiftProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsHorizontalShiftClampedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsHorizontalShiftClampedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsHorizontalShiftClampedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsVerticalShiftClampedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsVerticalShiftClampedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsVerticalShiftClampedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSourceEndOffsetProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceEndOffsetProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalSourceEndOffsetProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSourceOffsetKindProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceOffsetKindProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalSourceOffsetKindProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSourceStartOffsetProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSourceStartOffsetProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalSourceStartOffsetProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxVerticalShiftRatioProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxVerticalShiftRatioProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxVerticalShiftRatioProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalShiftProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalShiftProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalShiftProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPathIconSource> : produce_base<D, Microsoft::UI::Xaml::Controls::IPathIconSource>
{
    int32_t WINRT_CALL get_Data(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Data, WINRT_WRAP(Windows::UI::Xaml::Media::Geometry));
            *value = detach_from<Windows::UI::Xaml::Media::Geometry>(this->shim().Data());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Data(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Data, WINRT_WRAP(void), Windows::UI::Xaml::Media::Geometry const&);
            this->shim().Data(*reinterpret_cast<Windows::UI::Xaml::Media::Geometry const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPathIconSourceFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::PathIconSource), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::PathIconSource>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPathIconSourceStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>
{
    int32_t WINRT_CALL get_DataProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DataProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DataProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPersonPicture> : produce_base<D, Microsoft::UI::Xaml::Controls::IPersonPicture>
{
    int32_t WINRT_CALL get_BadgeNumber(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeNumber, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().BadgeNumber());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BadgeNumber(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeNumber, WINRT_WRAP(void), int32_t);
            this->shim().BadgeNumber(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BadgeGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().BadgeGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BadgeGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().BadgeGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BadgeImageSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeImageSource, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().BadgeImageSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BadgeImageSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeImageSource, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().BadgeImageSource(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BadgeText(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeText, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().BadgeText());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BadgeText(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeText, WINRT_WRAP(void), hstring const&);
            this->shim().BadgeText(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsGroup(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsGroup, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsGroup());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsGroup(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsGroup, WINRT_WRAP(void), bool);
            this->shim().IsGroup(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Contact(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Contact, WINRT_WRAP(Windows::ApplicationModel::Contacts::Contact));
            *value = detach_from<Windows::ApplicationModel::Contacts::Contact>(this->shim().Contact());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Contact(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Contact, WINRT_WRAP(void), Windows::ApplicationModel::Contacts::Contact const&);
            this->shim().Contact(*reinterpret_cast<Windows::ApplicationModel::Contacts::Contact const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DisplayName(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayName, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DisplayName(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayName, WINRT_WRAP(void), hstring const&);
            this->shim().DisplayName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Initials(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Initials, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Initials());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Initials(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Initials, WINRT_WRAP(void), hstring const&);
            this->shim().Initials(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreferSmallImage(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreferSmallImage, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().PreferSmallImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PreferSmallImage(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreferSmallImage, WINRT_WRAP(void), bool);
            this->shim().PreferSmallImage(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ProfilePicture(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ProfilePicture, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().ProfilePicture());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ProfilePicture(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ProfilePicture, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().ProfilePicture(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TemplateSettings(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateSettings, WINRT_WRAP(Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings));
            *value = detach_from<Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings>(this->shim().TemplateSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPersonPictureFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IPersonPictureFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::PersonPicture), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::PersonPicture>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPersonPictureStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>
{
    int32_t WINRT_CALL get_BadgeNumberProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeNumberProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BadgeNumberProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BadgeGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BadgeGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BadgeImageSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeImageSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BadgeImageSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BadgeTextProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BadgeTextProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BadgeTextProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsGroupProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsGroupProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsGroupProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContactProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContactProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContactProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DisplayNameProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisplayNameProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DisplayNameProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InitialsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitialsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().InitialsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreferSmallImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreferSmallImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PreferSmallImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ProfilePictureProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ProfilePictureProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ProfilePictureProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings> : produce_base<D, Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>
{
    int32_t WINRT_CALL get_ActualInitials(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActualInitials, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().ActualInitials());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActualImageBrush(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActualImageBrush, WINRT_WRAP(Windows::UI::Xaml::Media::ImageBrush));
            *value = detach_from<Windows::UI::Xaml::Media::ImageBrush>(this->shim().ActualImageBrush());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRadioButtons> : produce_base<D, Microsoft::UI::Xaml::Controls::IRadioButtons>
{
    int32_t WINRT_CALL get_ItemsSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ItemsSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemsSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ItemsSource(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Items(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Items, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>>(this->shim().Items());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplate, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().ItemTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplate, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().ItemTemplate(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ContainerFromItem(void* item, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContainerFromItem, WINRT_WRAP(Windows::UI::Xaml::DependencyObject), Windows::Foundation::IInspectable const&);
            *result = detach_from<Windows::UI::Xaml::DependencyObject>(this->shim().ContainerFromItem(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&item)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ContainerFromIndex(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContainerFromIndex, WINRT_WRAP(Windows::UI::Xaml::DependencyObject), int32_t);
            *result = detach_from<Windows::UI::Xaml::DependencyObject>(this->shim().ContainerFromIndex(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedIndex(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedIndex, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().SelectedIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectedIndex(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedIndex, WINRT_WRAP(void), int32_t);
            this->shim().SelectedIndex(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().SelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectedItem(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().SelectedItem(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_SelectionChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionChanged, WINRT_WRAP(winrt::event_token), Windows::UI::Xaml::Controls::SelectionChangedEventHandler const&);
            *token = detach_from<winrt::event_token>(this->shim().SelectionChanged(*reinterpret_cast<Windows::UI::Xaml::Controls::SelectionChangedEventHandler const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_SelectionChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(SelectionChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().SelectionChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL get_MaximumColumns(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumColumns, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaximumColumns());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaximumColumns(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumColumns, WINRT_WRAP(void), int32_t);
            this->shim().MaximumColumns(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Header(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Header, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Header());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Header(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Header, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().Header(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRadioButtonsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RadioButtons), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RadioButtons>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>
{
    int32_t WINRT_CALL get_ItemsSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemTemplateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedIndexProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedIndexProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SelectedIndexProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItemProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItemProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SelectedItemProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaximumColumnsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaximumColumnsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaximumColumnsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeaderProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeaderProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HeaderProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem> : produce_base<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>
{
    int32_t WINRT_CALL get_IsChecked(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsChecked, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsChecked());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsChecked(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsChecked, WINRT_WRAP(void), bool);
            this->shim().IsChecked(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GroupName(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GroupName, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().GroupName());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GroupName(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GroupName, WINRT_WRAP(void), hstring const&);
            this->shim().GroupName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>
{
    int32_t WINRT_CALL get_IsCheckedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsCheckedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsCheckedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GroupNameProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GroupNameProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().GroupNameProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingControl> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingControl>
{
    int32_t WINRT_CALL get_Caption(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Caption, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Caption());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Caption(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Caption, WINRT_WRAP(void), hstring const&);
            this->shim().Caption(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InitialSetValue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitialSetValue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().InitialSetValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_InitialSetValue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitialSetValue, WINRT_WRAP(void), int32_t);
            this->shim().InitialSetValue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsClearEnabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsClearEnabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsClearEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsClearEnabled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsClearEnabled, WINRT_WRAP(void), bool);
            this->shim().IsClearEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsReadOnly(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsReadOnly, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsReadOnly());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsReadOnly(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsReadOnly, WINRT_WRAP(void), bool);
            this->shim().IsReadOnly(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxRating(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxRating, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxRating());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxRating(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxRating, WINRT_WRAP(void), int32_t);
            this->shim().MaxRating(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaceholderValue(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderValue, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().PlaceholderValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PlaceholderValue(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderValue, WINRT_WRAP(void), double);
            this->shim().PlaceholderValue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemInfo(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemInfo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RatingItemInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RatingItemInfo>(this->shim().ItemInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemInfo(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemInfo, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RatingItemInfo const&);
            this->shim().ItemInfo(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RatingItemInfo const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Value(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Value, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Value());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Value(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Value, WINRT_WRAP(void), double);
            this->shim().Value(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ValueChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValueChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ValueChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ValueChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ValueChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ValueChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingControlFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingControlFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RatingControl), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RatingControl>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingControlStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingControlStatics>
{
    int32_t WINRT_CALL get_CaptionProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CaptionProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CaptionProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InitialSetValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitialSetValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().InitialSetValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsClearEnabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsClearEnabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsClearEnabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsReadOnlyProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsReadOnlyProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsReadOnlyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxRatingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxRatingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxRatingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaceholderValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PlaceholderValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemInfoProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemInfoProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemInfoProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfo> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>
{
    int32_t WINRT_CALL get_DisabledGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisabledGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().DisabledGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DisabledGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisabledGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().DisabledGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Glyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Glyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Glyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Glyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Glyph, WINRT_WRAP(void), hstring const&);
            this->shim().Glyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().PointerOverGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PointerOverGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().PointerOverGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverPlaceholderGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverPlaceholderGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().PointerOverPlaceholderGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PointerOverPlaceholderGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverPlaceholderGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().PointerOverPlaceholderGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaceholderGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().PlaceholderGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PlaceholderGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().PlaceholderGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnsetGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnsetGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().UnsetGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_UnsetGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnsetGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().UnsetGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RatingItemFontInfo), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RatingItemFontInfo>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>
{
    int32_t WINRT_CALL get_DisabledGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisabledGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DisabledGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().GlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaceholderGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PlaceholderGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PointerOverGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverPlaceholderGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverPlaceholderGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PointerOverPlaceholderGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnsetGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnsetGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().UnsetGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfo> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>
{
    int32_t WINRT_CALL get_DisabledImage(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisabledImage, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().DisabledImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_DisabledImage(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisabledImage, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().DisabledImage(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Image(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Image, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().Image());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Image(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Image, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().Image(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaceholderImage(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderImage, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().PlaceholderImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PlaceholderImage(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderImage, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().PlaceholderImage(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverImage(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverImage, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().PointerOverImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PointerOverImage(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverImage, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().PointerOverImage(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverPlaceholderImage(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverPlaceholderImage, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().PointerOverPlaceholderImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PointerOverPlaceholderImage(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverPlaceholderImage, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().PointerOverPlaceholderImage(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnsetImage(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnsetImage, WINRT_WRAP(Windows::UI::Xaml::Media::ImageSource));
            *value = detach_from<Windows::UI::Xaml::Media::ImageSource>(this->shim().UnsetImage());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_UnsetImage(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnsetImage, WINRT_WRAP(void), Windows::UI::Xaml::Media::ImageSource const&);
            this->shim().UnsetImage(*reinterpret_cast<Windows::UI::Xaml::Media::ImageSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RatingItemImageInfo), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RatingItemImageInfo>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>
{
    int32_t WINRT_CALL get_DisabledImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DisabledImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DisabledImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlaceholderImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlaceholderImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PlaceholderImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PointerOverImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PointerOverPlaceholderImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerOverPlaceholderImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PointerOverPlaceholderImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_UnsetImageProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnsetImageProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().UnsetImageProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemInfo> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemInfo>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RatingItemInfo), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RatingItemInfo>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclePool> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclePool>
{
    int32_t WINRT_CALL PutElement(void* element, void* key) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PutElement, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, hstring const&);
            this->shim().PutElement(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<hstring const*>(&key));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL PutElementWithOwner(void* element, void* key, void* owner) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PutElement, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, hstring const&, Windows::UI::Xaml::UIElement const&);
            this->shim().PutElement(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<hstring const*>(&key), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&owner));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL TryGetElement(void* key, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TryGetElement, WINRT_WRAP(Windows::UI::Xaml::UIElement), hstring const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().TryGetElement(*reinterpret_cast<hstring const*>(&key)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL TryGetElementWithOwner(void* key, void* owner, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TryGetElement, WINRT_WRAP(Windows::UI::Xaml::UIElement), hstring const&, Windows::UI::Xaml::UIElement const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().TryGetElement(*reinterpret_cast<hstring const*>(&key), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&owner)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclePoolFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclePoolFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RecyclePool), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RecyclePool>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides>
{
    int32_t WINRT_CALL PutElementCore(void* element, void* key, void* owner) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PutElementCore, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&, hstring const&, Windows::UI::Xaml::UIElement const&);
            this->shim().PutElementCore(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element), *reinterpret_cast<hstring const*>(&key), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&owner));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL TryGetElementCore(void* key, void* owner, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TryGetElementCore, WINRT_WRAP(Windows::UI::Xaml::UIElement), hstring const&, Windows::UI::Xaml::UIElement const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().TryGetElementCore(*reinterpret_cast<hstring const*>(&key), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&owner)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclePoolStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclePoolStatics>
{
    int32_t WINRT_CALL get_PoolInstanceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PoolInstanceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PoolInstanceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetPoolInstance(void* dataTemplate, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetPoolInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RecyclePool), Windows::UI::Xaml::DataTemplate const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::RecyclePool>(this->shim().GetPoolInstance(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&dataTemplate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPoolInstance(void* dataTemplate, void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPoolInstance, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&, Microsoft::UI::Xaml::Controls::RecyclePool const&);
            this->shim().SetPoolInstance(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&dataTemplate), *reinterpret_cast<Microsoft::UI::Xaml::Controls::RecyclePool const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactory>
{
    int32_t WINRT_CALL get_RecyclePool(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecyclePool, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RecyclePool));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RecyclePool>(this->shim().RecyclePool());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RecyclePool(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecyclePool, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RecyclePool const&);
            this->shim().RecyclePool(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RecyclePool const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Templates(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Templates, WINRT_WRAP(Windows::Foundation::Collections::IMap<hstring, Windows::UI::Xaml::DataTemplate>));
            *value = detach_from<Windows::Foundation::Collections::IMap<hstring, Windows::UI::Xaml::DataTemplate>>(this->shim().Templates());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Templates(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Templates, WINRT_WRAP(void), Windows::Foundation::Collections::IMap<hstring, Windows::UI::Xaml::DataTemplate> const&);
            this->shim().Templates(*reinterpret_cast<Windows::Foundation::Collections::IMap<hstring, Windows::UI::Xaml::DataTemplate> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_SelectTemplateKey(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectTemplateKey, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RecyclingElementFactory, Microsoft::UI::Xaml::Controls::SelectTemplateEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().SelectTemplateKey(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RecyclingElementFactory, Microsoft::UI::Xaml::Controls::SelectTemplateEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_SelectTemplateKey(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(SelectTemplateKey, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().SelectTemplateKey(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RecyclingElementFactory), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RecyclingElementFactory>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides>
{
    int32_t WINRT_CALL OnSelectTemplateKeyCore(void* dataContext, void* owner, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnSelectTemplateKeyCore, WINRT_WRAP(hstring), Windows::Foundation::IInspectable const&, Windows::UI::Xaml::UIElement const&);
            *result = detach_from<hstring>(this->shim().OnSelectTemplateKeyCore(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&dataContext), *reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&owner)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshContainer> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshContainer>
{
    int32_t WINRT_CALL get_Visualizer(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Visualizer, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshVisualizer));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshVisualizer>(this->shim().Visualizer());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Visualizer(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Visualizer, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RefreshVisualizer const&);
            this->shim().Visualizer(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RefreshVisualizer const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PullDirection, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshPullDirection));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshPullDirection>(this->shim().PullDirection());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PullDirection, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RefreshPullDirection const&);
            this->shim().PullDirection(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RefreshPullDirection const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_RefreshRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RefreshRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().RefreshRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_RefreshRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(RefreshRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().RefreshRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL RequestRefresh() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RequestRefresh, WINRT_WRAP(void));
            this->shim().RequestRefresh();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshContainerFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshContainer), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshContainer>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshContainerStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>
{
    int32_t WINRT_CALL get_VisualizerProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VisualizerProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VisualizerProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PullDirectionProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PullDirectionProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PullDirectionProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
{
    int32_t WINRT_CALL get_InteractionRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InteractionRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().InteractionRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>
{
    int32_t WINRT_CALL GetDeferral(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetDeferral, WINRT_WRAP(Windows::Foundation::Deferral));
            *result = detach_from<Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
{
    int32_t WINRT_CALL get_OldState(Microsoft::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OldState, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshVisualizerState));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshVisualizerState>(this->shim().OldState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_NewState(Microsoft::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(NewState, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshVisualizerState));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshVisualizerState>(this->shim().NewState());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizer> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizer>
{
    int32_t WINRT_CALL RequestRefresh() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RequestRefresh, WINRT_WRAP(void));
            this->shim().RequestRefresh();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation const&);
            this->shim().Orientation(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Content(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Content(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Content(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_State(Microsoft::UI::Xaml::Controls::RefreshVisualizerState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(State, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshVisualizerState));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshVisualizerState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_RefreshRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RefreshRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().RefreshRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_RefreshRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(RefreshRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().RefreshRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_RefreshStateChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RefreshStateChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().RefreshStateChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_RefreshStateChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(RefreshStateChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().RefreshStateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RefreshVisualizer), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RefreshVisualizer>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>
{
    int32_t WINRT_CALL get_InfoProviderProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InfoProviderProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().InfoProviderProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OrientationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OrientationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OrientationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().StateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter> : produce_base<D, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollAnchorProvider> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollAnchorProvider>
{
    int32_t WINRT_CALL get_HorizontalAnchorRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalAnchorRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalAnchorRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatio, WINRT_WRAP(void), double);
            this->shim().HorizontalAnchorRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAnchorRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalAnchorRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalAnchorRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatio, WINRT_WRAP(void), double);
            this->shim().VerticalAnchorRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs>
{
    int32_t WINRT_CALL get_Animation(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Animation, WINRT_WRAP(Windows::UI::Composition::CompositionAnimation));
            *value = detach_from<Windows::UI::Composition::CompositionAnimation>(this->shim().Animation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Animation(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Animation, WINRT_WRAP(void), Windows::UI::Composition::CompositionAnimation const&);
            this->shim().Animation(*reinterpret_cast<Windows::UI::Composition::CompositionAnimation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StartPosition(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartPosition, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().StartPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EndPosition(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EndPosition, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().EndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollInfo(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollInfo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollCompletedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollCompletedEventArgs>
{
    int32_t WINRT_CALL get_ScrollInfo(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollInfo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollOptions> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollOptions>
{
    int32_t WINRT_CALL get_AnimationMode(Microsoft::UI::Xaml::Controls::AnimationMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnimationMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::AnimationMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::AnimationMode>(this->shim().AnimationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AnimationMode(Microsoft::UI::Xaml::Controls::AnimationMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnimationMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::AnimationMode const&);
            this->shim().AnimationMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SnapPointsMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SnapPointsMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SnapPointsMode>(this->shim().SnapPointsMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SnapPointsMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SnapPointsMode const&);
            this->shim().SnapPointsMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SnapPointsMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollOptionsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollOptionsFactory>
{
    int32_t WINRT_CALL CreateInstance(Microsoft::UI::Xaml::Controls::AnimationMode animationMode, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollOptions), Microsoft::UI::Xaml::Controls::AnimationMode const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollOptions>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationMode const*>(&animationMode), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateInstance2(Microsoft::UI::Xaml::Controls::AnimationMode animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode snapPointsMode, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance2, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollOptions), Microsoft::UI::Xaml::Controls::AnimationMode const&, Microsoft::UI::Xaml::Controls::SnapPointsMode const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollOptions>(this->shim().CreateInstance2(*reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationMode const*>(&animationMode), *reinterpret_cast<Microsoft::UI::Xaml::Controls::SnapPointsMode const*>(&snapPointsMode), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollViewer> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollViewer>
{
    int32_t WINRT_CALL get_Content(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Content(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Content(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpressionAnimationSources(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpressionAnimationSources, WINRT_WRAP(Windows::UI::Composition::CompositionPropertySet));
            *value = detach_from<Windows::UI::Composition::CompositionPropertySet>(this->shim().ExpressionAnimationSources());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomFactor(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomFactor, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().ZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtentWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtentWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExtentWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtentHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtentHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExtentHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ViewportWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewportWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ViewportWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ViewportHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewportHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ViewportHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollableWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollableWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ScrollableWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollableHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollableHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ScrollableHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_State(Microsoft::UI::Xaml::Controls::InteractionState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(State, WINRT_WRAP(Microsoft::UI::Xaml::Controls::InteractionState));
            *value = detach_from<Microsoft::UI::Xaml::Controls::InteractionState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollController(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollController, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::IScrollController));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::IScrollController>(this->shim().HorizontalScrollController());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollController(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollController, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::IScrollController));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::IScrollController>(this->shim().VerticalScrollController());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollBarVisibility(Microsoft::UI::Xaml::Controls::ScrollBarVisibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollBarVisibility, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollBarVisibility));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollBarVisibility>(this->shim().HorizontalScrollBarVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollBarVisibility(Microsoft::UI::Xaml::Controls::ScrollBarVisibility value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollBarVisibility, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollBarVisibility const&);
            this->shim().HorizontalScrollBarVisibility(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollBarVisibility const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollBarVisibility(Microsoft::UI::Xaml::Controls::ScrollBarVisibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollBarVisibility, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollBarVisibility));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollBarVisibility>(this->shim().VerticalScrollBarVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollBarVisibility(Microsoft::UI::Xaml::Controls::ScrollBarVisibility value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollBarVisibility, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollBarVisibility const&);
            this->shim().VerticalScrollBarVisibility(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollBarVisibility const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentOrientation(Microsoft::UI::Xaml::Controls::ContentOrientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOrientation, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ContentOrientation));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ContentOrientation>(this->shim().ContentOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ContentOrientation(Microsoft::UI::Xaml::Controls::ContentOrientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOrientation, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ContentOrientation const&);
            this->shim().ContentOrientation(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ContentOrientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollChainingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ChainingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ChainingMode>(this->shim().HorizontalScrollChainingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollChainingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ChainingMode const&);
            this->shim().HorizontalScrollChainingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ChainingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollChainingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ChainingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ChainingMode>(this->shim().VerticalScrollChainingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollChainingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ChainingMode const&);
            this->shim().VerticalScrollChainingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ChainingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollRailingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RailingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RailingMode>(this->shim().HorizontalScrollRailingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollRailingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RailingMode const&);
            this->shim().HorizontalScrollRailingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RailingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollRailingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RailingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RailingMode>(this->shim().VerticalScrollRailingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollRailingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RailingMode const&);
            this->shim().VerticalScrollRailingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RailingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollMode>(this->shim().HorizontalScrollMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollMode const&);
            this->shim().HorizontalScrollMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollMode>(this->shim().VerticalScrollMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollMode const&);
            this->shim().VerticalScrollMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ComputedHorizontalScrollBarVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ComputedHorizontalScrollBarVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().ComputedHorizontalScrollBarVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ComputedVerticalScrollBarVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ComputedVerticalScrollBarVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().ComputedVerticalScrollBarVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomChainingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ChainingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ChainingMode>(this->shim().ZoomChainingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ZoomChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomChainingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ChainingMode const&);
            this->shim().ZoomChainingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ChainingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomMode(Microsoft::UI::Xaml::Controls::ZoomMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ZoomMode>(this->shim().ZoomMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ZoomMode(Microsoft::UI::Xaml::Controls::ZoomMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ZoomMode const&);
            this->shim().ZoomMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ZoomMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IgnoredInputKind(Microsoft::UI::Xaml::Controls::InputKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IgnoredInputKind, WINRT_WRAP(Microsoft::UI::Xaml::Controls::InputKind));
            *value = detach_from<Microsoft::UI::Xaml::Controls::InputKind>(this->shim().IgnoredInputKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IgnoredInputKind(Microsoft::UI::Xaml::Controls::InputKind value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IgnoredInputKind, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::InputKind const&);
            this->shim().IgnoredInputKind(*reinterpret_cast<Microsoft::UI::Xaml::Controls::InputKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinZoomFactor(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinZoomFactor, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinZoomFactor(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinZoomFactor, WINRT_WRAP(void), double);
            this->shim().MinZoomFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxZoomFactor(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxZoomFactor, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MaxZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxZoomFactor(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxZoomFactor, WINRT_WRAP(void), double);
            this->shim().MaxZoomFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalAnchorRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalAnchorRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalAnchorRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatio, WINRT_WRAP(void), double);
            this->shim().HorizontalAnchorRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAnchorRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalAnchorRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalAnchorRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatio, WINRT_WRAP(void), double);
            this->shim().VerticalAnchorRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RegisterAnchorCandidate(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RegisterAnchorCandidate, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().RegisterAnchorCandidate(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL UnregisterAnchorCandidate(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UnregisterAnchorCandidate, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().UnregisterAnchorCandidate(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollTo(double horizontalOffset, double verticalOffset, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollTo(horizontalOffset, verticalOffset));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollToWithOptions(double horizontalOffset, double verticalOffset, void* options, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double, Microsoft::UI::Xaml::Controls::ScrollOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollTo(horizontalOffset, verticalOffset, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollBy(horizontalOffsetDelta, verticalOffsetDelta));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollByWithOptions(double horizontalOffsetDelta, double verticalOffsetDelta, void* options, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double, Microsoft::UI::Xaml::Controls::ScrollOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollBy(horizontalOffsetDelta, verticalOffsetDelta, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollFrom(Windows::Foundation::Numerics::float2 offsetsVelocity, void* inertiaDecayRate, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollFrom, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollFrom(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offsetsVelocity), *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&inertiaDecayRate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomTo(float zoomFactor, void* centerPoint, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomTo(zoomFactor, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomToWithOptions(float zoomFactor, void* centerPoint, void* options, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&, Microsoft::UI::Xaml::Controls::ZoomOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomTo(zoomFactor, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint), *reinterpret_cast<Microsoft::UI::Xaml::Controls::ZoomOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomBy(float zoomFactorDelta, void* centerPoint, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomBy(zoomFactorDelta, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomByWithOptions(float zoomFactorDelta, void* centerPoint, void* options, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&, Microsoft::UI::Xaml::Controls::ZoomOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomBy(zoomFactorDelta, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint), *reinterpret_cast<Microsoft::UI::Xaml::Controls::ZoomOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomFrom(float zoomFactorVelocity, void* centerPoint, void* inertiaDecayRate, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomFrom, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&, Windows::Foundation::IReference<float> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomFrom(zoomFactorVelocity, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint), *reinterpret_cast<Windows::Foundation::IReference<float> const*>(&inertiaDecayRate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ExtentChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtentChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ExtentChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ExtentChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ExtentChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ExtentChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_StateChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StateChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().StateChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_StateChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(StateChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().StateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ViewChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ViewChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ViewChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ViewChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ViewChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ScrollAnimationStarting(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollAnimationStarting, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollAnimationStarting(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollAnimationStarting(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollAnimationStarting, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollAnimationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ZoomAnimationStarting(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomAnimationStarting, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ZoomAnimationStarting(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ZoomAnimationStarting(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ZoomAnimationStarting, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ZoomAnimationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ScrollCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollCompleted, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollCompleted(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ZoomCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomCompleted, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ZoomCompleted(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ZoomCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ZoomCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ZoomCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_BringingIntoView(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BringingIntoView, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().BringingIntoView(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_BringingIntoView(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(BringingIntoView, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().BringingIntoView(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_AnchorRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().AnchorRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_AnchorRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(AnchorRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().AnchorRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollViewerFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollViewerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollViewer), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollViewer>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollViewerStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>
{
    int32_t WINRT_CALL get_ContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollerProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollerProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ScrollerProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollControllerProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollControllerProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollControllerProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollControllerProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollControllerProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollControllerProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollBarVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollBarVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollBarVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollBarVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollBarVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollBarVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentOrientationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOrientationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentOrientationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollChainingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollChainingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollChainingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollChainingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollChainingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollChainingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollRailingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollRailingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollRailingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollRailingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollRailingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollRailingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ComputedHorizontalScrollBarVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ComputedHorizontalScrollBarVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ComputedHorizontalScrollBarVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ComputedVerticalScrollBarVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ComputedVerticalScrollBarVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ComputedVerticalScrollBarVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomChainingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomChainingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ZoomChainingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ZoomModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IgnoredInputKindProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IgnoredInputKindProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IgnoredInputKindProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinZoomFactorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinZoomFactorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinZoomFactorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxZoomFactorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxZoomFactorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxZoomFactorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalAnchorRatioProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatioProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalAnchorRatioProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAnchorRatioProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatioProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalAnchorRatioProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs>
{
    int32_t WINRT_CALL get_AnchorCandidates(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorCandidates, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>>(this->shim().AnchorCandidates());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AnchorElement(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorElement, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().AnchorElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AnchorElement(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorElement, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().AnchorElement(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs>
{
    int32_t WINRT_CALL get_SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SnapPointsMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SnapPointsMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SnapPointsMode>(this->shim().SnapPointsMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SnapPointsMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SnapPointsMode const&);
            this->shim().SnapPointsMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SnapPointsMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RequestEventArgs(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RequestEventArgs, WINRT_WRAP(Windows::UI::Xaml::BringIntoViewRequestedEventArgs));
            *value = detach_from<Windows::UI::Xaml::BringIntoViewRequestedEventArgs>(this->shim().RequestEventArgs());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TargetHorizontalOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TargetHorizontalOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().TargetHorizontalOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TargetVerticalOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TargetVerticalOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().TargetVerticalOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollInfo(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollInfo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Cancel(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Cancel(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void), bool);
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs>
{
    int32_t WINRT_CALL get_TemplateKey(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateKey, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().TemplateKey());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TemplateKey(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateKey, WINRT_WRAP(void), hstring const&);
            this->shim().TemplateKey(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DataContext(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DataContext, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().DataContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Owner(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Owner, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Owner());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelectionModel> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelectionModel>
{
    int32_t WINRT_CALL add_SelectionChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelSelectionChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().SelectionChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelSelectionChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_SelectionChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(SelectionChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().SelectionChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ChildrenRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ChildrenRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelChildrenRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ChildrenRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::SelectionModelChildrenRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ChildrenRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ChildrenRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ChildrenRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL get_Source(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Source(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().Source(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SingleSelect(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SingleSelect, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().SingleSelect());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SingleSelect(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SingleSelect, WINRT_WRAP(void), bool);
            this->shim().SingleSelect(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AnchorIndex(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorIndex, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IndexPath));
            *value = detach_from<Microsoft::UI::Xaml::Controls::IndexPath>(this->shim().AnchorIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AnchorIndex(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorIndex, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().AnchorIndex(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedIndex(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedIndex, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IndexPath));
            *value = detach_from<Microsoft::UI::Xaml::Controls::IndexPath>(this->shim().SelectedIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectedIndex(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedIndex, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().SelectedIndex(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().SelectedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedItems, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>>(this->shim().SelectedItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedIndices(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedIndices, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Microsoft::UI::Xaml::Controls::IndexPath>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Microsoft::UI::Xaml::Controls::IndexPath>>(this->shim().SelectedIndices());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetAnchorIndex(int32_t index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetAnchorIndex, WINRT_WRAP(void), int32_t);
            this->shim().SetAnchorIndex(index);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetAnchorIndexWithGroup(int32_t groupIndex, int32_t itemIndex) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetAnchorIndex, WINRT_WRAP(void), int32_t, int32_t);
            this->shim().SetAnchorIndex(groupIndex, itemIndex);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Select(int32_t index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Select, WINRT_WRAP(void), int32_t);
            this->shim().Select(index);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectWithGroup(int32_t groupIndex, int32_t itemIndex) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Select, WINRT_WRAP(void), int32_t, int32_t);
            this->shim().Select(groupIndex, itemIndex);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectAt(void* index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectAt, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().SelectAt(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Deselect(int32_t index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Deselect, WINRT_WRAP(void), int32_t);
            this->shim().Deselect(index);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DeselectWithGroup(int32_t groupIndex, int32_t itemIndex) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Deselect, WINRT_WRAP(void), int32_t, int32_t);
            this->shim().Deselect(groupIndex, itemIndex);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DeselectAt(void* index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DeselectAt, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().DeselectAt(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsSelected(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSelected, WINRT_WRAP(Windows::Foundation::IReference<bool>), int32_t);
            *result = detach_from<Windows::Foundation::IReference<bool>>(this->shim().IsSelected(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsSelectedWithGroup(int32_t groupIndex, int32_t itemIndex, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSelected, WINRT_WRAP(Windows::Foundation::IReference<bool>), int32_t, int32_t);
            *result = detach_from<Windows::Foundation::IReference<bool>>(this->shim().IsSelected(groupIndex, itemIndex));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL IsSelectedAt(void* index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsSelectedAt, WINRT_WRAP(Windows::Foundation::IReference<bool>), Microsoft::UI::Xaml::Controls::IndexPath const&);
            *result = detach_from<Windows::Foundation::IReference<bool>>(this->shim().IsSelectedAt(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&index)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectRangeFromAnchor(int32_t index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectRangeFromAnchor, WINRT_WRAP(void), int32_t);
            this->shim().SelectRangeFromAnchor(index);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectRangeFromAnchorWithGroup(int32_t groupIndex, int32_t itemIndex) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectRangeFromAnchor, WINRT_WRAP(void), int32_t, int32_t);
            this->shim().SelectRangeFromAnchor(groupIndex, itemIndex);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectRangeFromAnchorTo(void* index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectRangeFromAnchorTo, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().SelectRangeFromAnchorTo(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DeselectRangeFromAnchor(int32_t index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DeselectRangeFromAnchor, WINRT_WRAP(void), int32_t);
            this->shim().DeselectRangeFromAnchor(index);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DeselectRangeFromAnchorWithGroup(int32_t groupIndex, int32_t itemIndex) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DeselectRangeFromAnchor, WINRT_WRAP(void), int32_t, int32_t);
            this->shim().DeselectRangeFromAnchor(groupIndex, itemIndex);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DeselectRangeFromAnchorTo(void* index) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DeselectRangeFromAnchorTo, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().DeselectRangeFromAnchorTo(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectRange(void* start, void* end) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectRange, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&, Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().SelectRange(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&start), *reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&end));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL DeselectRange(void* start, void* end) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DeselectRange, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IndexPath const&, Microsoft::UI::Xaml::Controls::IndexPath const&);
            this->shim().DeselectRange(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&start), *reinterpret_cast<Microsoft::UI::Xaml::Controls::IndexPath const*>(&end));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectAll() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectAll, WINRT_WRAP(void));
            this->shim().SelectAll();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ClearSelection() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ClearSelection, WINRT_WRAP(void));
            this->shim().ClearSelection();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs>
{
    int32_t WINRT_CALL get_Source(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Source, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Source());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Children(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Children, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Children(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Children, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().Children(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelectionModelFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelectionModelFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SelectionModel), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::SelectionModel>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelectionModelProtected> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelectionModelProtected>
{
    int32_t WINRT_CALL OnPropertyChanged(void* propertyName) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnPropertyChanged, WINRT_WRAP(void), hstring const&);
            this->shim().OnPropertyChanged(*reinterpret_cast<hstring const*>(&propertyName));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelectionModelSelectionChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelectionModelSelectionChangedEventArgs>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual> : produce_base<D, Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual>
{
    int32_t WINRT_CALL Pause() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pause, WINRT_WRAP(void));
            this->shim().Pause();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL PlayAsync(double fromProgress, double toProgress, bool looped, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlayAsync, WINRT_WRAP(Windows::Foundation::IAsyncAction), double, double, bool);
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().PlayAsync(fromProgress, toProgress, looped));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Resume() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Resume, WINRT_WRAP(void));
            this->shim().Resume();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Stop() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Stop, WINRT_WRAP(void));
            this->shim().Stop();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetPlaybackRate(double playbackRate) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetPlaybackRate, WINRT_WRAP(void), double);
            this->shim().SetPlaybackRate(playbackRate);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetProgress(double progress) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetProgress, WINRT_WRAP(void), double);
            this->shim().SetProgress(progress);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetProgressObject(void* compositionPropertySet) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetProgressObject, WINRT_WRAP(void), Windows::UI::Composition::CompositionPropertySet const&);
            this->shim().SetProgressObject(*reinterpret_cast<Windows::UI::Composition::CompositionPropertySet const*>(&compositionPropertySet));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetSize(Windows::Foundation::Size size) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetSize, WINRT_WRAP(void), Windows::Foundation::Size const&);
            this->shim().SetSize(*reinterpret_cast<Windows::Foundation::Size const*>(&size));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISplitButton> : produce_base<D, Microsoft::UI::Xaml::Controls::ISplitButton>
{
    int32_t WINRT_CALL get_Flyout(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Flyout, WINRT_WRAP(Windows::UI::Xaml::Controls::Primitives::FlyoutBase));
            *value = detach_from<Windows::UI::Xaml::Controls::Primitives::FlyoutBase>(this->shim().Flyout());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Flyout(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Flyout, WINRT_WRAP(void), Windows::UI::Xaml::Controls::Primitives::FlyoutBase const&);
            this->shim().Flyout(*reinterpret_cast<Windows::UI::Xaml::Controls::Primitives::FlyoutBase const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Command(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Command, WINRT_WRAP(Windows::UI::Xaml::Input::ICommand));
            *value = detach_from<Windows::UI::Xaml::Input::ICommand>(this->shim().Command());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Command(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Command, WINRT_WRAP(void), Windows::UI::Xaml::Input::ICommand const&);
            this->shim().Command(*reinterpret_cast<Windows::UI::Xaml::Input::ICommand const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CommandParameter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandParameter, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().CommandParameter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CommandParameter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandParameter, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().CommandParameter(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_Click(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Click, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Click(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Click(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Click, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Click(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISplitButtonFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ISplitButtonFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SplitButton), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::SplitButton>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISplitButtonStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ISplitButtonStatics>
{
    int32_t WINRT_CALL get_FlyoutProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FlyoutProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().FlyoutProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CommandProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CommandProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CommandParameterProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandParameterProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CommandParameterProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IStackLayout> : produce_base<D, Microsoft::UI::Xaml::Controls::IStackLayout>
{
    int32_t WINRT_CALL get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(Windows::UI::Xaml::Controls::Orientation));
            *value = detach_from<Windows::UI::Xaml::Controls::Orientation>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(void), Windows::UI::Xaml::Controls::Orientation const&);
            this->shim().Orientation(*reinterpret_cast<Windows::UI::Xaml::Controls::Orientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Spacing(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Spacing, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Spacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Spacing(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Spacing, WINRT_WRAP(void), double);
            this->shim().Spacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IStackLayoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IStackLayoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::StackLayout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::StackLayout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IStackLayoutState> : produce_base<D, Microsoft::UI::Xaml::Controls::IStackLayoutState>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::StackLayoutState), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::StackLayoutState>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IStackLayoutStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IStackLayoutStatics>
{
    int32_t WINRT_CALL get_OrientationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OrientationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OrientationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SpacingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SpacingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SpacingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeControl> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeControl>
{
    int32_t WINRT_CALL get_LeftItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LeftItems, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeItems));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeItems>(this->shim().LeftItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LeftItems(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LeftItems, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SwipeItems const&);
            this->shim().LeftItems(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SwipeItems const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RightItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RightItems, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeItems));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeItems>(this->shim().RightItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_RightItems(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RightItems, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SwipeItems const&);
            this->shim().RightItems(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SwipeItems const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopItems, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeItems));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeItems>(this->shim().TopItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TopItems(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopItems, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SwipeItems const&);
            this->shim().TopItems(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SwipeItems const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BottomItems(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BottomItems, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeItems));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeItems>(this->shim().BottomItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BottomItems(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BottomItems, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SwipeItems const&);
            this->shim().BottomItems(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SwipeItems const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Close() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Close, WINRT_WRAP(void));
            this->shim().Close();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeControlFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeControlFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeControl), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeControl>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeControlStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeControlStatics>
{
    int32_t WINRT_CALL get_LeftItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LeftItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().LeftItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RightItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RightItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().RightItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TopItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BottomItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BottomItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BottomItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItem> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItem>
{
    int32_t WINRT_CALL get_Text(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Text, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Text(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Text, WINRT_WRAP(void), hstring const&);
            this->shim().Text(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IconSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconSource, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IconSource));
            *value = detach_from<Microsoft::UI::Xaml::Controls::IconSource>(this->shim().IconSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IconSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconSource, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IconSource const&);
            this->shim().IconSource(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IconSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Background(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().Background());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Background(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().Background(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Foreground(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Foreground, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().Foreground());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Foreground(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Foreground, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().Foreground(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Command(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Command, WINRT_WRAP(Windows::UI::Xaml::Input::ICommand));
            *value = detach_from<Windows::UI::Xaml::Input::ICommand>(this->shim().Command());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Command(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Command, WINRT_WRAP(void), Windows::UI::Xaml::Input::ICommand const&);
            this->shim().Command(*reinterpret_cast<Windows::UI::Xaml::Input::ICommand const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CommandParameter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandParameter, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().CommandParameter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CommandParameter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandParameter, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().CommandParameter(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BehaviorOnInvoked, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked>(this->shim().BehaviorOnInvoked());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BehaviorOnInvoked, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked const&);
            this->shim().BehaviorOnInvoked(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_Invoked(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Invoked, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Invoked(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Invoked(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Invoked, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Invoked(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItemFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeItem), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeItem>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
{
    int32_t WINRT_CALL get_SwipeControl(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SwipeControl, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeControl));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeControl>(this->shim().SwipeControl());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItemStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>
{
    int32_t WINRT_CALL get_IconSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IconSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TextProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TextProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TextProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BackgroundProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BackgroundProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BackgroundProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ForegroundProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ForegroundProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ForegroundProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CommandProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CommandProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CommandParameterProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CommandParameterProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CommandParameterProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_BehaviorOnInvokedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BehaviorOnInvokedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BehaviorOnInvokedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItems> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItems>
{
    int32_t WINRT_CALL get_Mode(Microsoft::UI::Xaml::Controls::SwipeMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Mode(Microsoft::UI::Xaml::Controls::SwipeMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SwipeMode const&);
            this->shim().Mode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SwipeMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItemsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SwipeItems), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::SwipeItems>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISwipeItemsStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>
{
    int32_t WINRT_CALL get_ModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISymbolIconSource> : produce_base<D, Microsoft::UI::Xaml::Controls::ISymbolIconSource>
{
    int32_t WINRT_CALL get_Symbol(Windows::UI::Xaml::Controls::Symbol* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Symbol, WINRT_WRAP(Windows::UI::Xaml::Controls::Symbol));
            *value = detach_from<Windows::UI::Xaml::Controls::Symbol>(this->shim().Symbol());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Symbol(Windows::UI::Xaml::Controls::Symbol value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Symbol, WINRT_WRAP(void), Windows::UI::Xaml::Controls::Symbol const&);
            this->shim().Symbol(*reinterpret_cast<Windows::UI::Xaml::Controls::Symbol const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SymbolIconSource), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::SymbolIconSource>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>
{
    int32_t WINRT_CALL get_SymbolProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SymbolProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SymbolProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTip> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTip>
{
    int32_t WINRT_CALL get_Title(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Title, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Title());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Title(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Title, WINRT_WRAP(void), hstring const&);
            this->shim().Title(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Subtitle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Subtitle, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().Subtitle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Subtitle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Subtitle, WINRT_WRAP(void), hstring const&);
            this->shim().Subtitle(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsOpen(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsOpen, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsOpen());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsOpen(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsOpen, WINRT_WRAP(void), bool);
            this->shim().IsOpen(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Target(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Target, WINRT_WRAP(Windows::UI::Xaml::FrameworkElement));
            *value = detach_from<Windows::UI::Xaml::FrameworkElement>(this->shim().Target());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Target(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Target, WINRT_WRAP(void), Windows::UI::Xaml::FrameworkElement const&);
            this->shim().Target(*reinterpret_cast<Windows::UI::Xaml::FrameworkElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TailVisibility(Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TailVisibility, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility>(this->shim().TailVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TailVisibility(Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TailVisibility, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility const&);
            this->shim().TailVisibility(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonContent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonContent, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ActionButtonContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ActionButtonContent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonContent, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ActionButtonContent(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonStyle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonStyle, WINRT_WRAP(Windows::UI::Xaml::Style));
            *value = detach_from<Windows::UI::Xaml::Style>(this->shim().ActionButtonStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ActionButtonStyle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonStyle, WINRT_WRAP(void), Windows::UI::Xaml::Style const&);
            this->shim().ActionButtonStyle(*reinterpret_cast<Windows::UI::Xaml::Style const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonCommand(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonCommand, WINRT_WRAP(Windows::UI::Xaml::Input::ICommand));
            *value = detach_from<Windows::UI::Xaml::Input::ICommand>(this->shim().ActionButtonCommand());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ActionButtonCommand(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonCommand, WINRT_WRAP(void), Windows::UI::Xaml::Input::ICommand const&);
            this->shim().ActionButtonCommand(*reinterpret_cast<Windows::UI::Xaml::Input::ICommand const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonCommandParameter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonCommandParameter, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ActionButtonCommandParameter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ActionButtonCommandParameter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonCommandParameter, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ActionButtonCommandParameter(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonContent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonContent, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().CloseButtonContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CloseButtonContent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonContent, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().CloseButtonContent(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonStyle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonStyle, WINRT_WRAP(Windows::UI::Xaml::Style));
            *value = detach_from<Windows::UI::Xaml::Style>(this->shim().CloseButtonStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CloseButtonStyle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonStyle, WINRT_WRAP(void), Windows::UI::Xaml::Style const&);
            this->shim().CloseButtonStyle(*reinterpret_cast<Windows::UI::Xaml::Style const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonCommand(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonCommand, WINRT_WRAP(Windows::UI::Xaml::Input::ICommand));
            *value = detach_from<Windows::UI::Xaml::Input::ICommand>(this->shim().CloseButtonCommand());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CloseButtonCommand(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonCommand, WINRT_WRAP(void), Windows::UI::Xaml::Input::ICommand const&);
            this->shim().CloseButtonCommand(*reinterpret_cast<Windows::UI::Xaml::Input::ICommand const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonCommandParameter(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonCommandParameter, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().CloseButtonCommandParameter());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CloseButtonCommandParameter(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonCommandParameter, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().CloseButtonCommandParameter(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlacementMargin(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlacementMargin, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().PlacementMargin());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PlacementMargin(struct struct_Windows_UI_Xaml_Thickness value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlacementMargin, WINRT_WRAP(void), Windows::UI::Xaml::Thickness const&);
            this->shim().PlacementMargin(*reinterpret_cast<Windows::UI::Xaml::Thickness const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsLightDismissEnabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsLightDismissEnabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsLightDismissEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsLightDismissEnabled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsLightDismissEnabled, WINRT_WRAP(void), bool);
            this->shim().IsLightDismissEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreferredPlacement(Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreferredPlacement, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode>(this->shim().PreferredPlacement());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PreferredPlacement(Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreferredPlacement, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode const&);
            this->shim().PreferredPlacement(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeroContentPlacement(Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeroContentPlacement, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode>(this->shim().HeroContentPlacement());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeroContentPlacement(Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeroContentPlacement, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode const&);
            this->shim().HeroContentPlacement(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeroContent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeroContent, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().HeroContent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HeroContent(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeroContent, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().HeroContent(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IconSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconSource, WINRT_WRAP(Microsoft::UI::Xaml::Controls::IconSource));
            *value = detach_from<Microsoft::UI::Xaml::Controls::IconSource>(this->shim().IconSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IconSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconSource, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::IconSource const&);
            this->shim().IconSource(*reinterpret_cast<Microsoft::UI::Xaml::Controls::IconSource const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TemplateSettings(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateSettings, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings>(this->shim().TemplateSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ActionButtonClick(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonClick, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ActionButtonClick(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ActionButtonClick(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ActionButtonClick, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ActionButtonClick(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_CloseButtonClick(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonClick, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().CloseButtonClick(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_CloseButtonClick(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(CloseButtonClick, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().CloseButtonClick(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_Closing(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Closing, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Closing(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Closing(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Closing, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Closing(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_Closed(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Closed, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Closed(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Closed(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Closed, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Closed(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>
{
    int32_t WINRT_CALL get_Reason(Microsoft::UI::Xaml::Controls::TeachingTipCloseReason* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Reason, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipCloseReason));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipCloseReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>
{
    int32_t WINRT_CALL get_Reason(Microsoft::UI::Xaml::Controls::TeachingTipCloseReason* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Reason, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipCloseReason));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipCloseReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Cancel(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Cancel(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void), bool);
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetDeferral(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetDeferral, WINRT_WRAP(Windows::Foundation::Deferral));
            *result = detach_from<Windows::Foundation::Deferral>(this->shim().GetDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTip), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTip>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>
{
    int32_t WINRT_CALL get_IsOpenProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsOpenProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsOpenProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TargetProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TargetProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TargetProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TailVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TailVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TailVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TitleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TitleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TitleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SubtitleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SubtitleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SubtitleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ActionButtonContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonStyleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonStyleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ActionButtonStyleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonCommandProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonCommandProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ActionButtonCommandProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ActionButtonCommandParameterProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ActionButtonCommandParameterProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ActionButtonCommandParameterProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CloseButtonContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonStyleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonStyleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CloseButtonStyleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonCommandProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonCommandProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CloseButtonCommandProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseButtonCommandParameterProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseButtonCommandParameterProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CloseButtonCommandParameterProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PlacementMarginProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PlacementMarginProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PlacementMarginProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsLightDismissEnabledProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsLightDismissEnabledProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsLightDismissEnabledProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PreferredPlacementProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PreferredPlacementProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PreferredPlacementProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeroContentPlacementProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeroContentPlacementProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HeroContentPlacementProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HeroContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HeroContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HeroContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IconSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IconSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TemplateSettingsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TemplateSettingsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TemplateSettingsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>
{
    int32_t WINRT_CALL get_TopRightHighlightMargin(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopRightHighlightMargin, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().TopRightHighlightMargin());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TopRightHighlightMargin(struct struct_Windows_UI_Xaml_Thickness value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopRightHighlightMargin, WINRT_WRAP(void), Windows::UI::Xaml::Thickness const&);
            this->shim().TopRightHighlightMargin(*reinterpret_cast<Windows::UI::Xaml::Thickness const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopLeftHighlightMargin(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopLeftHighlightMargin, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().TopLeftHighlightMargin());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TopLeftHighlightMargin(struct struct_Windows_UI_Xaml_Thickness value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopLeftHighlightMargin, WINRT_WRAP(void), Windows::UI::Xaml::Thickness const&);
            this->shim().TopLeftHighlightMargin(*reinterpret_cast<Windows::UI::Xaml::Thickness const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IconElement(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconElement, WINRT_WRAP(Windows::UI::Xaml::Controls::IconElement));
            *value = detach_from<Windows::UI::Xaml::Controls::IconElement>(this->shim().IconElement());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IconElement(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconElement, WINRT_WRAP(void), Windows::UI::Xaml::Controls::IconElement const&);
            this->shim().IconElement(*reinterpret_cast<Windows::UI::Xaml::Controls::IconElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>
{
    int32_t WINRT_CALL get_TopRightHighlightMarginProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopRightHighlightMarginProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TopRightHighlightMarginProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TopLeftHighlightMarginProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TopLeftHighlightMarginProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TopLeftHighlightMarginProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IconElementProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconElementProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IconElementProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout> : produce_base<D, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TextCommandBarFlyout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IToggleSplitButton> : produce_base<D, Microsoft::UI::Xaml::Controls::IToggleSplitButton>
{
    int32_t WINRT_CALL get_IsChecked(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsChecked, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsChecked());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsChecked(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsChecked, WINRT_WRAP(void), bool);
            this->shim().IsChecked(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_IsCheckedChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsCheckedChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().IsCheckedChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_IsCheckedChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(IsCheckedChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().IsCheckedChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ToggleSplitButton), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ToggleSplitButton>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeView> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeView>
{
    int32_t WINRT_CALL get_RootNodes(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RootNodes, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>>(this->shim().RootNodes());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewSelectionMode>(this->shim().SelectionMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TreeViewSelectionMode const&);
            this->shim().SelectionMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TreeViewSelectionMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SelectedNodes(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectedNodes, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>>(this->shim().SelectedNodes());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Expand(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Expand, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TreeViewNode const&);
            this->shim().Expand(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TreeViewNode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL Collapse(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Collapse, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TreeViewNode const&);
            this->shim().Collapse(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TreeViewNode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SelectAll() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectAll, WINRT_WRAP(void));
            this->shim().SelectAll();
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ItemInvoked(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemInvoked, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ItemInvoked(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ItemInvoked(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ItemInvoked, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ItemInvoked(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_Expanding(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Expanding, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Expanding(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Expanding(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Expanding, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Expanding(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_Collapsed(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Collapsed, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().Collapsed(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_Collapsed(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(Collapsed, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().Collapsed(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL NodeFromContainer(void* container, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(NodeFromContainer, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewNode), Windows::UI::Xaml::DependencyObject const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::TreeViewNode>(this->shim().NodeFromContainer(*reinterpret_cast<Windows::UI::Xaml::DependencyObject const*>(&container)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ContainerFromNode(void* node, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContainerFromNode, WINRT_WRAP(Windows::UI::Xaml::DependencyObject), Microsoft::UI::Xaml::Controls::TreeViewNode const&);
            *result = detach_from<Windows::UI::Xaml::DependencyObject>(this->shim().ContainerFromNode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TreeViewNode const*>(&node)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ItemFromContainer(void* container, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemFromContainer, WINRT_WRAP(Windows::Foundation::IInspectable), Windows::UI::Xaml::DependencyObject const&);
            *result = detach_from<Windows::Foundation::IInspectable>(this->shim().ItemFromContainer(*reinterpret_cast<Windows::UI::Xaml::DependencyObject const*>(&container)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ContainerFromItem(void* item, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContainerFromItem, WINRT_WRAP(Windows::UI::Xaml::DependencyObject), Windows::Foundation::IInspectable const&);
            *result = detach_from<Windows::UI::Xaml::DependencyObject>(this->shim().ContainerFromItem(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&item)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CanDragItems(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CanDragItems, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().CanDragItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CanDragItems(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CanDragItems, WINRT_WRAP(void), bool);
            this->shim().CanDragItems(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CanReorderItems(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CanReorderItems, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().CanReorderItems());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CanReorderItems(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CanReorderItems, WINRT_WRAP(void), bool);
            this->shim().CanReorderItems(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplate, WINRT_WRAP(Windows::UI::Xaml::DataTemplate));
            *value = detach_from<Windows::UI::Xaml::DataTemplate>(this->shim().ItemTemplate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemTemplate(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplate, WINRT_WRAP(void), Windows::UI::Xaml::DataTemplate const&);
            this->shim().ItemTemplate(*reinterpret_cast<Windows::UI::Xaml::DataTemplate const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplateSelector(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplateSelector, WINRT_WRAP(Windows::UI::Xaml::Controls::DataTemplateSelector));
            *value = detach_from<Windows::UI::Xaml::Controls::DataTemplateSelector>(this->shim().ItemTemplateSelector());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemTemplateSelector(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplateSelector, WINRT_WRAP(void), Windows::UI::Xaml::Controls::DataTemplateSelector const&);
            this->shim().ItemTemplateSelector(*reinterpret_cast<Windows::UI::Xaml::Controls::DataTemplateSelector const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemContainerStyle(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerStyle, WINRT_WRAP(Windows::UI::Xaml::Style));
            *value = detach_from<Windows::UI::Xaml::Style>(this->shim().ItemContainerStyle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemContainerStyle(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerStyle, WINRT_WRAP(void), Windows::UI::Xaml::Style const&);
            this->shim().ItemContainerStyle(*reinterpret_cast<Windows::UI::Xaml::Style const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemContainerStyleSelector(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerStyleSelector, WINRT_WRAP(Windows::UI::Xaml::Controls::StyleSelector));
            *value = detach_from<Windows::UI::Xaml::Controls::StyleSelector>(this->shim().ItemContainerStyleSelector());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemContainerStyleSelector(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerStyleSelector, WINRT_WRAP(void), Windows::UI::Xaml::Controls::StyleSelector const&);
            this->shim().ItemContainerStyleSelector(*reinterpret_cast<Windows::UI::Xaml::Controls::StyleSelector const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemContainerTransitions(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerTransitions, WINRT_WRAP(Windows::UI::Xaml::Media::Animation::TransitionCollection));
            *value = detach_from<Windows::UI::Xaml::Media::Animation::TransitionCollection>(this->shim().ItemContainerTransitions());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemContainerTransitions(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerTransitions, WINRT_WRAP(void), Windows::UI::Xaml::Media::Animation::TransitionCollection const&);
            this->shim().ItemContainerTransitions(*reinterpret_cast<Windows::UI::Xaml::Media::Animation::TransitionCollection const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ItemsSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemsSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ItemsSource(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_DragItemsStarting(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DragItemsStarting, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().DragItemsStarting(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_DragItemsStarting(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(DragItemsStarting, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().DragItemsStarting(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_DragItemsCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DragItemsCompleted, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().DragItemsCompleted(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_DragItemsCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(DragItemsCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().DragItemsCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
{
    int32_t WINRT_CALL get_Node(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Node, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewNode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewNode>(this->shim().Node());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Item(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Item, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Item());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
{
    int32_t WINRT_CALL get_DropResult(Windows::ApplicationModel::DataTransfer::DataPackageOperation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DropResult, WINRT_WRAP(Windows::ApplicationModel::DataTransfer::DataPackageOperation));
            *value = detach_from<Windows::ApplicationModel::DataTransfer::DataPackageOperation>(this->shim().DropResult());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Items(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Items, WINRT_WRAP(Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>>(this->shim().Items());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
{
    int32_t WINRT_CALL get_Cancel(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Cancel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Cancel(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Cancel, WINRT_WRAP(void), bool);
            this->shim().Cancel(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Data(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Data, WINRT_WRAP(Windows::ApplicationModel::DataTransfer::DataPackage));
            *value = detach_from<Windows::ApplicationModel::DataTransfer::DataPackage>(this->shim().Data());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Items(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Items, WINRT_WRAP(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>>(this->shim().Items());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
{
    int32_t WINRT_CALL get_Node(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Node, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewNode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewNode>(this->shim().Node());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Item(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Item, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Item());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeView), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeView>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItem> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItem>
{
    int32_t WINRT_CALL get_GlyphOpacity(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphOpacity, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().GlyphOpacity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GlyphOpacity(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphOpacity, WINRT_WRAP(void), double);
            this->shim().GlyphOpacity(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphBrush(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphBrush, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().GlyphBrush());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GlyphBrush(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphBrush, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().GlyphBrush(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandedGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().ExpandedGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ExpandedGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().ExpandedGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CollapsedGlyph(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CollapsedGlyph, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().CollapsedGlyph());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_CollapsedGlyph(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CollapsedGlyph, WINRT_WRAP(void), hstring const&);
            this->shim().CollapsedGlyph(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphSize(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphSize, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().GlyphSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_GlyphSize(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphSize, WINRT_WRAP(void), double);
            this->shim().GlyphSize(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsExpanded(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsExpanded, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsExpanded());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsExpanded(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsExpanded, WINRT_WRAP(void), bool);
            this->shim().IsExpanded(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TreeViewItemTemplateSettings(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TreeViewItemTemplateSettings, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>(this->shim().TreeViewItemTemplateSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasUnrealizedChildren(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasUnrealizedChildren, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasUnrealizedChildren());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HasUnrealizedChildren(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasUnrealizedChildren, WINRT_WRAP(void), bool);
            this->shim().HasUnrealizedChildren(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsSource(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().ItemsSource());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemsSource(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSource, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().ItemsSource(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItemFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewItem), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewItem>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
{
    int32_t WINRT_CALL get_InvokedItem(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InvokedItem, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().InvokedItem());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Handled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Handled, WINRT_WRAP(void), bool);
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Handled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Handled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>
{
    int32_t WINRT_CALL get_GlyphOpacityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphOpacityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().GlyphOpacityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphBrushProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphBrushProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().GlyphBrushProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandedGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ExpandedGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CollapsedGlyphProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CollapsedGlyphProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CollapsedGlyphProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_GlyphSizeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GlyphSizeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().GlyphSizeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsExpandedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsExpandedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsExpandedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TreeViewItemTemplateSettingsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TreeViewItemTemplateSettingsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TreeViewItemTemplateSettingsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasUnrealizedChildrenProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasUnrealizedChildrenProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HasUnrealizedChildrenProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
{
    int32_t WINRT_CALL get_ExpandedGlyphVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedGlyphVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().ExpandedGlyphVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CollapsedGlyphVisibility(Windows::UI::Xaml::Visibility* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CollapsedGlyphVisibility, WINRT_WRAP(Windows::UI::Xaml::Visibility));
            *value = detach_from<Windows::UI::Xaml::Visibility>(this->shim().CollapsedGlyphVisibility());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Indentation(struct struct_Windows_UI_Xaml_Thickness* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Indentation, WINRT_WRAP(Windows::UI::Xaml::Thickness));
            *value = detach_from<Windows::UI::Xaml::Thickness>(this->shim().Indentation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DragItemsCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DragItemsCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().DragItemsCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
{
    int32_t WINRT_CALL get_ExpandedGlyphVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedGlyphVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ExpandedGlyphVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CollapsedGlyphVisibilityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CollapsedGlyphVisibilityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CollapsedGlyphVisibilityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IndentationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IndentationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IndentationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DragItemsCountProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DragItemsCountProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DragItemsCountProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewList> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewList>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewListFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewListFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewList), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewList>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewNode> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewNode>
{
    int32_t WINRT_CALL get_Content(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(Windows::Foundation::IInspectable));
            *value = detach_from<Windows::Foundation::IInspectable>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Content(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(void), Windows::Foundation::IInspectable const&);
            this->shim().Content(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Parent(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Parent, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewNode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewNode>(this->shim().Parent());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsExpanded(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsExpanded, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsExpanded());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IsExpanded(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsExpanded, WINRT_WRAP(void), bool);
            this->shim().IsExpanded(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasChildren(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasChildren, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasChildren());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Depth(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Depth, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().Depth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasUnrealizedChildren(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasUnrealizedChildren, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().HasUnrealizedChildren());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HasUnrealizedChildren(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasUnrealizedChildren, WINRT_WRAP(void), bool);
            this->shim().HasUnrealizedChildren(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Children(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Children, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>>(this->shim().Children());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TreeViewNode), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TreeViewNode>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>
{
    int32_t WINRT_CALL get_ContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_DepthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(DepthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().DepthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsExpandedProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsExpandedProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IsExpandedProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HasChildrenProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HasChildrenProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HasChildrenProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITreeViewStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITreeViewStatics>
{
    int32_t WINRT_CALL get_SelectionModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SelectionModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().SelectionModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CanDragItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CanDragItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CanDragItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CanReorderItemsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CanReorderItemsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().CanReorderItemsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplateProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplateProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemTemplateProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemTemplateSelectorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemTemplateSelectorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemTemplateSelectorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemContainerStyleProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerStyleProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemContainerStyleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemContainerStyleSelectorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerStyleSelectorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemContainerStyleSelectorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemContainerTransitionsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemContainerTransitionsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemContainerTransitionsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsSourceProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsSourceProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsSourceProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITwoPaneView> : produce_base<D, Microsoft::UI::Xaml::Controls::ITwoPaneView>
{
    int32_t WINRT_CALL get_Pane1(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane1, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Pane1());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Pane1(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane1, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Pane1(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Pane2(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane2, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Pane2());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Pane2(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane2, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Pane2(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Pane1Length(struct struct_Windows_UI_Xaml_GridLength* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane1Length, WINRT_WRAP(Windows::UI::Xaml::GridLength));
            *value = detach_from<Windows::UI::Xaml::GridLength>(this->shim().Pane1Length());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Pane1Length(struct struct_Windows_UI_Xaml_GridLength value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane1Length, WINRT_WRAP(void), Windows::UI::Xaml::GridLength const&);
            this->shim().Pane1Length(*reinterpret_cast<Windows::UI::Xaml::GridLength const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Pane2Length(struct struct_Windows_UI_Xaml_GridLength* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane2Length, WINRT_WRAP(Windows::UI::Xaml::GridLength));
            *value = detach_from<Windows::UI::Xaml::GridLength>(this->shim().Pane2Length());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Pane2Length(struct struct_Windows_UI_Xaml_GridLength value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane2Length, WINRT_WRAP(void), Windows::UI::Xaml::GridLength const&);
            this->shim().Pane2Length(*reinterpret_cast<Windows::UI::Xaml::GridLength const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PanePriority(Microsoft::UI::Xaml::Controls::TwoPaneViewPriority* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PanePriority, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TwoPaneViewPriority));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TwoPaneViewPriority>(this->shim().PanePriority());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_PanePriority(Microsoft::UI::Xaml::Controls::TwoPaneViewPriority value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PanePriority, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TwoPaneViewPriority const&);
            this->shim().PanePriority(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TwoPaneViewPriority const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Mode(Microsoft::UI::Xaml::Controls::TwoPaneViewMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Mode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TwoPaneViewMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TwoPaneViewMode>(this->shim().Mode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WideModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WideModeConfiguration, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration>(this->shim().WideModeConfiguration());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_WideModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WideModeConfiguration, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration const&);
            this->shim().WideModeConfiguration(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TallModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TallModeConfiguration, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration));
            *value = detach_from<Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration>(this->shim().TallModeConfiguration());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_TallModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TallModeConfiguration, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration const&);
            this->shim().TallModeConfiguration(*reinterpret_cast<Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinWideModeWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinWideModeWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinWideModeWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinWideModeWidth(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinWideModeWidth, WINRT_WRAP(void), double);
            this->shim().MinWideModeWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinTallModeHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinTallModeHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinTallModeHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinTallModeHeight(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinTallModeHeight, WINRT_WRAP(void), double);
            this->shim().MinTallModeHeight(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ModeChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ModeChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ModeChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ModeChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ModeChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ModeChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::TwoPaneView), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::TwoPaneView>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>
{
    int32_t WINRT_CALL get_Pane1Property(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane1Property, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().Pane1Property());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Pane2Property(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane2Property, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().Pane2Property());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Pane1LengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane1LengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().Pane1LengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Pane2LengthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Pane2LengthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().Pane2LengthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_PanePriorityProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PanePriorityProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().PanePriorityProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WideModeConfigurationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WideModeConfigurationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().WideModeConfigurationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_TallModeConfigurationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(TallModeConfigurationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().TallModeConfigurationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinWideModeWidthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinWideModeWidthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinWideModeWidthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinTallModeHeightProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinTallModeHeightProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinTallModeHeightProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IUniformGridLayout> : produce_base<D, Microsoft::UI::Xaml::Controls::IUniformGridLayout>
{
    int32_t WINRT_CALL get_Orientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(Windows::UI::Xaml::Controls::Orientation));
            *value = detach_from<Windows::UI::Xaml::Controls::Orientation>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Orientation, WINRT_WRAP(void), Windows::UI::Xaml::Controls::Orientation const&);
            this->shim().Orientation(*reinterpret_cast<Windows::UI::Xaml::Controls::Orientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinItemWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinItemWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinItemWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinItemWidth(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinItemWidth, WINRT_WRAP(void), double);
            this->shim().MinItemWidth(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinItemHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinItemHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinItemHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinItemHeight(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinItemHeight, WINRT_WRAP(void), double);
            this->shim().MinItemHeight(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinRowSpacing(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinRowSpacing, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinRowSpacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinRowSpacing(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinRowSpacing, WINRT_WRAP(void), double);
            this->shim().MinRowSpacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinColumnSpacing(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinColumnSpacing, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinColumnSpacing());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinColumnSpacing(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinColumnSpacing, WINRT_WRAP(void), double);
            this->shim().MinColumnSpacing(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsJustification(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsJustification, WINRT_WRAP(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification));
            *value = detach_from<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification>(this->shim().ItemsJustification());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemsJustification(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsJustification, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification const&);
            this->shim().ItemsJustification(*reinterpret_cast<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsStretch(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsStretch, WINRT_WRAP(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch));
            *value = detach_from<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch>(this->shim().ItemsStretch());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ItemsStretch(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsStretch, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch const&);
            this->shim().ItemsStretch(*reinterpret_cast<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::UniformGridLayout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::UniformGridLayout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutState> : produce_base<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutState>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::UniformGridLayoutState), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::UniformGridLayoutState>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>
{
    int32_t WINRT_CALL get_OrientationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OrientationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().OrientationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinItemWidthProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinItemWidthProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinItemWidthProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinItemHeightProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinItemHeightProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinItemHeightProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinRowSpacingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinRowSpacingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinRowSpacingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinColumnSpacingProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinColumnSpacingProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinColumnSpacingProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsJustificationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsJustificationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsJustificationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ItemsStretchProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemsStretchProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ItemsStretchProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayout> : produce_base<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayout>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext> : produce_base<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>
{
    int32_t WINRT_CALL get_ItemCount(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemCount, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().ItemCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetItemAt(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetItemAt, WINRT_WRAP(Windows::Foundation::IInspectable), int32_t);
            *result = detach_from<Windows::Foundation::IInspectable>(this->shim().GetItemAt(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RealizationRect(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RealizationRect, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().RealizationRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetOrCreateElementAt(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetOrCreateElementAt, WINRT_WRAP(Windows::UI::Xaml::UIElement), int32_t);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().GetOrCreateElementAt(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetOrCreateElementAt2(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions options, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetOrCreateElementAt, WINRT_WRAP(Windows::UI::Xaml::UIElement), int32_t, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().GetOrCreateElementAt(index, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementRealizationOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RecycleElement(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecycleElement, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().RecycleElement(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RecommendedAnchorIndex(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecommendedAnchorIndex, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().RecommendedAnchorIndex());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LayoutOrigin(Windows::Foundation::Point* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutOrigin, WINRT_WRAP(Windows::Foundation::Point));
            *value = detach_from<Windows::Foundation::Point>(this->shim().LayoutOrigin());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LayoutOrigin(Windows::Foundation::Point value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutOrigin, WINRT_WRAP(void), Windows::Foundation::Point const&);
            this->shim().LayoutOrigin(*reinterpret_cast<Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
{
    int32_t WINRT_CALL ItemCountCore(int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ItemCountCore, WINRT_WRAP(int32_t));
            *result = detach_from<int32_t>(this->shim().ItemCountCore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetItemAtCore(int32_t index, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetItemAtCore, WINRT_WRAP(Windows::Foundation::IInspectable), int32_t);
            *result = detach_from<Windows::Foundation::IInspectable>(this->shim().GetItemAtCore(index));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RealizationRectCore(Windows::Foundation::Rect* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RealizationRectCore, WINRT_WRAP(Windows::Foundation::Rect));
            *result = detach_from<Windows::Foundation::Rect>(this->shim().RealizationRectCore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetElementAtCore(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions options, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetElementAtCore, WINRT_WRAP(Windows::UI::Xaml::UIElement), int32_t, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const&);
            *result = detach_from<Windows::UI::Xaml::UIElement>(this->shim().GetElementAtCore(index, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ElementRealizationOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL RecycleElementCore(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecycleElementCore, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().RecycleElementCore(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_RecommendedAnchorIndexCore(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(RecommendedAnchorIndexCore, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().RecommendedAnchorIndexCore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_LayoutOriginCore(Windows::Foundation::Point* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutOriginCore, WINRT_WRAP(Windows::Foundation::Point));
            *value = detach_from<Windows::Foundation::Point>(this->shim().LayoutOriginCore());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_LayoutOriginCore(Windows::Foundation::Point value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(LayoutOriginCore, WINRT_WRAP(void), Windows::Foundation::Point const&);
            this->shim().LayoutOriginCore(*reinterpret_cast<Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::VirtualizingLayout), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::VirtualizingLayout>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides> : produce_base<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
{
    int32_t WINRT_CALL InitializeForContextCore(void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InitializeForContextCore, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&);
            this->shim().InitializeForContextCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL UninitializeForContextCore(void* context) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(UninitializeForContextCore, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&);
            this->shim().UninitializeForContextCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL MeasureOverride(void* context, Windows::Foundation::Size availableSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MeasureOverride, WINRT_WRAP(Windows::Foundation::Size), Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().MeasureOverride(*reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::Size const*>(&availableSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ArrangeOverride(void* context, Windows::Foundation::Size finalSize, Windows::Foundation::Size* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ArrangeOverride, WINRT_WRAP(Windows::Foundation::Size), Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&, Windows::Foundation::Size const&);
            *result = detach_from<Windows::Foundation::Size>(this->shim().ArrangeOverride(*reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::Size const*>(&finalSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnItemsChangedCore(void* context, void* source, void* args) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnItemsChangedCore, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const&, Windows::Foundation::IInspectable const&, Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const&);
            this->shim().OnItemsChangedCore(*reinterpret_cast<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const*>(&context), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&source), *reinterpret_cast<Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const*>(&args));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IXamlControlsResources> : produce_base<D, Microsoft::UI::Xaml::Controls::IXamlControlsResources>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>
{
    int32_t WINRT_CALL EnsureRevealLights(void* element) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EnsureRevealLights, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().EnsureRevealLights(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&element));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs>
{
    int32_t WINRT_CALL get_CenterPoint(Windows::Foundation::Numerics::float2* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CenterPoint, WINRT_WRAP(Windows::Foundation::Numerics::float2));
            *value = detach_from<Windows::Foundation::Numerics::float2>(this->shim().CenterPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_StartZoomFactor(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StartZoomFactor, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().StartZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_EndZoomFactor(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(EndZoomFactor, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().EndZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Animation(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Animation, WINRT_WRAP(Windows::UI::Composition::CompositionAnimation));
            *value = detach_from<Windows::UI::Composition::CompositionAnimation>(this->shim().Animation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Animation(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Animation, WINRT_WRAP(void), Windows::UI::Composition::CompositionAnimation const&);
            this->shim().Animation(*reinterpret_cast<Windows::UI::Composition::CompositionAnimation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomInfo(struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomInfo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IZoomCompletedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::IZoomCompletedEventArgs>
{
    int32_t WINRT_CALL get_ZoomInfo(struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomInfo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IZoomOptions> : produce_base<D, Microsoft::UI::Xaml::Controls::IZoomOptions>
{
    int32_t WINRT_CALL get_AnimationMode(Microsoft::UI::Xaml::Controls::AnimationMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnimationMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::AnimationMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::AnimationMode>(this->shim().AnimationMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_AnimationMode(Microsoft::UI::Xaml::Controls::AnimationMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnimationMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::AnimationMode const&);
            this->shim().AnimationMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SnapPointsMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::SnapPointsMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::SnapPointsMode>(this->shim().SnapPointsMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_SnapPointsMode(Microsoft::UI::Xaml::Controls::SnapPointsMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SnapPointsMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::SnapPointsMode const&);
            this->shim().SnapPointsMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::SnapPointsMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::IZoomOptionsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::IZoomOptionsFactory>
{
    int32_t WINRT_CALL CreateInstance(Microsoft::UI::Xaml::Controls::AnimationMode animationMode, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomOptions), Microsoft::UI::Xaml::Controls::AnimationMode const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ZoomOptions>(this->shim().CreateInstance(*reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationMode const*>(&animationMode), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL CreateInstance2(Microsoft::UI::Xaml::Controls::AnimationMode animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode snapPointsMode, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance2, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomOptions), Microsoft::UI::Xaml::Controls::AnimationMode const&, Microsoft::UI::Xaml::Controls::SnapPointsMode const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::ZoomOptions>(this->shim().CreateInstance2(*reinterpret_cast<Microsoft::UI::Xaml::Controls::AnimationMode const*>(&animationMode), *reinterpret_cast<Microsoft::UI::Xaml::Controls::SnapPointsMode const*>(&snapPointsMode), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides>
{
    bool HasShowAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.HasShowAnimationCore(element, context);
        }
        return this->shim().HasShowAnimationCore(element, context);
    }
    bool HasHideAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.HasHideAnimationCore(element, context);
        }
        return this->shim().HasHideAnimationCore(element, context);
    }
    bool HasBoundsChangeAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds)
    {
        Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.HasBoundsChangeAnimationCore(element, context, oldBounds, newBounds);
        }
        return this->shim().HasBoundsChangeAnimationCore(element, context, oldBounds, newBounds);
    }
    void StartShowAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.StartShowAnimation(element, context);
        }
        return this->shim().StartShowAnimation(element, context);
    }
    void StartHideAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.StartHideAnimation(element, context);
        }
        return this->shim().StartHideAnimation(element, context);
    }
    void StartBoundsChangeAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds)
    {
        Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.StartBoundsChangeAnimation(element, context, oldBounds, newBounds);
        }
        return this->shim().StartBoundsChangeAnimation(element, context, oldBounds, newBounds);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IElementFactoryOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IElementFactoryOverrides>
{
    Windows::UI::Xaml::UIElement GetElementCore(Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const& args)
    {
        Microsoft::UI::Xaml::Controls::IElementFactoryOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetElementCore(args);
        }
        return this->shim().GetElementCore(args);
    }
    void RecycleElementCore(Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const& args)
    {
        Microsoft::UI::Xaml::Controls::IElementFactoryOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.RecycleElementCore(args);
        }
        return this->shim().RecycleElementCore(args);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides>
{
    Windows::Foundation::Size GetMeasureSize(int32_t index, Windows::Foundation::Size const& availableSize)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetMeasureSize(index, availableSize);
        }
        return this->shim().GetMeasureSize(index, availableSize);
    }
    Windows::Foundation::Size GetProvisionalArrangeSize(int32_t index, Windows::Foundation::Size const& measureSize, Windows::Foundation::Size const& desiredSize)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetProvisionalArrangeSize(index, measureSize, desiredSize);
        }
        return this->shim().GetProvisionalArrangeSize(index, measureSize, desiredSize);
    }
    bool ShouldBreakLine(int32_t index, double remainingSpace)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.ShouldBreakLine(index, remainingSpace);
        }
        return this->shim().ShouldBreakLine(index, remainingSpace);
    }
    Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo GetAnchorForRealizationRect(Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetAnchorForRealizationRect(availableSize, context);
        }
        return this->shim().GetAnchorForRealizationRect(availableSize, context);
    }
    Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo GetAnchorForTargetElement(int32_t targetIndex, Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetAnchorForTargetElement(targetIndex, availableSize, context);
        }
        return this->shim().GetAnchorForTargetElement(targetIndex, availableSize, context);
    }
    Windows::Foundation::Rect GetExtent(Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::UI::Xaml::UIElement const& firstRealized, int32_t firstRealizedItemIndex, Windows::Foundation::Rect const& firstRealizedLayoutBounds, Windows::UI::Xaml::UIElement const& lastRealized, int32_t lastRealizedItemIndex, Windows::Foundation::Rect const& lastRealizedLayoutBounds)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetExtent(availableSize, context, firstRealized, firstRealizedItemIndex, firstRealizedLayoutBounds, lastRealized, lastRealizedItemIndex, lastRealizedLayoutBounds);
        }
        return this->shim().GetExtent(availableSize, context, firstRealized, firstRealizedItemIndex, firstRealizedLayoutBounds, lastRealized, lastRealizedItemIndex, lastRealizedLayoutBounds);
    }
    void OnElementMeasured(Windows::UI::Xaml::UIElement const& element, int32_t index, Windows::Foundation::Size const& availableSize, Windows::Foundation::Size const& measureSize, Windows::Foundation::Size const& desiredSize, Windows::Foundation::Size const& provisionalArrangeSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.OnElementMeasured(element, index, availableSize, measureSize, desiredSize, provisionalArrangeSize, context);
        }
        return this->shim().OnElementMeasured(element, index, availableSize, measureSize, desiredSize, provisionalArrangeSize, context);
    }
    void OnLineArranged(int32_t startIndex, int32_t countInLine, double lineSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.OnLineArranged(startIndex, countInLine, lineSize, context);
        }
        return this->shim().OnLineArranged(startIndex, countInLine, lineSize, context);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
{
    Windows::Foundation::IInspectable LayoutStateCore()
    {
        Microsoft::UI::Xaml::Controls::ILayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.LayoutStateCore();
        }
        return this->shim().LayoutStateCore();
    }
    void LayoutStateCore(Windows::Foundation::IInspectable const& value)
    {
        Microsoft::UI::Xaml::Controls::ILayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.LayoutStateCore(value);
        }
        return this->shim().LayoutStateCore(value);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
{
    void InitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.InitializeForContextCore(context);
        }
        return this->shim().InitializeForContextCore(context);
    }
    void UninitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.UninitializeForContextCore(context);
        }
        return this->shim().UninitializeForContextCore(context);
    }
    Windows::Foundation::Size MeasureOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize)
    {
        Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.MeasureOverride(context, availableSize);
        }
        return this->shim().MeasureOverride(context, availableSize);
    }
    Windows::Foundation::Size ArrangeOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize)
    {
        Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.ArrangeOverride(context, finalSize);
        }
        return this->shim().ArrangeOverride(context, finalSize);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
{
    Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement> ChildrenCore()
    {
        Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.ChildrenCore();
        }
        return this->shim().ChildrenCore();
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides>
{
    void PutElementCore(Windows::UI::Xaml::UIElement const& element, hstring const& key, Windows::UI::Xaml::UIElement const& owner)
    {
        Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.PutElementCore(element, key, owner);
        }
        return this->shim().PutElementCore(element, key, owner);
    }
    Windows::UI::Xaml::UIElement TryGetElementCore(hstring const& key, Windows::UI::Xaml::UIElement const& owner)
    {
        Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.TryGetElementCore(key, owner);
        }
        return this->shim().TryGetElementCore(key, owner);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides>
{
    hstring OnSelectTemplateKeyCore(Windows::Foundation::IInspectable const& dataContext, Windows::UI::Xaml::UIElement const& owner)
    {
        Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.OnSelectTemplateKeyCore(dataContext, owner);
        }
        return this->shim().OnSelectTemplateKeyCore(dataContext, owner);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
{
    void InitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.InitializeForContextCore(context);
        }
        return this->shim().InitializeForContextCore(context);
    }
    void UninitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.UninitializeForContextCore(context);
        }
        return this->shim().UninitializeForContextCore(context);
    }
    Windows::Foundation::Size MeasureOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.MeasureOverride(context, availableSize);
        }
        return this->shim().MeasureOverride(context, availableSize);
    }
    Windows::Foundation::Size ArrangeOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.ArrangeOverride(context, finalSize);
        }
        return this->shim().ArrangeOverride(context, finalSize);
    }
    void OnItemsChangedCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::IInspectable const& source, Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& args)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.OnItemsChangedCore(context, source, args);
        }
        return this->shim().OnItemsChangedCore(context, source, args);
    }
};
template <typename T, typename D>
struct WINRT_EBO produce_dispatch_to_overridable<T, D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
    : produce_dispatch_to_overridable_base<T, D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
{
    int32_t ItemCountCore()
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.ItemCountCore();
        }
        return this->shim().ItemCountCore();
    }
    Windows::Foundation::IInspectable GetItemAtCore(int32_t index)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetItemAtCore(index);
        }
        return this->shim().GetItemAtCore(index);
    }
    Windows::Foundation::Rect RealizationRectCore()
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.RealizationRectCore();
        }
        return this->shim().RealizationRectCore();
    }
    Windows::UI::Xaml::UIElement GetElementAtCore(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.GetElementAtCore(index, options);
        }
        return this->shim().GetElementAtCore(index, options);
    }
    void RecycleElementCore(Windows::UI::Xaml::UIElement const& element)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.RecycleElementCore(element);
        }
        return this->shim().RecycleElementCore(element);
    }
    int32_t RecommendedAnchorIndexCore()
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.RecommendedAnchorIndexCore();
        }
        return this->shim().RecommendedAnchorIndexCore();
    }
    Windows::Foundation::Point LayoutOriginCore()
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.LayoutOriginCore();
        }
        return this->shim().LayoutOriginCore();
    }
    void LayoutOriginCore(Windows::Foundation::Point const& value)
    {
        Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides overridable = this->shim_overridable();
        if (overridable)
        {
            return overridable.LayoutOriginCore(value);
        }
        return this->shim().LayoutOriginCore(value);
    }
};
}

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls {

inline AnimatedVisualPlayer::AnimatedVisualPlayer()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::AutoPlayProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.AutoPlayProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::DiagnosticsProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.DiagnosticsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::DurationProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.DurationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::FallbackContentProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.FallbackContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::IsAnimatedVisualLoadedProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.IsAnimatedVisualLoadedProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::IsPlayingProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.IsPlayingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::PlaybackRateProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.PlaybackRateProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::SourceProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.SourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty AnimatedVisualPlayer::StretchProperty()
{
    return impl::call_factory<AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>([&](auto&& f) { return f.StretchProperty(); });
}

inline BitmapIconSource::BitmapIconSource()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<BitmapIconSource, Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty BitmapIconSource::UriSourceProperty()
{
    return impl::call_factory<BitmapIconSource, Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>([&](auto&& f) { return f.UriSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty BitmapIconSource::ShowAsMonochromeProperty()
{
    return impl::call_factory<BitmapIconSource, Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>([&](auto&& f) { return f.ShowAsMonochromeProperty(); });
}

inline ColorPicker::ColorPicker()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::ColorProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.ColorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::PreviousColorProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.PreviousColorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsAlphaEnabledProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsAlphaEnabledProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsColorSpectrumVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsColorSpectrumVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsColorPreviewVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsColorPreviewVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsColorSliderVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsColorSliderVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsAlphaSliderVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsAlphaSliderVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsMoreButtonVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsMoreButtonVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsColorChannelTextInputVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsColorChannelTextInputVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsAlphaTextInputVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsAlphaTextInputVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::IsHexInputVisibleProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.IsHexInputVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::MinHueProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.MinHueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::MaxHueProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.MaxHueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::MinSaturationProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.MinSaturationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::MaxSaturationProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.MaxSaturationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::MinValueProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.MinValueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::MaxValueProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.MaxValueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::ColorSpectrumShapeProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.ColorSpectrumShapeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPicker::ColorSpectrumComponentsProperty()
{
    return impl::call_factory<ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerStatics>([&](auto&& f) { return f.ColorSpectrumComponentsProperty(); });
}

inline CommandBarFlyout::CommandBarFlyout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<CommandBarFlyout, Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline DropDownButton::DropDownButton()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<DropDownButton, Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline ElementAnimator::ElementAnimator()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ElementAnimator, Microsoft::UI::Xaml::Controls::IElementAnimatorFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline ElementFactory::ElementFactory()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ElementFactory, Microsoft::UI::Xaml::Controls::IElementFactoryFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline ElementFactoryGetArgs::ElementFactoryGetArgs() :
    ElementFactoryGetArgs(impl::call_factory<ElementFactoryGetArgs>([](auto&& f) { return f.template ActivateInstance<ElementFactoryGetArgs>(); }))
{}

inline ElementFactoryRecycleArgs::ElementFactoryRecycleArgs() :
    ElementFactoryRecycleArgs(impl::call_factory<ElementFactoryRecycleArgs>([](auto&& f) { return f.template ActivateInstance<ElementFactoryRecycleArgs>(); }))
{}

inline FlowLayout::FlowLayout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<FlowLayout, Microsoft::UI::Xaml::Controls::IFlowLayoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty FlowLayout::OrientationProperty()
{
    return impl::call_factory<FlowLayout, Microsoft::UI::Xaml::Controls::IFlowLayoutStatics>([&](auto&& f) { return f.OrientationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FlowLayout::MinRowSpacingProperty()
{
    return impl::call_factory<FlowLayout, Microsoft::UI::Xaml::Controls::IFlowLayoutStatics>([&](auto&& f) { return f.MinRowSpacingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FlowLayout::MinColumnSpacingProperty()
{
    return impl::call_factory<FlowLayout, Microsoft::UI::Xaml::Controls::IFlowLayoutStatics>([&](auto&& f) { return f.MinColumnSpacingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FlowLayout::LineAlignmentProperty()
{
    return impl::call_factory<FlowLayout, Microsoft::UI::Xaml::Controls::IFlowLayoutStatics>([&](auto&& f) { return f.LineAlignmentProperty(); });
}

inline FlowLayoutState::FlowLayoutState()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<FlowLayoutState, Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline FontIconSource::FontIconSource()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::GlyphProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.GlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::FontSizeProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.FontSizeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::FontFamilyProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.FontFamilyProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::FontWeightProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.FontWeightProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::FontStyleProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.FontStyleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::IsTextScaleFactorEnabledProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.IsTextScaleFactorEnabledProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty FontIconSource::MirroredWhenRightToLeftProperty()
{
    return impl::call_factory<FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>([&](auto&& f) { return f.MirroredWhenRightToLeftProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty IconSource::ForegroundProperty()
{
    return impl::call_factory<IconSource, Microsoft::UI::Xaml::Controls::IIconSourceStatics>([&](auto&& f) { return f.ForegroundProperty(); });
}

inline Microsoft::UI::Xaml::Controls::IndexPath IndexPath::CreateFrom(int32_t index)
{
    return impl::call_factory<IndexPath, Microsoft::UI::Xaml::Controls::IIndexPathStatics>([&](auto&& f) { return f.CreateFrom(index); });
}

inline Microsoft::UI::Xaml::Controls::IndexPath IndexPath::CreateFrom(int32_t groupIndex, int32_t itemIndex)
{
    return impl::call_factory<IndexPath, Microsoft::UI::Xaml::Controls::IIndexPathStatics>([&](auto&& f) { return f.CreateFrom(groupIndex, itemIndex); });
}

inline Microsoft::UI::Xaml::Controls::IndexPath IndexPath::CreateFromIndices(param::vector<int32_t> const& indices)
{
    return impl::call_factory<IndexPath, Microsoft::UI::Xaml::Controls::IIndexPathStatics>([&](auto&& f) { return f.CreateFromIndices(indices); });
}

inline ItemsRepeater::ItemsRepeater()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::ItemsSourceProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.ItemsSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::ItemTemplateProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.ItemTemplateProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::LayoutProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.LayoutProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::AnimatorProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.AnimatorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::HorizontalCacheLengthProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.HorizontalCacheLengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::VerticalCacheLengthProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.VerticalCacheLengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ItemsRepeater::BackgroundProperty()
{
    return impl::call_factory<ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>([&](auto&& f) { return f.BackgroundProperty(); });
}

inline ItemsSourceView::ItemsSourceView(Windows::Foundation::IInspectable const& source)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ItemsSourceView, Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>([&](auto&& f) { return f.CreateInstance(source, baseInterface, innerInterface); });
}

inline LayoutPanel::LayoutPanel()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty LayoutPanel::LayoutProperty()
{
    return impl::call_factory<LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics>([&](auto&& f) { return f.LayoutProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty LayoutPanel::BorderBrushProperty()
{
    return impl::call_factory<LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics>([&](auto&& f) { return f.BorderBrushProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty LayoutPanel::BorderThicknessProperty()
{
    return impl::call_factory<LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics>([&](auto&& f) { return f.BorderThicknessProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty LayoutPanel::PaddingProperty()
{
    return impl::call_factory<LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics>([&](auto&& f) { return f.PaddingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty LayoutPanel::CornerRadiusProperty()
{
    return impl::call_factory<LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelStatics>([&](auto&& f) { return f.CornerRadiusProperty(); });
}

inline MenuBar::MenuBar()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<MenuBar, Microsoft::UI::Xaml::Controls::IMenuBarFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty MenuBar::ItemsProperty()
{
    return impl::call_factory<MenuBar, Microsoft::UI::Xaml::Controls::IMenuBarStatics>([&](auto&& f) { return f.ItemsProperty(); });
}

inline MenuBarItem::MenuBarItem()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<MenuBarItem, Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty MenuBarItem::TitleProperty()
{
    return impl::call_factory<MenuBarItem, Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>([&](auto&& f) { return f.TitleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty MenuBarItem::ItemsProperty()
{
    return impl::call_factory<MenuBarItem, Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>([&](auto&& f) { return f.ItemsProperty(); });
}

inline MenuBarItemFlyout::MenuBarItemFlyout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<MenuBarItemFlyout, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline NavigationView::NavigationView()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::IsPaneOpenProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.IsPaneOpenProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::CompactModeThresholdWidthProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.CompactModeThresholdWidthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::ExpandedModeThresholdWidthProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.ExpandedModeThresholdWidthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::PaneFooterProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.PaneFooterProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::HeaderProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.HeaderProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::HeaderTemplateProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.HeaderTemplateProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::DisplayModeProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.DisplayModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::IsSettingsVisibleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.IsSettingsVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::IsPaneToggleButtonVisibleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.IsPaneToggleButtonVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::AlwaysShowHeaderProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.AlwaysShowHeaderProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::CompactPaneLengthProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.CompactPaneLengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::OpenPaneLengthProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.OpenPaneLengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::PaneToggleButtonStyleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.PaneToggleButtonStyleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::MenuItemsProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.MenuItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::MenuItemsSourceProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.MenuItemsSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::SelectedItemProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.SelectedItemProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::SettingsItemProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.SettingsItemProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::AutoSuggestBoxProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.AutoSuggestBoxProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::MenuItemTemplateProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.MenuItemTemplateProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::MenuItemTemplateSelectorProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.MenuItemTemplateSelectorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::MenuItemContainerStyleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.MenuItemContainerStyleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::MenuItemContainerStyleSelectorProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.MenuItemContainerStyleSelectorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::IsBackButtonVisibleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.IsBackButtonVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::IsBackEnabledProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.IsBackEnabledProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::PaneTitleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.PaneTitleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::PaneDisplayModeProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.PaneDisplayModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::PaneHeaderProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.PaneHeaderProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::PaneCustomContentProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.PaneCustomContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::ContentOverlayProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.ContentOverlayProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::IsPaneVisibleProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.IsPaneVisibleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::SelectionFollowsFocusProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.SelectionFollowsFocusProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::TemplateSettingsProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.TemplateSettingsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::ShoulderNavigationEnabledProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.ShoulderNavigationEnabledProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationView::OverflowLabelModeProperty()
{
    return impl::call_factory<NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewStatics>([&](auto&& f) { return f.OverflowLabelModeProperty(); });
}

inline NavigationViewItem::NavigationViewItem()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewItem, Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewItem::IconProperty()
{
    return impl::call_factory<NavigationViewItem, Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>([&](auto&& f) { return f.IconProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewItem::CompactPaneLengthProperty()
{
    return impl::call_factory<NavigationViewItem, Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>([&](auto&& f) { return f.CompactPaneLengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewItem::SelectsOnInvokedProperty()
{
    return impl::call_factory<NavigationViewItem, Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>([&](auto&& f) { return f.SelectsOnInvokedProperty(); });
}

inline NavigationViewItemHeader::NavigationViewItemHeader()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewItemHeader, Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline NavigationViewItemInvokedEventArgs::NavigationViewItemInvokedEventArgs() :
    NavigationViewItemInvokedEventArgs(impl::call_factory<NavigationViewItemInvokedEventArgs>([](auto&& f) { return f.template ActivateInstance<NavigationViewItemInvokedEventArgs>(); }))
{}

inline NavigationViewItemSeparator::NavigationViewItemSeparator()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewItemSeparator, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline NavigationViewList::NavigationViewList()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewList, Microsoft::UI::Xaml::Controls::INavigationViewListFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline NavigationViewTemplateSettings::NavigationViewTemplateSettings()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::TopPaddingProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.TopPaddingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::OverflowButtonVisibilityProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.OverflowButtonVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::PaneToggleButtonVisibilityProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.PaneToggleButtonVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::BackButtonVisibilityProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.BackButtonVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::TopPaneVisibilityProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.TopPaneVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::LeftPaneVisibilityProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.LeftPaneVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewTemplateSettings::SingleSelectionFollowsFocusProperty()
{
    return impl::call_factory<NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>([&](auto&& f) { return f.SingleSelectionFollowsFocusProperty(); });
}

inline NonVirtualizingLayout::NonVirtualizingLayout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NonVirtualizingLayout, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline NonVirtualizingLayoutContext::NonVirtualizingLayoutContext()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NonVirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline ParallaxView::ParallaxView()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::ChildProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.ChildProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::HorizontalSourceEndOffsetProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.HorizontalSourceEndOffsetProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::HorizontalSourceOffsetKindProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.HorizontalSourceOffsetKindProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::HorizontalSourceStartOffsetProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.HorizontalSourceStartOffsetProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::MaxHorizontalShiftRatioProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.MaxHorizontalShiftRatioProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::HorizontalShiftProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.HorizontalShiftProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::IsHorizontalShiftClampedProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.IsHorizontalShiftClampedProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::IsVerticalShiftClampedProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.IsVerticalShiftClampedProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::SourceProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.SourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::VerticalSourceEndOffsetProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.VerticalSourceEndOffsetProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::VerticalSourceOffsetKindProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.VerticalSourceOffsetKindProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::VerticalSourceStartOffsetProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.VerticalSourceStartOffsetProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::MaxVerticalShiftRatioProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.MaxVerticalShiftRatioProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ParallaxView::VerticalShiftProperty()
{
    return impl::call_factory<ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewStatics>([&](auto&& f) { return f.VerticalShiftProperty(); });
}

inline PathIconSource::PathIconSource()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<PathIconSource, Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty PathIconSource::DataProperty()
{
    return impl::call_factory<PathIconSource, Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>([&](auto&& f) { return f.DataProperty(); });
}

inline PersonPicture::PersonPicture()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::BadgeNumberProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.BadgeNumberProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::BadgeGlyphProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.BadgeGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::BadgeImageSourceProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.BadgeImageSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::BadgeTextProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.BadgeTextProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::IsGroupProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.IsGroupProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::ContactProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.ContactProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::DisplayNameProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.DisplayNameProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::InitialsProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.InitialsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::PreferSmallImageProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.PreferSmallImageProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty PersonPicture::ProfilePictureProperty()
{
    return impl::call_factory<PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureStatics>([&](auto&& f) { return f.ProfilePictureProperty(); });
}

inline RadioButtons::RadioButtons()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::ItemsSourceProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.ItemsSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::ItemsProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.ItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::ItemTemplateProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.ItemTemplateProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::SelectedIndexProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.SelectedIndexProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::SelectedItemProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.SelectedItemProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::MaximumColumnsProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.MaximumColumnsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioButtons::HeaderProperty()
{
    return impl::call_factory<RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>([&](auto&& f) { return f.HeaderProperty(); });
}

inline RadioMenuFlyoutItem::RadioMenuFlyoutItem()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RadioMenuFlyoutItem, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RadioMenuFlyoutItem::IsCheckedProperty()
{
    return impl::call_factory<RadioMenuFlyoutItem, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>([&](auto&& f) { return f.IsCheckedProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RadioMenuFlyoutItem::GroupNameProperty()
{
    return impl::call_factory<RadioMenuFlyoutItem, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>([&](auto&& f) { return f.GroupNameProperty(); });
}

inline RatingControl::RatingControl()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::CaptionProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.CaptionProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::InitialSetValueProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.InitialSetValueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::IsClearEnabledProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.IsClearEnabledProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::IsReadOnlyProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.IsReadOnlyProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::MaxRatingProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.MaxRatingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::PlaceholderValueProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.PlaceholderValueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::ItemInfoProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.ItemInfoProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingControl::ValueProperty()
{
    return impl::call_factory<RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlStatics>([&](auto&& f) { return f.ValueProperty(); });
}

inline RatingItemFontInfo::RatingItemFontInfo()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemFontInfo::DisabledGlyphProperty()
{
    return impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>([&](auto&& f) { return f.DisabledGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemFontInfo::GlyphProperty()
{
    return impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>([&](auto&& f) { return f.GlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemFontInfo::PlaceholderGlyphProperty()
{
    return impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>([&](auto&& f) { return f.PlaceholderGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemFontInfo::PointerOverGlyphProperty()
{
    return impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>([&](auto&& f) { return f.PointerOverGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemFontInfo::PointerOverPlaceholderGlyphProperty()
{
    return impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>([&](auto&& f) { return f.PointerOverPlaceholderGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemFontInfo::UnsetGlyphProperty()
{
    return impl::call_factory<RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>([&](auto&& f) { return f.UnsetGlyphProperty(); });
}

inline RatingItemImageInfo::RatingItemImageInfo()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemImageInfo::DisabledImageProperty()
{
    return impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>([&](auto&& f) { return f.DisabledImageProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemImageInfo::ImageProperty()
{
    return impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>([&](auto&& f) { return f.ImageProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemImageInfo::PlaceholderImageProperty()
{
    return impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>([&](auto&& f) { return f.PlaceholderImageProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemImageInfo::PointerOverImageProperty()
{
    return impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>([&](auto&& f) { return f.PointerOverImageProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemImageInfo::PointerOverPlaceholderImageProperty()
{
    return impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>([&](auto&& f) { return f.PointerOverPlaceholderImageProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RatingItemImageInfo::UnsetImageProperty()
{
    return impl::call_factory<RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>([&](auto&& f) { return f.UnsetImageProperty(); });
}

inline RatingItemInfo::RatingItemInfo()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RatingItemInfo, Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline RecyclePool::RecyclePool()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RecyclePool, Microsoft::UI::Xaml::Controls::IRecyclePoolFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RecyclePool::PoolInstanceProperty()
{
    return impl::call_factory<RecyclePool, Microsoft::UI::Xaml::Controls::IRecyclePoolStatics>([&](auto&& f) { return f.PoolInstanceProperty(); });
}

inline Microsoft::UI::Xaml::Controls::RecyclePool RecyclePool::GetPoolInstance(Windows::UI::Xaml::DataTemplate const& dataTemplate)
{
    return impl::call_factory<RecyclePool, Microsoft::UI::Xaml::Controls::IRecyclePoolStatics>([&](auto&& f) { return f.GetPoolInstance(dataTemplate); });
}

inline void RecyclePool::SetPoolInstance(Windows::UI::Xaml::DataTemplate const& dataTemplate, Microsoft::UI::Xaml::Controls::RecyclePool const& value)
{
    impl::call_factory<RecyclePool, Microsoft::UI::Xaml::Controls::IRecyclePoolStatics>([&](auto&& f) { return f.SetPoolInstance(dataTemplate, value); });
}

inline RecyclingElementFactory::RecyclingElementFactory()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RecyclingElementFactory, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline RefreshContainer::RefreshContainer()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RefreshContainer, Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RefreshContainer::VisualizerProperty()
{
    return impl::call_factory<RefreshContainer, Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>([&](auto&& f) { return f.VisualizerProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RefreshContainer::PullDirectionProperty()
{
    return impl::call_factory<RefreshContainer, Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>([&](auto&& f) { return f.PullDirectionProperty(); });
}

inline RefreshVisualizer::RefreshVisualizer()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RefreshVisualizer, Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty RefreshVisualizer::InfoProviderProperty()
{
    return impl::call_factory<RefreshVisualizer, Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>([&](auto&& f) { return f.InfoProviderProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RefreshVisualizer::OrientationProperty()
{
    return impl::call_factory<RefreshVisualizer, Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>([&](auto&& f) { return f.OrientationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RefreshVisualizer::ContentProperty()
{
    return impl::call_factory<RefreshVisualizer, Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>([&](auto&& f) { return f.ContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty RefreshVisualizer::StateProperty()
{
    return impl::call_factory<RefreshVisualizer, Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>([&](auto&& f) { return f.StateProperty(); });
}

inline RevealListViewItemPresenter::RevealListViewItemPresenter()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RevealListViewItemPresenter, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline ScrollAnchorProvider::ScrollAnchorProvider() :
    ScrollAnchorProvider(impl::call_factory<ScrollAnchorProvider>([](auto&& f) { return f.template ActivateInstance<ScrollAnchorProvider>(); }))
{}

inline ScrollOptions::ScrollOptions(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ScrollOptions, Microsoft::UI::Xaml::Controls::IScrollOptionsFactory>([&](auto&& f) { return f.CreateInstance(animationMode, baseInterface, innerInterface); });
}

inline ScrollOptions::ScrollOptions(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode const& snapPointsMode)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ScrollOptions, Microsoft::UI::Xaml::Controls::IScrollOptionsFactory>([&](auto&& f) { return f.CreateInstance2(animationMode, snapPointsMode, baseInterface, innerInterface); });
}

inline ScrollViewer::ScrollViewer()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ContentProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ScrollerProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ScrollerProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollControllerProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.HorizontalScrollControllerProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollControllerProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.VerticalScrollControllerProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollBarVisibilityProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.HorizontalScrollBarVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollBarVisibilityProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.VerticalScrollBarVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ContentOrientationProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ContentOrientationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollChainingModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.HorizontalScrollChainingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollChainingModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.VerticalScrollChainingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollRailingModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.HorizontalScrollRailingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollRailingModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.VerticalScrollRailingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.HorizontalScrollModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.VerticalScrollModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ComputedHorizontalScrollBarVisibilityProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ComputedHorizontalScrollBarVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ComputedVerticalScrollBarVisibilityProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ComputedVerticalScrollBarVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomChainingModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ZoomChainingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomModeProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.ZoomModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IgnoredInputKindProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.IgnoredInputKindProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::MinZoomFactorProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.MinZoomFactorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::MaxZoomFactorProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.MaxZoomFactorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalAnchorRatioProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.HorizontalAnchorRatioProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalAnchorRatioProperty()
{
    return impl::call_factory<ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerStatics>([&](auto&& f) { return f.VerticalAnchorRatioProperty(); });
}

inline SelectionModel::SelectionModel()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<SelectionModel, Microsoft::UI::Xaml::Controls::ISelectionModelFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline SplitButton::SplitButton()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<SplitButton, Microsoft::UI::Xaml::Controls::ISplitButtonFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty SplitButton::FlyoutProperty()
{
    return impl::call_factory<SplitButton, Microsoft::UI::Xaml::Controls::ISplitButtonStatics>([&](auto&& f) { return f.FlyoutProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SplitButton::CommandProperty()
{
    return impl::call_factory<SplitButton, Microsoft::UI::Xaml::Controls::ISplitButtonStatics>([&](auto&& f) { return f.CommandProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SplitButton::CommandParameterProperty()
{
    return impl::call_factory<SplitButton, Microsoft::UI::Xaml::Controls::ISplitButtonStatics>([&](auto&& f) { return f.CommandParameterProperty(); });
}

inline StackLayout::StackLayout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<StackLayout, Microsoft::UI::Xaml::Controls::IStackLayoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty StackLayout::OrientationProperty()
{
    return impl::call_factory<StackLayout, Microsoft::UI::Xaml::Controls::IStackLayoutStatics>([&](auto&& f) { return f.OrientationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty StackLayout::SpacingProperty()
{
    return impl::call_factory<StackLayout, Microsoft::UI::Xaml::Controls::IStackLayoutStatics>([&](auto&& f) { return f.SpacingProperty(); });
}

inline StackLayoutState::StackLayoutState()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<StackLayoutState, Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline SwipeControl::SwipeControl()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<SwipeControl, Microsoft::UI::Xaml::Controls::ISwipeControlFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeControl::LeftItemsProperty()
{
    return impl::call_factory<SwipeControl, Microsoft::UI::Xaml::Controls::ISwipeControlStatics>([&](auto&& f) { return f.LeftItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeControl::RightItemsProperty()
{
    return impl::call_factory<SwipeControl, Microsoft::UI::Xaml::Controls::ISwipeControlStatics>([&](auto&& f) { return f.RightItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeControl::TopItemsProperty()
{
    return impl::call_factory<SwipeControl, Microsoft::UI::Xaml::Controls::ISwipeControlStatics>([&](auto&& f) { return f.TopItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeControl::BottomItemsProperty()
{
    return impl::call_factory<SwipeControl, Microsoft::UI::Xaml::Controls::ISwipeControlStatics>([&](auto&& f) { return f.BottomItemsProperty(); });
}

inline SwipeItem::SwipeItem()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::IconSourceProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.IconSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::TextProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.TextProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::BackgroundProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.BackgroundProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::ForegroundProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.ForegroundProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::CommandProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.CommandProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::CommandParameterProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.CommandParameterProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItem::BehaviorOnInvokedProperty()
{
    return impl::call_factory<SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemStatics>([&](auto&& f) { return f.BehaviorOnInvokedProperty(); });
}

inline SwipeItems::SwipeItems()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<SwipeItems, Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty SwipeItems::ModeProperty()
{
    return impl::call_factory<SwipeItems, Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>([&](auto&& f) { return f.ModeProperty(); });
}

inline SymbolIconSource::SymbolIconSource()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<SymbolIconSource, Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty SymbolIconSource::SymbolProperty()
{
    return impl::call_factory<SymbolIconSource, Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>([&](auto&& f) { return f.SymbolProperty(); });
}

inline TeachingTip::TeachingTip()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::IsOpenProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.IsOpenProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::TargetProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.TargetProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::TailVisibilityProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.TailVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::TitleProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.TitleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::SubtitleProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.SubtitleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::ActionButtonContentProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.ActionButtonContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::ActionButtonStyleProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.ActionButtonStyleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::ActionButtonCommandProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.ActionButtonCommandProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::ActionButtonCommandParameterProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.ActionButtonCommandParameterProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::CloseButtonContentProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.CloseButtonContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::CloseButtonStyleProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.CloseButtonStyleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::CloseButtonCommandProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.CloseButtonCommandProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::CloseButtonCommandParameterProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.CloseButtonCommandParameterProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::PlacementMarginProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.PlacementMarginProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::IsLightDismissEnabledProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.IsLightDismissEnabledProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::PreferredPlacementProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.PreferredPlacementProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::HeroContentPlacementProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.HeroContentPlacementProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::HeroContentProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.HeroContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::IconSourceProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.IconSourceProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTip::TemplateSettingsProperty()
{
    return impl::call_factory<TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipStatics>([&](auto&& f) { return f.TemplateSettingsProperty(); });
}

inline TeachingTipTemplateSettings::TeachingTipTemplateSettings()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TeachingTipTemplateSettings, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTipTemplateSettings::TopRightHighlightMarginProperty()
{
    return impl::call_factory<TeachingTipTemplateSettings, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>([&](auto&& f) { return f.TopRightHighlightMarginProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTipTemplateSettings::TopLeftHighlightMarginProperty()
{
    return impl::call_factory<TeachingTipTemplateSettings, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>([&](auto&& f) { return f.TopLeftHighlightMarginProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TeachingTipTemplateSettings::IconElementProperty()
{
    return impl::call_factory<TeachingTipTemplateSettings, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>([&](auto&& f) { return f.IconElementProperty(); });
}

inline TextCommandBarFlyout::TextCommandBarFlyout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TextCommandBarFlyout, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline ToggleSplitButton::ToggleSplitButton()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ToggleSplitButton, Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline TreeView::TreeView()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::SelectionModeProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.SelectionModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::CanDragItemsProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.CanDragItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::CanReorderItemsProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.CanReorderItemsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::ItemTemplateProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.ItemTemplateProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::ItemTemplateSelectorProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.ItemTemplateSelectorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::ItemContainerStyleProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.ItemContainerStyleProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::ItemContainerStyleSelectorProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.ItemContainerStyleSelectorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::ItemContainerTransitionsProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.ItemContainerTransitionsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeView::ItemsSourceProperty()
{
    return impl::call_factory<TreeView, Microsoft::UI::Xaml::Controls::ITreeViewStatics>([&](auto&& f) { return f.ItemsSourceProperty(); });
}

inline TreeViewItem::TreeViewItem()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::GlyphOpacityProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.GlyphOpacityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::GlyphBrushProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.GlyphBrushProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::ExpandedGlyphProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.ExpandedGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::CollapsedGlyphProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.CollapsedGlyphProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::GlyphSizeProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.GlyphSizeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::IsExpandedProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.IsExpandedProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::TreeViewItemTemplateSettingsProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.TreeViewItemTemplateSettingsProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::HasUnrealizedChildrenProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.HasUnrealizedChildrenProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItem::ItemsSourceProperty()
{
    return impl::call_factory<TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>([&](auto&& f) { return f.ItemsSourceProperty(); });
}

inline TreeViewItemTemplateSettings::TreeViewItemTemplateSettings()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeViewItemTemplateSettings, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItemTemplateSettings::ExpandedGlyphVisibilityProperty()
{
    return impl::call_factory<TreeViewItemTemplateSettings, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>([&](auto&& f) { return f.ExpandedGlyphVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItemTemplateSettings::CollapsedGlyphVisibilityProperty()
{
    return impl::call_factory<TreeViewItemTemplateSettings, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>([&](auto&& f) { return f.CollapsedGlyphVisibilityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItemTemplateSettings::IndentationProperty()
{
    return impl::call_factory<TreeViewItemTemplateSettings, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>([&](auto&& f) { return f.IndentationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewItemTemplateSettings::DragItemsCountProperty()
{
    return impl::call_factory<TreeViewItemTemplateSettings, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>([&](auto&& f) { return f.DragItemsCountProperty(); });
}

inline TreeViewList::TreeViewList()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeViewList, Microsoft::UI::Xaml::Controls::ITreeViewListFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline TreeViewNode::TreeViewNode()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TreeViewNode, Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewNode::ContentProperty()
{
    return impl::call_factory<TreeViewNode, Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>([&](auto&& f) { return f.ContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewNode::DepthProperty()
{
    return impl::call_factory<TreeViewNode, Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>([&](auto&& f) { return f.DepthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewNode::IsExpandedProperty()
{
    return impl::call_factory<TreeViewNode, Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>([&](auto&& f) { return f.IsExpandedProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TreeViewNode::HasChildrenProperty()
{
    return impl::call_factory<TreeViewNode, Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>([&](auto&& f) { return f.HasChildrenProperty(); });
}

inline TwoPaneView::TwoPaneView()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::Pane1Property()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.Pane1Property(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::Pane2Property()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.Pane2Property(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::Pane1LengthProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.Pane1LengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::Pane2LengthProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.Pane2LengthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::PanePriorityProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.PanePriorityProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::ModeProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.ModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::WideModeConfigurationProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.WideModeConfigurationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::TallModeConfigurationProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.TallModeConfigurationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::MinWideModeWidthProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.MinWideModeWidthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty TwoPaneView::MinTallModeHeightProperty()
{
    return impl::call_factory<TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>([&](auto&& f) { return f.MinTallModeHeightProperty(); });
}

inline UniformGridLayout::UniformGridLayout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::OrientationProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.OrientationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::MinItemWidthProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.MinItemWidthProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::MinItemHeightProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.MinItemHeightProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::MinRowSpacingProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.MinRowSpacingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::MinColumnSpacingProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.MinColumnSpacingProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::ItemsJustificationProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.ItemsJustificationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty UniformGridLayout::ItemsStretchProperty()
{
    return impl::call_factory<UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>([&](auto&& f) { return f.ItemsStretchProperty(); });
}

inline UniformGridLayoutState::UniformGridLayoutState()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<UniformGridLayoutState, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline VirtualizingLayout::VirtualizingLayout()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<VirtualizingLayout, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline VirtualizingLayoutContext::VirtualizingLayoutContext()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<VirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline XamlControlsResources::XamlControlsResources() :
    XamlControlsResources(impl::call_factory<XamlControlsResources>([](auto&& f) { return f.template ActivateInstance<XamlControlsResources>(); }))
{}

inline void XamlControlsResources::EnsureRevealLights(Windows::UI::Xaml::UIElement const& element)
{
    impl::call_factory<XamlControlsResources, Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>([&](auto&& f) { return f.EnsureRevealLights(element); });
}

inline ZoomOptions::ZoomOptions(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ZoomOptions, Microsoft::UI::Xaml::Controls::IZoomOptionsFactory>([&](auto&& f) { return f.CreateInstance(animationMode, baseInterface, innerInterface); });
}

inline ZoomOptions::ZoomOptions(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode const& snapPointsMode)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ZoomOptions, Microsoft::UI::Xaml::Controls::IZoomOptionsFactory>([&](auto&& f) { return f.CreateInstance2(animationMode, snapPointsMode, baseInterface, innerInterface); });
}

template <typename L> ElementAnimationCompleted::ElementAnimationCompleted(L handler) :
    ElementAnimationCompleted(impl::make_delegate<ElementAnimationCompleted>(std::forward<L>(handler)))
{}

template <typename F> ElementAnimationCompleted::ElementAnimationCompleted(F* handler) :
    ElementAnimationCompleted([=](auto&&... args) { return handler(args...); })
{}

template <typename O, typename M> ElementAnimationCompleted::ElementAnimationCompleted(O* object, M method) :
    ElementAnimationCompleted([=](auto&&... args) { return ((*object).*(method))(args...); })
{}

template <typename O, typename M> ElementAnimationCompleted::ElementAnimationCompleted(com_ptr<O>&& object, M method) :
    ElementAnimationCompleted([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
{}

template <typename O, typename M> ElementAnimationCompleted::ElementAnimationCompleted(weak_ref<O>&& object, M method) :
    ElementAnimationCompleted([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
{}

inline void ElementAnimationCompleted::operator()(Microsoft::UI::Xaml::Controls::ElementAnimator const& sender, Windows::UI::Xaml::UIElement const& element) const
{
    check_hresult((*(impl::abi_t<ElementAnimationCompleted>**)this)->Invoke(get_abi(sender), get_abi(element)));
}

template <typename D> bool IElementAnimatorOverridesT<D>::HasShowAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    return shim().template try_as<IElementAnimatorOverrides>().HasShowAnimationCore(element, context);
}

template <typename D> bool IElementAnimatorOverridesT<D>::HasHideAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    return shim().template try_as<IElementAnimatorOverrides>().HasHideAnimationCore(element, context);
}

template <typename D> bool IElementAnimatorOverridesT<D>::HasBoundsChangeAnimationCore(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds) const
{
    return shim().template try_as<IElementAnimatorOverrides>().HasBoundsChangeAnimationCore(element, context, oldBounds, newBounds);
}

template <typename D> void IElementAnimatorOverridesT<D>::StartShowAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    return shim().template try_as<IElementAnimatorOverrides>().StartShowAnimation(element, context);
}

template <typename D> void IElementAnimatorOverridesT<D>::StartHideAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context) const
{
    return shim().template try_as<IElementAnimatorOverrides>().StartHideAnimation(element, context);
}

template <typename D> void IElementAnimatorOverridesT<D>::StartBoundsChangeAnimation(Windows::UI::Xaml::UIElement const& element, Microsoft::UI::Xaml::Controls::AnimationContext const& context, Windows::Foundation::Rect const& oldBounds, Windows::Foundation::Rect const& newBounds) const
{
    return shim().template try_as<IElementAnimatorOverrides>().StartBoundsChangeAnimation(element, context, oldBounds, newBounds);
}

template <typename D> Windows::UI::Xaml::UIElement IElementFactoryOverridesT<D>::GetElementCore(Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs const& args) const
{
    return shim().template try_as<IElementFactoryOverrides>().GetElementCore(args);
}

template <typename D> void IElementFactoryOverridesT<D>::RecycleElementCore(Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs const& args) const
{
    return shim().template try_as<IElementFactoryOverrides>().RecycleElementCore(args);
}

template <typename D> Windows::Foundation::Size IFlowLayoutOverridesT<D>::GetMeasureSize(int32_t index, Windows::Foundation::Size const& availableSize) const
{
    return shim().template try_as<IFlowLayoutOverrides>().GetMeasureSize(index, availableSize);
}

template <typename D> Windows::Foundation::Size IFlowLayoutOverridesT<D>::GetProvisionalArrangeSize(int32_t index, Windows::Foundation::Size const& measureSize, Windows::Foundation::Size const& desiredSize) const
{
    return shim().template try_as<IFlowLayoutOverrides>().GetProvisionalArrangeSize(index, measureSize, desiredSize);
}

template <typename D> bool IFlowLayoutOverridesT<D>::ShouldBreakLine(int32_t index, double remainingSpace) const
{
    return shim().template try_as<IFlowLayoutOverrides>().ShouldBreakLine(index, remainingSpace);
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo IFlowLayoutOverridesT<D>::GetAnchorForRealizationRect(Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    return shim().template try_as<IFlowLayoutOverrides>().GetAnchorForRealizationRect(availableSize, context);
}

template <typename D> Microsoft::UI::Xaml::Controls::FlowLayoutAnchorInfo IFlowLayoutOverridesT<D>::GetAnchorForTargetElement(int32_t targetIndex, Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    return shim().template try_as<IFlowLayoutOverrides>().GetAnchorForTargetElement(targetIndex, availableSize, context);
}

template <typename D> Windows::Foundation::Rect IFlowLayoutOverridesT<D>::GetExtent(Windows::Foundation::Size const& availableSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::UI::Xaml::UIElement const& firstRealized, int32_t firstRealizedItemIndex, Windows::Foundation::Rect const& firstRealizedLayoutBounds, Windows::UI::Xaml::UIElement const& lastRealized, int32_t lastRealizedItemIndex, Windows::Foundation::Rect const& lastRealizedLayoutBounds) const
{
    return shim().template try_as<IFlowLayoutOverrides>().GetExtent(availableSize, context, firstRealized, firstRealizedItemIndex, firstRealizedLayoutBounds, lastRealized, lastRealizedItemIndex, lastRealizedLayoutBounds);
}

template <typename D> void IFlowLayoutOverridesT<D>::OnElementMeasured(Windows::UI::Xaml::UIElement const& element, int32_t index, Windows::Foundation::Size const& availableSize, Windows::Foundation::Size const& measureSize, Windows::Foundation::Size const& desiredSize, Windows::Foundation::Size const& provisionalArrangeSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    return shim().template try_as<IFlowLayoutOverrides>().OnElementMeasured(element, index, availableSize, measureSize, desiredSize, provisionalArrangeSize, context);
}

template <typename D> void IFlowLayoutOverridesT<D>::OnLineArranged(int32_t startIndex, int32_t countInLine, double lineSize, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    return shim().template try_as<IFlowLayoutOverrides>().OnLineArranged(startIndex, countInLine, lineSize, context);
}

template <typename D> Windows::Foundation::IInspectable ILayoutContextOverridesT<D>::LayoutStateCore() const
{
    return shim().template try_as<ILayoutContextOverrides>().LayoutStateCore();
}

template <typename D> void ILayoutContextOverridesT<D>::LayoutStateCore(Windows::Foundation::IInspectable const& value) const
{
    return shim().template try_as<ILayoutContextOverrides>().LayoutStateCore(value);
}

template <typename D> void INonVirtualizingLayoutOverridesT<D>::InitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const
{
    return shim().template try_as<INonVirtualizingLayoutOverrides>().InitializeForContextCore(context);
}

template <typename D> void INonVirtualizingLayoutOverridesT<D>::UninitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const
{
    return shim().template try_as<INonVirtualizingLayoutOverrides>().UninitializeForContextCore(context);
}

template <typename D> Windows::Foundation::Size INonVirtualizingLayoutOverridesT<D>::MeasureOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize) const
{
    return shim().template try_as<INonVirtualizingLayoutOverrides>().MeasureOverride(context, availableSize);
}

template <typename D> Windows::Foundation::Size INonVirtualizingLayoutOverridesT<D>::ArrangeOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize) const
{
    return shim().template try_as<INonVirtualizingLayoutOverrides>().ArrangeOverride(context, finalSize);
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement> INonVirtualizingLayoutContextOverridesT<D>::ChildrenCore() const
{
    return shim().template try_as<INonVirtualizingLayoutContextOverrides>().ChildrenCore();
}

template <typename D> void IRecyclePoolOverridesT<D>::PutElementCore(Windows::UI::Xaml::UIElement const& element, param::hstring const& key, Windows::UI::Xaml::UIElement const& owner) const
{
    return shim().template try_as<IRecyclePoolOverrides>().PutElementCore(element, key, owner);
}

template <typename D> Windows::UI::Xaml::UIElement IRecyclePoolOverridesT<D>::TryGetElementCore(param::hstring const& key, Windows::UI::Xaml::UIElement const& owner) const
{
    return shim().template try_as<IRecyclePoolOverrides>().TryGetElementCore(key, owner);
}

template <typename D> hstring IRecyclingElementFactoryOverridesT<D>::OnSelectTemplateKeyCore(Windows::Foundation::IInspectable const& dataContext, Windows::UI::Xaml::UIElement const& owner) const
{
    return shim().template try_as<IRecyclingElementFactoryOverrides>().OnSelectTemplateKeyCore(dataContext, owner);
}

template <typename D> void IVirtualizingLayoutOverridesT<D>::InitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    return shim().template try_as<IVirtualizingLayoutOverrides>().InitializeForContextCore(context);
}

template <typename D> void IVirtualizingLayoutOverridesT<D>::UninitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const
{
    return shim().template try_as<IVirtualizingLayoutOverrides>().UninitializeForContextCore(context);
}

template <typename D> Windows::Foundation::Size IVirtualizingLayoutOverridesT<D>::MeasureOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize) const
{
    return shim().template try_as<IVirtualizingLayoutOverrides>().MeasureOverride(context, availableSize);
}

template <typename D> Windows::Foundation::Size IVirtualizingLayoutOverridesT<D>::ArrangeOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize) const
{
    return shim().template try_as<IVirtualizingLayoutOverrides>().ArrangeOverride(context, finalSize);
}

template <typename D> void IVirtualizingLayoutOverridesT<D>::OnItemsChangedCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::IInspectable const& source, Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& args) const
{
    return shim().template try_as<IVirtualizingLayoutOverrides>().OnItemsChangedCore(context, source, args);
}

template <typename D> int32_t IVirtualizingLayoutContextOverridesT<D>::ItemCountCore() const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().ItemCountCore();
}

template <typename D> Windows::Foundation::IInspectable IVirtualizingLayoutContextOverridesT<D>::GetItemAtCore(int32_t index) const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().GetItemAtCore(index);
}

template <typename D> Windows::Foundation::Rect IVirtualizingLayoutContextOverridesT<D>::RealizationRectCore() const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().RealizationRectCore();
}

template <typename D> Windows::UI::Xaml::UIElement IVirtualizingLayoutContextOverridesT<D>::GetElementAtCore(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().GetElementAtCore(index, options);
}

template <typename D> void IVirtualizingLayoutContextOverridesT<D>::RecycleElementCore(Windows::UI::Xaml::UIElement const& element) const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().RecycleElementCore(element);
}

template <typename D> int32_t IVirtualizingLayoutContextOverridesT<D>::RecommendedAnchorIndexCore() const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().RecommendedAnchorIndexCore();
}

template <typename D> Windows::Foundation::Point IVirtualizingLayoutContextOverridesT<D>::LayoutOriginCore() const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().LayoutOriginCore();
}

template <typename D> void IVirtualizingLayoutContextOverridesT<D>::LayoutOriginCore(Windows::Foundation::Point const& value) const
{
    return shim().template try_as<IVirtualizingLayoutContextOverrides>().LayoutOriginCore(value);
}

template <typename D, typename... Interfaces>
struct AnimatedVisualPlayerT :
    implements<D, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = AnimatedVisualPlayer;

protected:
    AnimatedVisualPlayerT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer, Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct BitmapIconSourceT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IBitmapIconSource, Microsoft::UI::Xaml::Controls::IIconSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::BitmapIconSource, Microsoft::UI::Xaml::Controls::IconSource, Windows::UI::Xaml::DependencyObject>
{
    using composable = BitmapIconSource;

protected:
    BitmapIconSourceT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::BitmapIconSource, Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ColorPickerT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IColorPicker, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ColorPicker, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ColorPicker;

protected:
    ColorPickerT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::IColorPickerFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct CommandBarFlyoutT :
    implements<D, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides4, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ICommandBarFlyout, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase2, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase3, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase4, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase5, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase6, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::CommandBarFlyout, Windows::UI::Xaml::Controls::Primitives::FlyoutBase, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverridesT<D>, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides4T<D>
{
    using composable = CommandBarFlyout;

protected:
    CommandBarFlyoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::CommandBarFlyout, Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct DropDownButtonT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IDropDownButton, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IButton, Windows::UI::Xaml::Controls::IButtonWithFlyout, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::DropDownButton, Windows::UI::Xaml::Controls::Button, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = DropDownButton;

protected:
    DropDownButtonT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::DropDownButton, Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ElementAnimatorT :
    implements<D, Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IElementAnimator, Microsoft::UI::Xaml::Controls::IElementAnimatorProtected>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ElementAnimator>,
    Microsoft::UI::Xaml::Controls::IElementAnimatorOverridesT<D>
{
    using composable = ElementAnimator;

protected:
    ElementAnimatorT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ElementAnimator, Microsoft::UI::Xaml::Controls::IElementAnimatorFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ElementFactoryT :
    implements<D, Microsoft::UI::Xaml::Controls::IElementFactoryOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IElementFactory, Microsoft::UI::Xaml::Controls::IElementFactoryShim, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ElementFactory, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::IElementFactoryOverridesT<D>
{
    using composable = ElementFactory;

protected:
    ElementFactoryT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ElementFactory, Microsoft::UI::Xaml::Controls::IElementFactoryFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct FlowLayoutT :
    implements<D, Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IFlowLayout, Microsoft::UI::Xaml::Controls::ILayout, Microsoft::UI::Xaml::Controls::ILayoutProtected, Microsoft::UI::Xaml::Controls::IVirtualizingLayout, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::FlowLayout, Microsoft::UI::Xaml::Controls::VirtualizingLayout, Microsoft::UI::Xaml::Controls::Layout, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::IFlowLayoutOverridesT<D>, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverridesT<D>
{
    using composable = FlowLayout;

protected:
    FlowLayoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::FlowLayout, Microsoft::UI::Xaml::Controls::IFlowLayoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct FlowLayoutStateT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IFlowLayoutState>,
    impl::base<D, Microsoft::UI::Xaml::Controls::FlowLayoutState>
{
    using composable = FlowLayoutState;

protected:
    FlowLayoutStateT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::FlowLayoutState, Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct FontIconSourceT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IFontIconSource, Microsoft::UI::Xaml::Controls::IIconSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::FontIconSource, Microsoft::UI::Xaml::Controls::IconSource, Windows::UI::Xaml::DependencyObject>
{
    using composable = FontIconSource;

protected:
    FontIconSourceT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::FontIconSource, Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ItemsRepeaterT :
    implements<D, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeater2, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ItemsRepeater, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ItemsRepeater;

protected:
    ItemsRepeaterT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ItemsSourceViewT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IItemsSourceView, Windows::UI::Xaml::Interop::INotifyCollectionChanged>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ItemsSourceView>
{
    using composable = ItemsSourceView;

protected:
    ItemsSourceViewT(Windows::Foundation::IInspectable const& source)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ItemsSourceView, Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>([&](auto&& f) { f.CreateInstance(source, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct LayoutPanelT :
    implements<D, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ILayoutPanel, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IPanel2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::LayoutPanel, Windows::UI::Xaml::Controls::Panel, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = LayoutPanel;

protected:
    LayoutPanelT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::LayoutPanel, Microsoft::UI::Xaml::Controls::ILayoutPanelFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct MenuBarT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IMenuBar, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::MenuBar, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = MenuBar;

protected:
    MenuBarT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::MenuBar, Microsoft::UI::Xaml::Controls::IMenuBarFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct MenuBarItemT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IMenuBarItem, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::MenuBarItem, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = MenuBarItem;

protected:
    MenuBarItemT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::MenuBarItem, Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct MenuBarItemFlyoutT :
    implements<D, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides4, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout, Windows::UI::Xaml::Controls::IMenuFlyout, Windows::UI::Xaml::Controls::IMenuFlyout2, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase2, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase3, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase4, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase5, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase6, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::MenuBarItemFlyout, Windows::UI::Xaml::Controls::MenuFlyout, Windows::UI::Xaml::Controls::Primitives::FlyoutBase, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverridesT<D>, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides4T<D>
{
    using composable = MenuBarItemFlyout;

protected:
    MenuBarItemFlyoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout, Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INavigationView, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NavigationView, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = NavigationView;

protected:
    NavigationViewT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::INavigationViewFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewItemT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INavigationViewItem, Microsoft::UI::Xaml::Controls::INavigationViewItemBase, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IListViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NavigationViewItem, Microsoft::UI::Xaml::Controls::NavigationViewItemBase, Windows::UI::Xaml::Controls::ListViewItem, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = NavigationViewItem;

protected:
    NavigationViewItemT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NavigationViewItem, Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewItemHeaderT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INavigationViewItemHeader, Microsoft::UI::Xaml::Controls::INavigationViewItemBase, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IListViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NavigationViewItemHeader, Microsoft::UI::Xaml::Controls::NavigationViewItemBase, Windows::UI::Xaml::Controls::ListViewItem, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = NavigationViewItemHeader;

protected:
    NavigationViewItemHeaderT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader, Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewItemSeparatorT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator, Microsoft::UI::Xaml::Controls::INavigationViewItemBase, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IListViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator, Microsoft::UI::Xaml::Controls::NavigationViewItemBase, Windows::UI::Xaml::Controls::ListViewItem, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = NavigationViewItemSeparator;

protected:
    NavigationViewItemSeparatorT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator, Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewListT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INavigationViewList, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemsControl3, Windows::UI::Xaml::Controls::IListView, Windows::UI::Xaml::Controls::IListViewBase, Windows::UI::Xaml::Controls::IListViewBase2, Windows::UI::Xaml::Controls::IListViewBase3, Windows::UI::Xaml::Controls::IListViewBase4, Windows::UI::Xaml::Controls::IListViewBase5, Windows::UI::Xaml::Controls::IListViewBase6, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NavigationViewList, Windows::UI::Xaml::Controls::ListView, Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::Controls::IItemsControlOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = NavigationViewList;

protected:
    NavigationViewListT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NavigationViewList, Microsoft::UI::Xaml::Controls::INavigationViewListFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewTemplateSettingsT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings, Windows::UI::Xaml::DependencyObject>
{
    using composable = NavigationViewTemplateSettings;

protected:
    NavigationViewTemplateSettingsT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings, Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NonVirtualizingLayoutT :
    implements<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayout, Microsoft::UI::Xaml::Controls::ILayout, Microsoft::UI::Xaml::Controls::ILayoutProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NonVirtualizingLayout, Microsoft::UI::Xaml::Controls::Layout, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverridesT<D>
{
    using composable = NonVirtualizingLayout;

protected:
    NonVirtualizingLayoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NonVirtualizingLayout, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NonVirtualizingLayoutContextT :
    implements<D, Microsoft::UI::Xaml::Controls::ILayoutContextOverrides, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::ILayoutContext, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::LayoutContext, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::ILayoutContextOverridesT<D>, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverridesT<D>
{
    using composable = NonVirtualizingLayoutContext;

protected:
    NonVirtualizingLayoutContextT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ParallaxViewT :
    implements<D, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IParallaxView, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ParallaxView, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ParallaxView;

protected:
    ParallaxViewT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ParallaxView, Microsoft::UI::Xaml::Controls::IParallaxViewFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct PathIconSourceT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IPathIconSource, Microsoft::UI::Xaml::Controls::IIconSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::PathIconSource, Microsoft::UI::Xaml::Controls::IconSource, Windows::UI::Xaml::DependencyObject>
{
    using composable = PathIconSource;

protected:
    PathIconSourceT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::PathIconSource, Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct PersonPictureT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IPersonPicture, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::PersonPicture, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = PersonPicture;

protected:
    PersonPictureT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::PersonPicture, Microsoft::UI::Xaml::Controls::IPersonPictureFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RadioButtonsT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRadioButtons, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RadioButtons, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RadioButtons;

protected:
    RadioButtonsT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RadioButtons, Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RadioMenuFlyoutItemT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IMenuFlyoutItem, Windows::UI::Xaml::Controls::IMenuFlyoutItem2, Windows::UI::Xaml::Controls::IMenuFlyoutItem3, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem, Windows::UI::Xaml::Controls::MenuFlyoutItem, Windows::UI::Xaml::Controls::MenuFlyoutItemBase, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RadioMenuFlyoutItem;

protected:
    RadioMenuFlyoutItemT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem, Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RatingControlT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRatingControl, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RatingControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RatingControl;

protected:
    RatingControlT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RatingControl, Microsoft::UI::Xaml::Controls::IRatingControlFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RatingItemFontInfoT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemInfo, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RatingItemFontInfo, Microsoft::UI::Xaml::Controls::RatingItemInfo, Windows::UI::Xaml::DependencyObject>
{
    using composable = RatingItemFontInfo;

protected:
    RatingItemFontInfoT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RatingItemFontInfo, Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RatingItemImageInfoT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemInfo, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RatingItemImageInfo, Microsoft::UI::Xaml::Controls::RatingItemInfo, Windows::UI::Xaml::DependencyObject>
{
    using composable = RatingItemImageInfo;

protected:
    RatingItemImageInfoT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RatingItemImageInfo, Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RatingItemInfoT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRatingItemInfo, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RatingItemInfo, Windows::UI::Xaml::DependencyObject>
{
    using composable = RatingItemInfo;

protected:
    RatingItemInfoT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RatingItemInfo, Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RecyclePoolT :
    implements<D, Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRecyclePool>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RecyclePool>,
    Microsoft::UI::Xaml::Controls::IRecyclePoolOverridesT<D>
{
    using composable = RecyclePool;

protected:
    RecyclePoolT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RecyclePool, Microsoft::UI::Xaml::Controls::IRecyclePoolFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RecyclingElementFactoryT :
    implements<D, Microsoft::UI::Xaml::Controls::IElementFactoryOverrides, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRecyclingElementFactory, Microsoft::UI::Xaml::Controls::IElementFactory, Microsoft::UI::Xaml::Controls::IElementFactoryShim, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RecyclingElementFactory, Microsoft::UI::Xaml::Controls::ElementFactory, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::IElementFactoryOverridesT<D>, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverridesT<D>
{
    using composable = RecyclingElementFactory;

protected:
    RecyclingElementFactoryT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RecyclingElementFactory, Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RefreshContainerT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRefreshContainer, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RefreshContainer, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RefreshContainer;

protected:
    RefreshContainerT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RefreshVisualizerT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRefreshVisualizer, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RefreshVisualizer, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RefreshVisualizer;

protected:
    RefreshVisualizerT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RevealListViewItemPresenterT :
    implements<D, Windows::UI::Xaml::Controls::IContentPresenterOverrides, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentPresenter, Windows::UI::Xaml::Controls::IContentPresenter2, Windows::UI::Xaml::Controls::IContentPresenter3, Windows::UI::Xaml::Controls::IContentPresenter4, Windows::UI::Xaml::Controls::IContentPresenter5, Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter, Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter2, Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter3, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter, Windows::UI::Xaml::Controls::Primitives::ListViewItemPresenter, Windows::UI::Xaml::Controls::ContentPresenter, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentPresenterOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RevealListViewItemPresenter;

protected:
    RevealListViewItemPresenterT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter, Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ScrollOptionsT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IScrollOptions>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ScrollOptions>
{
    using composable = ScrollOptions;

protected:
    ScrollOptionsT(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ScrollOptions, Microsoft::UI::Xaml::Controls::IScrollOptionsFactory>([&](auto&& f) { f.CreateInstance(animationMode, *this, this->m_inner); });
    }
    ScrollOptionsT(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode const& snapPointsMode)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ScrollOptions, Microsoft::UI::Xaml::Controls::IScrollOptionsFactory>([&](auto&& f) { f.CreateInstance2(animationMode, snapPointsMode, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ScrollViewerT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IScrollViewer, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ScrollViewer, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ScrollViewer;

protected:
    ScrollViewerT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ScrollViewer, Microsoft::UI::Xaml::Controls::IScrollViewerFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct SelectionModelT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ISelectionModel, Microsoft::UI::Xaml::Controls::ISelectionModelProtected, Windows::UI::Xaml::Data::INotifyPropertyChanged>,
    impl::base<D, Microsoft::UI::Xaml::Controls::SelectionModel>
{
    using composable = SelectionModel;

protected:
    SelectionModelT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::SelectionModel, Microsoft::UI::Xaml::Controls::ISelectionModelFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct SplitButtonT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ISplitButton, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::SplitButton, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = SplitButton;

protected:
    SplitButtonT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::ISplitButtonFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct StackLayoutT :
    implements<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IStackLayout, Microsoft::UI::Xaml::Controls::ILayout, Microsoft::UI::Xaml::Controls::ILayoutProtected, Microsoft::UI::Xaml::Controls::IVirtualizingLayout, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::StackLayout, Microsoft::UI::Xaml::Controls::VirtualizingLayout, Microsoft::UI::Xaml::Controls::Layout, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverridesT<D>
{
    using composable = StackLayout;

protected:
    StackLayoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::StackLayout, Microsoft::UI::Xaml::Controls::IStackLayoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct StackLayoutStateT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IStackLayoutState>,
    impl::base<D, Microsoft::UI::Xaml::Controls::StackLayoutState>
{
    using composable = StackLayoutState;

protected:
    StackLayoutStateT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::StackLayoutState, Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct SwipeControlT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ISwipeControl, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::SwipeControl, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = SwipeControl;

protected:
    SwipeControlT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::SwipeControl, Microsoft::UI::Xaml::Controls::ISwipeControlFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct SwipeItemT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ISwipeItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::SwipeItem, Windows::UI::Xaml::DependencyObject>
{
    using composable = SwipeItem;

protected:
    SwipeItemT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::ISwipeItemFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct SwipeItemsT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ISwipeItems, Windows::Foundation::Collections::IIterable<Microsoft::UI::Xaml::Controls::SwipeItem>, Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::SwipeItem>, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::SwipeItems, Windows::UI::Xaml::DependencyObject>
{
    using composable = SwipeItems;

protected:
    SwipeItemsT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::SwipeItems, Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct SymbolIconSourceT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ISymbolIconSource, Microsoft::UI::Xaml::Controls::IIconSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::SymbolIconSource, Microsoft::UI::Xaml::Controls::IconSource, Windows::UI::Xaml::DependencyObject>
{
    using composable = SymbolIconSource;

protected:
    SymbolIconSourceT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::SymbolIconSource, Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TeachingTipT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITeachingTip, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TeachingTip, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = TeachingTip;

protected:
    TeachingTipT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::ITeachingTipFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TeachingTipTemplateSettingsT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings, Windows::UI::Xaml::DependencyObject>
{
    using composable = TeachingTipTemplateSettings;

protected:
    TeachingTipTemplateSettingsT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings, Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TextCommandBarFlyoutT :
    implements<D, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides4, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout, Microsoft::UI::Xaml::Controls::ICommandBarFlyout, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase2, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase3, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase4, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase5, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase6, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TextCommandBarFlyout, Microsoft::UI::Xaml::Controls::CommandBarFlyout, Windows::UI::Xaml::Controls::Primitives::FlyoutBase, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverridesT<D>, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides4T<D>
{
    using composable = TextCommandBarFlyout;

protected:
    TextCommandBarFlyoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout, Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ToggleSplitButtonT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IToggleSplitButton, Microsoft::UI::Xaml::Controls::ISplitButton, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::SplitButton, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ToggleSplitButton;

protected:
    ToggleSplitButtonT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITreeView, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TreeView, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = TreeView;

protected:
    TreeViewT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::ITreeViewFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewItemT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITreeViewItem, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IListViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TreeViewItem, Windows::UI::Xaml::Controls::ListViewItem, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = TreeViewItem;

protected:
    TreeViewItemT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TreeViewItem, Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewItemTemplateSettingsT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings, Windows::UI::Xaml::DependencyObject>
{
    using composable = TreeViewItemTemplateSettings;

protected:
    TreeViewItemTemplateSettingsT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings, Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewListT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITreeViewList, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemsControl3, Windows::UI::Xaml::Controls::IListView, Windows::UI::Xaml::Controls::IListViewBase, Windows::UI::Xaml::Controls::IListViewBase2, Windows::UI::Xaml::Controls::IListViewBase3, Windows::UI::Xaml::Controls::IListViewBase4, Windows::UI::Xaml::Controls::IListViewBase5, Windows::UI::Xaml::Controls::IListViewBase6, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TreeViewList, Windows::UI::Xaml::Controls::ListView, Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::Controls::IItemsControlOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = TreeViewList;

protected:
    TreeViewListT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TreeViewList, Microsoft::UI::Xaml::Controls::ITreeViewListFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TreeViewNodeT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITreeViewNode, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TreeViewNode, Windows::UI::Xaml::DependencyObject>
{
    using composable = TreeViewNode;

protected:
    TreeViewNodeT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TreeViewNode, Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct TwoPaneViewT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::ITwoPaneView, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = TwoPaneView;

protected:
    TwoPaneViewT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::TwoPaneView, Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct UniformGridLayoutT :
    implements<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IUniformGridLayout, Microsoft::UI::Xaml::Controls::ILayout, Microsoft::UI::Xaml::Controls::ILayoutProtected, Microsoft::UI::Xaml::Controls::IVirtualizingLayout, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::UniformGridLayout, Microsoft::UI::Xaml::Controls::VirtualizingLayout, Microsoft::UI::Xaml::Controls::Layout, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverridesT<D>
{
    using composable = UniformGridLayout;

protected:
    UniformGridLayoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::UniformGridLayout, Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct UniformGridLayoutStateT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IUniformGridLayoutState>,
    impl::base<D, Microsoft::UI::Xaml::Controls::UniformGridLayoutState>
{
    using composable = UniformGridLayoutState;

protected:
    UniformGridLayoutStateT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::UniformGridLayoutState, Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct VirtualizingLayoutT :
    implements<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayout, Microsoft::UI::Xaml::Controls::ILayout, Microsoft::UI::Xaml::Controls::ILayoutProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::VirtualizingLayout, Microsoft::UI::Xaml::Controls::Layout, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverridesT<D>
{
    using composable = VirtualizingLayout;

protected:
    VirtualizingLayoutT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::VirtualizingLayout, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct VirtualizingLayoutContextT :
    implements<D, Microsoft::UI::Xaml::Controls::ILayoutContextOverrides, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::ILayoutContext, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::LayoutContext, Windows::UI::Xaml::DependencyObject>,
    Microsoft::UI::Xaml::Controls::ILayoutContextOverridesT<D>, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverridesT<D>
{
    using composable = VirtualizingLayoutContext;

protected:
    VirtualizingLayoutContextT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext, Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ZoomOptionsT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::IZoomOptions>,
    impl::base<D, Microsoft::UI::Xaml::Controls::ZoomOptions>
{
    using composable = ZoomOptions;

protected:
    ZoomOptionsT(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ZoomOptions, Microsoft::UI::Xaml::Controls::IZoomOptionsFactory>([&](auto&& f) { f.CreateInstance(animationMode, *this, this->m_inner); });
    }
    ZoomOptionsT(Microsoft::UI::Xaml::Controls::AnimationMode const& animationMode, Microsoft::UI::Xaml::Controls::SnapPointsMode const& snapPointsMode)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::ZoomOptions, Microsoft::UI::Xaml::Controls::IZoomOptionsFactory>([&](auto&& f) { f.CreateInstance2(animationMode, snapPointsMode, *this, this->m_inner); });
    }
};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IColorChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IColorPicker> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IColorPicker> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IColorPickerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IColorPickerStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IDropDownButton> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IDropDownButtonFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementAnimator> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementAnimator> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementAnimatorFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementAnimatorFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementAnimatorOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementAnimatorProtected> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementAnimatorProtected> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryShim> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IElementFactoryShim> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFlowLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFlowLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutState> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutState> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutStateFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFlowLayoutStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFontIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IFontIconSourceStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IIconSourceFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IIconSourceStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IIndexPath> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IIndexPath> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IIndexPathStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IIndexPathStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeater2> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IKeyIndexMapping> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutContext> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutContextOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutPanel> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutPanel> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutPanelFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutPanelFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutPanelStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutPanelStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ILayoutProtected> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBar> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBar> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarItemStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IMenuBarStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeader> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewItemStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewList> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewList> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewListFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewListFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IParallaxView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IParallaxView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IParallaxViewStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPathIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPathIconSourceStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPersonPicture> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRadioButtons> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRadioButtonsStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingControl> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingControl> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingControlFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingControlStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfo> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfo> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfo> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclePool> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclePool> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclePoolFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclePoolFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclePoolOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclePoolStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclePoolStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclingElementFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclingElementFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRecyclingElementFactoryOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshContainerStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollAnchorProvider> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollAnimationStartingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollCompletedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollCompletedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollOptions> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollOptions> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollOptionsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollOptionsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollViewer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollViewerStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollerAnchorRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IScrollerBringingIntoViewEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelectTemplateEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelectionModel> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelectionModel> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelChildrenRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelProtected> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelProtected> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelSelectionChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelectionModelSelectionChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISelfPlayingAnimatedVisual> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISplitButton> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISplitButton> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISplitButtonStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IStackLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IStackLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutState> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutState> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStateFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IStackLayoutStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeControl> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeControlStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItems> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISwipeItemsStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTip> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButton> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewList> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewListFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNode> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITreeViewStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutState> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutState> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStateFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResources> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IZoomAnimationStartingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IZoomCompletedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IZoomCompletedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IZoomOptions> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IZoomOptions> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IZoomOptionsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IZoomOptionsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::BitmapIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ColorPicker> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ColorPicker> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::CommandBarFlyout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::CommandBarFlyout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::DropDownButton> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::DropDownButton> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ElementAnimator> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ElementAnimator> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ElementFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ElementFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::FlowLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::FlowLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::FlowLayoutState> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::FlowLayoutState> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::FontIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::FontIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::IndexPath> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::IndexPath> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeater> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ItemsSourceView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ItemsSourceView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Layout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Layout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::LayoutContext> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::LayoutContext> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::LayoutPanel> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::LayoutPanel> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::MenuBar> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::MenuBar> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::MenuBarItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::MenuBarItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::MenuBarItemFlyout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::MenuBarItemFlyout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemHeader> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemHeader> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewList> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewList> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ParallaxView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ParallaxView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::PathIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::PathIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::PersonPicture> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::PersonPicture> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RadioButtons> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RadioButtons> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RatingControl> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RatingControl> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RatingItemFontInfo> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RatingItemFontInfo> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RatingItemImageInfo> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RatingItemImageInfo> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RatingItemInfo> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RecyclePool> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RecyclePool> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RecyclingElementFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RecyclingElementFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RefreshContainer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RefreshVisualizer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollAnchorProvider> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollAnchorProvider> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollOptions> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollOptions> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollViewer> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SelectTemplateEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SelectTemplateEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SelectionModel> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SelectionModel> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SelectionModelChildrenRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SelectionModelChildrenRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SelectionModelSelectionChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SelectionModelSelectionChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SplitButton> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SplitButton> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::StackLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::StackLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::StackLayoutState> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::StackLayoutState> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SwipeControl> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SwipeControl> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SwipeItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SwipeItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SwipeItems> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SwipeItems> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::SymbolIconSource> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::SymbolIconSource> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TeachingTip> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TeachingTip> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TextCommandBarFlyout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TextCommandBarFlyout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButton> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewList> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewList> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TreeViewNode> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TreeViewNode> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::TwoPaneView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutState> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::UniformGridLayoutState> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayout> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::XamlControlsResources> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::ZoomOptions> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::ZoomOptions> {};

}
