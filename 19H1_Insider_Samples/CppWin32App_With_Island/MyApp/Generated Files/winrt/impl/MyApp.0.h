// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop {

struct TypeName;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IXamlType;
struct XmlnsDefinition;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IXamlMetadataProvider;

}

WINRT_EXPORT namespace winrt::MyApp {

struct IApp;
struct IMainUserControl;
struct App;
struct MainUserControl;
struct XamlMetaDataProvider;

}

namespace winrt::impl {

template <> struct category<MyApp::IApp>{ using type = interface_category; };
template <> struct category<MyApp::IMainUserControl>{ using type = interface_category; };
template <> struct category<MyApp::App>{ using type = class_category; };
template <> struct category<MyApp::MainUserControl>{ using type = class_category; };
template <> struct category<MyApp::XamlMetaDataProvider>{ using type = class_category; };
template <> struct name<MyApp::IApp>{ static constexpr auto & value{ L"MyApp.IApp" }; };
template <> struct name<MyApp::IMainUserControl>{ static constexpr auto & value{ L"MyApp.IMainUserControl" }; };
template <> struct name<MyApp::App>{ static constexpr auto & value{ L"MyApp.App" }; };
template <> struct name<MyApp::MainUserControl>{ static constexpr auto & value{ L"MyApp.MainUserControl" }; };
template <> struct name<MyApp::XamlMetaDataProvider>{ static constexpr auto & value{ L"MyApp.XamlMetaDataProvider" }; };
template <> struct guid_storage<MyApp::IApp>{ static constexpr guid value{ 0xA851DABD,0x4BCA,0x5275,{ 0xAB,0xC7,0x95,0xCF,0x3C,0xBB,0x0F,0x1C } }; };
template <> struct guid_storage<MyApp::IMainUserControl>{ static constexpr guid value{ 0x34FAB380,0x5BB5,0x5E0A,{ 0x8C,0x84,0xB1,0x97,0xF6,0xBB,0xB6,0x95 } }; };
template <> struct default_interface<MyApp::App>{ using type = MyApp::IApp; };
template <> struct default_interface<MyApp::MainUserControl>{ using type = MyApp::IMainUserControl; };
template <> struct default_interface<MyApp::XamlMetaDataProvider>{ using type = Windows::UI::Xaml::Markup::IXamlMetadataProvider; };

template <> struct abi<MyApp::IApp>{ struct type : IInspectable
{
};};

template <> struct abi<MyApp::IMainUserControl>{ struct type : IInspectable
{
};};

template <typename D>
struct consume_MyApp_IApp
{
};
template <> struct consume<MyApp::IApp> { template <typename D> using type = consume_MyApp_IApp<D>; };

template <typename D>
struct consume_MyApp_IMainUserControl
{
};
template <> struct consume<MyApp::IMainUserControl> { template <typename D> using type = consume_MyApp_IMainUserControl<D>; };

}
