// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/SampleUserControl.2.h"

namespace winrt::impl {

template <typename D> int32_t consume_SampleUserControl_IInternalUserControl<D>::MyProperty() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(SampleUserControl::IInternalUserControl)->get_MyProperty(&value));
    return value;
}

template <typename D> void consume_SampleUserControl_IInternalUserControl<D>::MyProperty(int32_t value) const
{
    check_hresult(WINRT_SHIM(SampleUserControl::IInternalUserControl)->put_MyProperty(value));
}

template <typename D> hstring consume_SampleUserControl_IMyUserControl<D>::MyProperty() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(SampleUserControl::IMyUserControl)->get_MyProperty(put_abi(value)));
    return value;
}

template <typename D> void consume_SampleUserControl_IMyUserControl<D>::MyProperty(param::hstring const& value) const
{
    check_hresult(WINRT_SHIM(SampleUserControl::IMyUserControl)->put_MyProperty(get_abi(value)));
}

template <typename D>
struct produce<D, SampleUserControl::IInternalUserControl> : produce_base<D, SampleUserControl::IInternalUserControl>
{
    int32_t WINRT_CALL get_MyProperty(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MyProperty, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MyProperty(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MyProperty, WINRT_WRAP(void), int32_t);
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, SampleUserControl::IMyUserControl> : produce_base<D, SampleUserControl::IMyUserControl>
{
    int32_t WINRT_CALL get_MyProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MyProperty, WINRT_WRAP(hstring));
            *value = detach_from<hstring>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MyProperty(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MyProperty, WINRT_WRAP(void), hstring const&);
            this->shim().MyProperty(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::SampleUserControl {

inline InternalUserControl::InternalUserControl() :
    InternalUserControl(impl::call_factory<InternalUserControl>([](auto&& f) { return f.template ActivateInstance<InternalUserControl>(); }))
{}

inline MyUserControl::MyUserControl() :
    MyUserControl(impl::call_factory<MyUserControl>([](auto&& f) { return f.template ActivateInstance<MyUserControl>(); }))
{}

inline XamlMetaDataProvider::XamlMetaDataProvider() :
    XamlMetaDataProvider(impl::call_factory<XamlMetaDataProvider>([](auto&& f) { return f.template ActivateInstance<XamlMetaDataProvider>(); }))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::SampleUserControl::IInternalUserControl> : winrt::impl::hash_base<winrt::SampleUserControl::IInternalUserControl> {};
template<> struct hash<winrt::SampleUserControl::IMyUserControl> : winrt::impl::hash_base<winrt::SampleUserControl::IMyUserControl> {};
template<> struct hash<winrt::SampleUserControl::InternalUserControl> : winrt::impl::hash_base<winrt::SampleUserControl::InternalUserControl> {};
template<> struct hash<winrt::SampleUserControl::MyUserControl> : winrt::impl::hash_base<winrt::SampleUserControl::MyUserControl> {};
template<> struct hash<winrt::SampleUserControl::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::SampleUserControl::XamlMetaDataProvider> {};

}
