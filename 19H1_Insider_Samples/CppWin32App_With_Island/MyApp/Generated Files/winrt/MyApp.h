// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/MyApp.2.h"

namespace winrt::impl {

template <typename D>
struct produce<D, MyApp::IApp> : produce_base<D, MyApp::IApp>
{};

template <typename D>
struct produce<D, MyApp::IMainUserControl> : produce_base<D, MyApp::IMainUserControl>
{};

}

WINRT_EXPORT namespace winrt::MyApp {

inline App::App() :
    App(impl::call_factory<App>([](auto&& f) { return f.template ActivateInstance<App>(); }))
{}

inline MainUserControl::MainUserControl() :
    MainUserControl(impl::call_factory<MainUserControl>([](auto&& f) { return f.template ActivateInstance<MainUserControl>(); }))
{}

inline XamlMetaDataProvider::XamlMetaDataProvider() :
    XamlMetaDataProvider(impl::call_factory<XamlMetaDataProvider>([](auto&& f) { return f.template ActivateInstance<XamlMetaDataProvider>(); }))
{}

}

namespace winrt::impl {

}

WINRT_EXPORT namespace winrt::experimental::reflect {

template <>
struct base_type<MyApp::App> { using type = Microsoft::UI::Xaml::Markup::XamlApplication; };
template <>
struct base_type<MyApp::MainUserControl> { using type = Windows::UI::Xaml::Controls::UserControl; };
}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::MyApp::IApp> : winrt::impl::hash_base<winrt::MyApp::IApp> {};
template<> struct hash<winrt::MyApp::IMainUserControl> : winrt::impl::hash_base<winrt::MyApp::IMainUserControl> {};
template<> struct hash<winrt::MyApp::App> : winrt::impl::hash_base<winrt::MyApp::App> {};
template<> struct hash<winrt::MyApp::MainUserControl> : winrt::impl::hash_base<winrt::MyApp::MainUserControl> {};
template<> struct hash<winrt::MyApp::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::MyApp::XamlMetaDataProvider> {};

}
