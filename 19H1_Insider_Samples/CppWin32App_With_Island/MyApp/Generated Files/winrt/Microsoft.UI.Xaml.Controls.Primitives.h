// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Input.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Media.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.Primitives.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Controls.Primitives.2.h"
#include "winrt/Microsoft.UI.Xaml.Controls.h"

namespace winrt::impl {

template <typename D> Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider<D>::ColorChannel() const
{
    Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider)->get_ColorChannel(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider<D>::ColorChannel(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider)->put_ColorChannel(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics<D>::ColorChannelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics)->get_ColorChannelProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Color consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::Color() const
{
    Windows::UI::Color value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_Color(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::Color(Windows::UI::Color const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_Color(get_abi(value)));
}

template <typename D> Windows::Foundation::Numerics::float4 consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::HsvColor() const
{
    Windows::Foundation::Numerics::float4 value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_HsvColor(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::HsvColor(Windows::Foundation::Numerics::float4 const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_HsvColor(get_abi(value)));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MinHue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_MinHue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MinHue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_MinHue(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MaxHue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_MaxHue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MaxHue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_MaxHue(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MinSaturation() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_MinSaturation(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MinSaturation(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_MinSaturation(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MaxSaturation() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_MaxSaturation(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MaxSaturation(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_MaxSaturation(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MinValue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_MinValue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MinValue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_MinValue(value));
}

template <typename D> int32_t consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MaxValue() const
{
    int32_t value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_MaxValue(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::MaxValue(int32_t value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_MaxValue(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::ColorSpectrumShape consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::Shape() const
{
    Microsoft::UI::Xaml::Controls::ColorSpectrumShape value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_Shape(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::Shape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_Shape(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ColorSpectrumComponents consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::Components() const
{
    Microsoft::UI::Xaml::Controls::ColorSpectrumComponents value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->get_Components(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::Components(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->put_Components(get_abi(value)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::ColorChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->add_ColorChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::ColorChanged_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::ColorChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ColorChanged_revoker>(this, ColorChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>::ColorChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum)->remove_ColorChanged(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::ColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_ColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::HsvColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_HsvColorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::MinHueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_MinHueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::MaxHueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_MaxHueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::MinSaturationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_MinSaturationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::MaxSaturationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_MaxSaturationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::MinValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_MinValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::MaxValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_MaxValueProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::ShapeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_ShapeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>::ComponentsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics)->get_ComponentsProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar<D>::FlyoutTemplateSettings() const
{
    Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar)->get_FlyoutTemplateSettings(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::OpenAnimationStartPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_OpenAnimationStartPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::OpenAnimationEndPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_OpenAnimationEndPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::CloseAnimationEndPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_CloseAnimationEndPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::CurrentWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_CurrentWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandedWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandedWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::WidthExpansionDelta() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_WidthExpansionDelta(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::WidthExpansionAnimationStartPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_WidthExpansionAnimationStartPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::WidthExpansionAnimationEndPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_WidthExpansionAnimationEndPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::WidthExpansionMoreButtonAnimationStartPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_WidthExpansionMoreButtonAnimationStartPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::WidthExpansionMoreButtonAnimationEndPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_WidthExpansionMoreButtonAnimationEndPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandUpOverflowVerticalPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandUpOverflowVerticalPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandDownOverflowVerticalPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandDownOverflowVerticalPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandUpAnimationStartPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandUpAnimationStartPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandUpAnimationEndPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandUpAnimationEndPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandUpAnimationHoldPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandUpAnimationHoldPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandDownAnimationStartPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandDownAnimationStartPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandDownAnimationEndPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandDownAnimationEndPosition(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ExpandDownAnimationHoldPosition() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ExpandDownAnimationHoldPosition(&value));
    return value;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::ContentClipRect() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_ContentClipRect(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Rect consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>::OverflowContentClipRect() const
{
    Windows::Foundation::Rect value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings)->get_OverflowContentClipRect(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::IconElement consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter<D>::Icon() const
{
    Windows::UI::Xaml::Controls::IconElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter)->get_Icon(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter<D>::Icon(Windows::UI::Xaml::Controls::IconElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter)->put_Icon(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics<D>::IconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics)->get_IconProperty(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView consume_Microsoft_UI_Xaml_Controls_Primitives_IRadioButtonsListViewFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem consume_Microsoft_UI_Xaml_Controls_Primitives_IRadioButtonsListViewItemFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint<D>::Offset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint)->get_Offset(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint<D>::Interval() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint)->get_Interval(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint<D>::Start() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint)->get_Start(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint<D>::End() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint)->get_End(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory<D>::CreateInstance(double offset, double interval, double start, double end, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory)->CreateInstance(offset, interval, start, end, get_abi(alignment), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint<D>::Offset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint)->get_Offset(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint<D>::Interval() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint)->get_Interval(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint<D>::Start() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint)->get_Start(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint<D>::End() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint)->get_End(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory<D>::CreateInstance(double offset, double interval, double start, double end, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory)->CreateInstance(offset, interval, start, end, get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::AreInteractionsAllowed() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->get_AreInteractionsAllowed(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::AreScrollerInteractionsAllowed() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->get_AreScrollerInteractionsAllowed(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::IsInteracting() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->get_IsInteracting(&value));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::IsInteractionVisualRailEnabled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->get_IsInteractionVisualRailEnabled(&value));
    return value;
}

template <typename D> Windows::UI::Composition::Visual consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionVisual() const
{
    Windows::UI::Composition::Visual value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->get_InteractionVisual(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Orientation consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionVisualScrollOrientation() const
{
    Windows::UI::Xaml::Controls::Orientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->get_InteractionVisualScrollOrientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::SetExpressionAnimationSources(Windows::UI::Composition::CompositionPropertySet const& propertySet, param::hstring const& minOffsetPropertyName, param::hstring const& maxOffsetPropertyName, param::hstring const& offsetPropertyName, param::hstring const& multiplierPropertyName) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->SetExpressionAnimationSources(get_abi(propertySet), get_abi(minOffsetPropertyName), get_abi(maxOffsetPropertyName), get_abi(offsetPropertyName), get_abi(multiplierPropertyName)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::SetScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode const& scrollMode) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->SetScrollMode(get_abi(scrollMode)));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::SetValues(double minOffset, double maxOffset, double offset, double viewport) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->SetValues(minOffset, maxOffset, offset, viewport));
}

template <typename D> Windows::UI::Composition::CompositionAnimation consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::GetScrollAnimation(Microsoft::UI::Xaml::Controls::ScrollInfo const& info, Windows::Foundation::Numerics::float2 const& currentPosition, Windows::UI::Composition::CompositionAnimation const& defaultAnimation) const
{
    Windows::UI::Composition::CompositionAnimation result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->GetScrollAnimation(get_abi(info), get_abi(currentPosition), get_abi(defaultAnimation), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::OnScrollCompleted(Microsoft::UI::Xaml::Controls::ScrollInfo const& info) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->OnScrollCompleted(get_abi(info)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollToRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->add_ScrollToRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollToRequested_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollToRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollToRequested_revoker>(this, ScrollToRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollToRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->remove_ScrollToRequested(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollByRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->add_ScrollByRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollByRequested_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollByRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollByRequested_revoker>(this, ScrollByRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollByRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->remove_ScrollByRequested(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollFromRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->add_ScrollFromRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollFromRequested_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollFromRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollFromRequested_revoker>(this, ScrollFromRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::ScrollFromRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->remove_ScrollFromRequested(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->add_InteractionRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionRequested_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, InteractionRequested_revoker>(this, InteractionRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->remove_InteractionRequested(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionInfoChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->add_InteractionInfoChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionInfoChanged_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionInfoChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, InteractionInfoChanged_revoker>(this, InteractionInfoChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>::InteractionInfoChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollController)->remove_InteractionInfoChanged(get_abi(token)));
}

template <typename D> Windows::UI::Input::PointerPoint consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgs<D>::PointerPoint() const
{
    Windows::UI::Input::PointerPoint value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs)->get_PointerPoint(put_abi(value)));
    return value;
}

template <typename D> bool consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgs<D>::Handled() const
{
    bool value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs)->get_Handled(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgs<D>::Handled(bool value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs)->put_Handled(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgsFactory<D>::CreateInstance(Windows::UI::Input::PointerPoint const& pointerPoint) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory)->CreateInstance(get_abi(pointerPoint), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs<D>::OffsetDelta() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs)->get_OffsetDelta(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollOptions consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs<D>::Options() const
{
    Microsoft::UI::Xaml::Controls::ScrollOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs)->get_Options(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs<D>::Info() const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs)->get_Info(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs<D>::Info(Microsoft::UI::Xaml::Controls::ScrollInfo const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs)->put_Info(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory<D>::CreateInstance(double offsetDelta, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory)->CreateInstance(offsetDelta, get_abi(options), put_abi(value)));
    return value;
}

template <typename D> float consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollFromRequestedEventArgs<D>::OffsetVelocity() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs)->get_OffsetVelocity(&value));
    return value;
}

template <typename D> Windows::Foundation::IReference<float> consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollFromRequestedEventArgs<D>::InertiaDecayRate() const
{
    Windows::Foundation::IReference<float> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs)->get_InertiaDecayRate(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollFromRequestedEventArgs<D>::Info() const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs)->get_Info(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollFromRequestedEventArgs<D>::Info(Microsoft::UI::Xaml::Controls::ScrollInfo const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs)->put_Info(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollFromRequestedEventArgsFactory<D>::CreateInstance(float offsetVelocity, optional<float> const& inertiaDecayRate) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgsFactory)->CreateInstance(offsetVelocity, get_abi(inertiaDecayRate), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs<D>::Offset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs)->get_Offset(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollOptions consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs<D>::Options() const
{
    Microsoft::UI::Xaml::Controls::ScrollOptions value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs)->get_Options(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs<D>::Info() const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs)->get_Info(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs<D>::Info(Microsoft::UI::Xaml::Controls::ScrollInfo const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs)->put_Info(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory<D>::CreateInstance(double offset, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory)->CreateInstance(offset, get_abi(options), put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint<D>::Value() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint)->get_Value(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase<D>::Alignment() const
{
    Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase)->get_Alignment(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase<D>::Alignment(Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase)->put_Alignment(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory<D>::CreateInstance(double snapPointValue, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory)->CreateInstance(snapPointValue, get_abi(alignment), get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_Background(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::Background(Windows::UI::Xaml::Media::Brush const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_Background(get_abi(value)));
}

template <typename D> Windows::UI::Xaml::UIElement consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::Content() const
{
    Windows::UI::Xaml::UIElement value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_Content(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::Content(Windows::UI::Xaml::UIElement const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_Content(get_abi(value)));
}

template <typename D> Windows::UI::Composition::CompositionPropertySet consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExpressionAnimationSources() const
{
    Windows::UI::Composition::CompositionPropertySet value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ExpressionAnimationSources(put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalOffset() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalOffset(&value));
    return value;
}

template <typename D> float consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomFactor() const
{
    float value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ZoomFactor(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExtentWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ExtentWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExtentHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ExtentHeight(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ViewportWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ViewportWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ViewportHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ViewportHeight(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollableWidth() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ScrollableWidth(&value));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollableHeight() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ScrollableHeight(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ContentOrientation consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ContentOrientation() const
{
    Microsoft::UI::Xaml::Controls::ContentOrientation value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ContentOrientation(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ContentOrientation(Microsoft::UI::Xaml::Controls::ContentOrientation const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_ContentOrientation(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ChainingMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollChainingMode() const
{
    Microsoft::UI::Xaml::Controls::ChainingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalScrollChainingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_HorizontalScrollChainingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ChainingMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollChainingMode() const
{
    Microsoft::UI::Xaml::Controls::ChainingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalScrollChainingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_VerticalScrollChainingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RailingMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollRailingMode() const
{
    Microsoft::UI::Xaml::Controls::RailingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalScrollRailingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_HorizontalScrollRailingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::RailingMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollRailingMode() const
{
    Microsoft::UI::Xaml::Controls::RailingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalScrollRailingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_VerticalScrollRailingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollMode() const
{
    Microsoft::UI::Xaml::Controls::ScrollMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalScrollMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_HorizontalScrollMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollMode() const
{
    Microsoft::UI::Xaml::Controls::ScrollMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalScrollMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_VerticalScrollMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ChainingMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomChainingMode() const
{
    Microsoft::UI::Xaml::Controls::ChainingMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ZoomChainingMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_ZoomChainingMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomMode consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomMode() const
{
    Microsoft::UI::Xaml::Controls::ZoomMode value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ZoomMode(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomMode(Microsoft::UI::Xaml::Controls::ZoomMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_ZoomMode(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::InputKind consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::IgnoredInputKind() const
{
    Microsoft::UI::Xaml::Controls::InputKind value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_IgnoredInputKind(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::IgnoredInputKind(Microsoft::UI::Xaml::Controls::InputKind const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_IgnoredInputKind(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::MinZoomFactor() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_MinZoomFactor(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::MinZoomFactor(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_MinZoomFactor(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::MaxZoomFactor() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_MaxZoomFactor(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::MaxZoomFactor(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_MaxZoomFactor(value));
}

template <typename D> Microsoft::UI::Xaml::Controls::InteractionState consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::State() const
{
    Microsoft::UI::Xaml::Controls::InteractionState value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_State(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::IScrollController consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollController() const
{
    Microsoft::UI::Xaml::Controls::Primitives::IScrollController value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalScrollController(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalScrollController(Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_HorizontalScrollController(get_abi(value)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::IScrollController consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollController() const
{
    Microsoft::UI::Xaml::Controls::Primitives::IScrollController value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalScrollController(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalScrollController(Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_VerticalScrollController(get_abi(value)));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalAnchorRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalAnchorRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalAnchorRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_HorizontalAnchorRatio(value));
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalAnchorRatio() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalAnchorRatio(&value));
    return value;
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalAnchorRatio(double value) const
{
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->put_VerticalAnchorRatio(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::HorizontalSnapPoints() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_HorizontalSnapPoints(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::VerticalSnapPoints() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_VerticalSnapPoints(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase> consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomSnapPoints() const
{
    Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase> value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->get_ZoomSnapPoints(put_abi(value)));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollTo(double horizontalOffset, double verticalOffset) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ScrollTo(horizontalOffset, verticalOffset, put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollTo(double horizontalOffset, double verticalOffset, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ScrollToWithOptions(horizontalOffset, verticalOffset, get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ScrollBy(horizontalOffsetDelta, verticalOffsetDelta, put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ScrollByWithOptions(horizontalOffsetDelta, verticalOffsetDelta, get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ScrollInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollFrom(Windows::Foundation::Numerics::float2 const& offsetsVelocity, optional<Windows::Foundation::Numerics::float2> const& inertiaDecayRate) const
{
    Microsoft::UI::Xaml::Controls::ScrollInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ScrollFrom(get_abi(offsetsVelocity), get_abi(inertiaDecayRate), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomTo(float zoomFactor, optional<Windows::Foundation::Numerics::float2> const& centerPoint) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ZoomTo(zoomFactor, get_abi(centerPoint), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomTo(float zoomFactor, optional<Windows::Foundation::Numerics::float2> const& centerPoint, Microsoft::UI::Xaml::Controls::ZoomOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ZoomToWithOptions(zoomFactor, get_abi(centerPoint), get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomBy(float zoomFactorDelta, optional<Windows::Foundation::Numerics::float2> const& centerPoint) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ZoomBy(zoomFactorDelta, get_abi(centerPoint), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomBy(float zoomFactorDelta, optional<Windows::Foundation::Numerics::float2> const& centerPoint, Microsoft::UI::Xaml::Controls::ZoomOptions const& options) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ZoomByWithOptions(zoomFactorDelta, get_abi(centerPoint), get_abi(options), put_abi(result)));
    return result;
}

template <typename D> Microsoft::UI::Xaml::Controls::ZoomInfo consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomFrom(float zoomFactorVelocity, optional<Windows::Foundation::Numerics::float2> const& centerPoint, optional<float> const& inertiaDecayRate) const
{
    Microsoft::UI::Xaml::Controls::ZoomInfo result{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->ZoomFrom(zoomFactorVelocity, get_abi(centerPoint), get_abi(inertiaDecayRate), put_abi(result)));
    return result;
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExtentChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_ExtentChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExtentChanged_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExtentChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ExtentChanged_revoker>(this, ExtentChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ExtentChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_ExtentChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::StateChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_StateChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::StateChanged_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::StateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, StateChanged_revoker>(this, StateChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::StateChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_StateChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ViewChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_ViewChanged(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ViewChanged_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ViewChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const& handler) const
{
    return impl::make_event_revoker<D, ViewChanged_revoker>(this, ViewChanged(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ViewChanged(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_ViewChanged(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollAnimationStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_ScrollAnimationStarting(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollAnimationStarting_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollAnimationStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollAnimationStarting_revoker>(this, ScrollAnimationStarting(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollAnimationStarting(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_ScrollAnimationStarting(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomAnimationStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_ZoomAnimationStarting(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomAnimationStarting_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomAnimationStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ZoomAnimationStarting_revoker>(this, ZoomAnimationStarting(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomAnimationStarting(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_ZoomAnimationStarting(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_ScrollCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollCompleted_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ScrollCompleted_revoker>(this, ScrollCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ScrollCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_ScrollCompleted(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_ZoomCompleted(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomCompleted_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, ZoomCompleted_revoker>(this, ZoomCompleted(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::ZoomCompleted(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_ZoomCompleted(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::BringingIntoView(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_BringingIntoView(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::BringingIntoView_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::BringingIntoView(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, BringingIntoView_revoker>(this, BringingIntoView(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::BringingIntoView(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_BringingIntoView(get_abi(token)));
}

template <typename D> winrt::event_token consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::AnchorRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const& handler) const
{
    winrt::event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->add_AnchorRequested(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> typename consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::AnchorRequested_revoker consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::AnchorRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, AnchorRequested_revoker>(this, AnchorRequested(handler));
}

template <typename D> void consume_Microsoft_UI_Xaml_Controls_Primitives_IScroller<D>::AnchorRequested(winrt::event_token const& token) const noexcept
{
    WINRT_VERIFY_(0, WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScroller)->remove_AnchorRequested(get_abi(token)));
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::Scroller consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerFactory<D>::CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::Scroller value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory)->CreateInstance(get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_BackgroundProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_ContentProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::ContentOrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_ContentOrientationProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::HorizontalScrollChainingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_HorizontalScrollChainingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::VerticalScrollChainingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_VerticalScrollChainingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::HorizontalScrollRailingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_HorizontalScrollRailingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::VerticalScrollRailingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_VerticalScrollRailingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::HorizontalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_HorizontalScrollModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::VerticalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_VerticalScrollModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::ZoomChainingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_ZoomChainingModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::ZoomModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_ZoomModeProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::IgnoredInputKindProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_IgnoredInputKindProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::MinZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_MinZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::MaxZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_MaxZoomFactorProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::HorizontalAnchorRatioProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_HorizontalAnchorRatioProperty(put_abi(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollerStatics<D>::VerticalAnchorRatioProperty() const
{
    Windows::UI::Xaml::DependencyProperty value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics)->get_VerticalAnchorRatioProperty(put_abi(value)));
    return value;
}

template <typename D> double consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint<D>::Value() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint)->get_Value(&value));
    return value;
}

template <typename D> Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory<D>::CreateInstance(double snapPointValue, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const
{
    Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory)->CreateInstance(snapPointValue, get_abi(baseInterface), put_abi(innerInterface), put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>
{
    int32_t WINRT_CALL get_ColorChannel(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorChannel, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel>(this->shim().ColorChannel());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ColorChannel(Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorChannel, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel const&);
            this->shim().ColorChannel(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>
{
    int32_t WINRT_CALL get_ColorChannelProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorChannelProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ColorChannelProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>
{
    int32_t WINRT_CALL get_Color(struct struct_Windows_UI_Color* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(Windows::UI::Color));
            *value = detach_from<Windows::UI::Color>(this->shim().Color());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Color(struct struct_Windows_UI_Color value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Color, WINRT_WRAP(void), Windows::UI::Color const&);
            this->shim().Color(*reinterpret_cast<Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HsvColor(Windows::Foundation::Numerics::float4* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HsvColor, WINRT_WRAP(Windows::Foundation::Numerics::float4));
            *value = detach_from<Windows::Foundation::Numerics::float4>(this->shim().HsvColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HsvColor(Windows::Foundation::Numerics::float4 value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HsvColor, WINRT_WRAP(void), Windows::Foundation::Numerics::float4 const&);
            this->shim().HsvColor(*reinterpret_cast<Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinHue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinHue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MinHue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinHue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinHue, WINRT_WRAP(void), int32_t);
            this->shim().MinHue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxHue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxHue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxHue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHue, WINRT_WRAP(void), int32_t);
            this->shim().MaxHue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinSaturation(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinSaturation, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MinSaturation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinSaturation(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinSaturation, WINRT_WRAP(void), int32_t);
            this->shim().MinSaturation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxSaturation(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSaturation, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxSaturation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxSaturation(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSaturation, WINRT_WRAP(void), int32_t);
            this->shim().MaxSaturation(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinValue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinValue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MinValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinValue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinValue, WINRT_WRAP(void), int32_t);
            this->shim().MinValue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxValue(int32_t* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxValue, WINRT_WRAP(int32_t));
            *value = detach_from<int32_t>(this->shim().MaxValue());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxValue(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxValue, WINRT_WRAP(void), int32_t);
            this->shim().MaxValue(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Shape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Shape, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ColorSpectrumShape));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ColorSpectrumShape>(this->shim().Shape());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Shape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Shape, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ColorSpectrumShape const&);
            this->shim().Shape(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ColorSpectrumShape const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Components(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Components, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>(this->shim().Components());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Components(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Components, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const&);
            this->shim().Components(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ColorChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ColorChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ColorChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ColorChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ColorChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>
{
    int32_t WINRT_CALL get_ColorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ColorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ColorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HsvColorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HsvColorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HsvColorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinHueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinHueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinHueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxHueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxHueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxHueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinSaturationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinSaturationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinSaturationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxSaturationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxSaturationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxSaturationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxValueProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxValueProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxValueProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ShapeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ShapeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ShapeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ComponentsProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ComponentsProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ComponentsProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>
{
    int32_t WINRT_CALL get_FlyoutTemplateSettings(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(FlyoutTemplateSettings, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>(this->shim().FlyoutTemplateSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>
{
    int32_t WINRT_CALL get_OpenAnimationStartPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpenAnimationStartPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().OpenAnimationStartPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OpenAnimationEndPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OpenAnimationEndPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().OpenAnimationEndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CloseAnimationEndPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CloseAnimationEndPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().CloseAnimationEndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_CurrentWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CurrentWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().CurrentWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandedWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandedWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandedWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WidthExpansionDelta(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WidthExpansionDelta, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().WidthExpansionDelta());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WidthExpansionAnimationStartPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WidthExpansionAnimationStartPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().WidthExpansionAnimationStartPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WidthExpansionAnimationEndPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WidthExpansionAnimationEndPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().WidthExpansionAnimationEndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WidthExpansionMoreButtonAnimationStartPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WidthExpansionMoreButtonAnimationStartPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().WidthExpansionMoreButtonAnimationStartPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_WidthExpansionMoreButtonAnimationEndPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(WidthExpansionMoreButtonAnimationEndPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().WidthExpansionMoreButtonAnimationEndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandUpOverflowVerticalPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandUpOverflowVerticalPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandUpOverflowVerticalPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandDownOverflowVerticalPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandDownOverflowVerticalPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandDownOverflowVerticalPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandUpAnimationStartPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandUpAnimationStartPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandUpAnimationStartPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandUpAnimationEndPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandUpAnimationEndPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandUpAnimationEndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandUpAnimationHoldPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandUpAnimationHoldPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandUpAnimationHoldPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandDownAnimationStartPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandDownAnimationStartPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandDownAnimationStartPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandDownAnimationEndPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandDownAnimationEndPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandDownAnimationEndPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpandDownAnimationHoldPosition(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpandDownAnimationHoldPosition, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExpandDownAnimationHoldPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentClipRect(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentClipRect, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().ContentClipRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_OverflowContentClipRect(Windows::Foundation::Rect* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OverflowContentClipRect, WINRT_WRAP(Windows::Foundation::Rect));
            *value = detach_from<Windows::Foundation::Rect>(this->shim().OverflowContentClipRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>
{
    int32_t WINRT_CALL get_Icon(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Icon, WINRT_WRAP(Windows::UI::Xaml::Controls::IconElement));
            *value = detach_from<Windows::UI::Xaml::Controls::IconElement>(this->shim().Icon());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Icon(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Icon, WINRT_WRAP(void), Windows::UI::Xaml::Controls::IconElement const&);
            this->shim().Icon(*reinterpret_cast<Windows::UI::Xaml::Controls::IconElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>
{
    int32_t WINRT_CALL get_IconProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IconProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IconProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListView> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListView>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItem> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItem>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>
{
    int32_t WINRT_CALL get_Offset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Interval(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Interval, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Interval());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Start(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Start, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Start());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_End(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(End, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().End());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>
{
    int32_t WINRT_CALL CreateInstance(double offset, double interval, double start, double end, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment alignment, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint), double, double, double, double, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint>(this->shim().CreateInstance(offset, interval, start, end, *reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const*>(&alignment), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>
{
    int32_t WINRT_CALL get_Offset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Interval(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Interval, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Interval());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Start(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Start, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Start());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_End(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(End, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().End());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>
{
    int32_t WINRT_CALL CreateInstance(double offset, double interval, double start, double end, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint), double, double, double, double, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint>(this->shim().CreateInstance(offset, interval, start, end, *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollController> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollController>
{
    int32_t WINRT_CALL get_AreInteractionsAllowed(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AreInteractionsAllowed, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AreInteractionsAllowed());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_AreScrollerInteractionsAllowed(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AreScrollerInteractionsAllowed, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().AreScrollerInteractionsAllowed());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsInteracting(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsInteracting, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsInteracting());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IsInteractionVisualRailEnabled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IsInteractionVisualRailEnabled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().IsInteractionVisualRailEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InteractionVisual(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InteractionVisual, WINRT_WRAP(Windows::UI::Composition::Visual));
            *value = detach_from<Windows::UI::Composition::Visual>(this->shim().InteractionVisual());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InteractionVisualScrollOrientation(Windows::UI::Xaml::Controls::Orientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InteractionVisualScrollOrientation, WINRT_WRAP(Windows::UI::Xaml::Controls::Orientation));
            *value = detach_from<Windows::UI::Xaml::Controls::Orientation>(this->shim().InteractionVisualScrollOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetExpressionAnimationSources(void* propertySet, void* minOffsetPropertyName, void* maxOffsetPropertyName, void* offsetPropertyName, void* multiplierPropertyName) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetExpressionAnimationSources, WINRT_WRAP(void), Windows::UI::Composition::CompositionPropertySet const&, hstring const&, hstring const&, hstring const&, hstring const&);
            this->shim().SetExpressionAnimationSources(*reinterpret_cast<Windows::UI::Composition::CompositionPropertySet const*>(&propertySet), *reinterpret_cast<hstring const*>(&minOffsetPropertyName), *reinterpret_cast<hstring const*>(&maxOffsetPropertyName), *reinterpret_cast<hstring const*>(&offsetPropertyName), *reinterpret_cast<hstring const*>(&multiplierPropertyName));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode scrollMode) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetScrollMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollMode const&);
            this->shim().SetScrollMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollMode const*>(&scrollMode));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL SetValues(double minOffset, double maxOffset, double offset, double viewport) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(SetValues, WINRT_WRAP(void), double, double, double, double);
            this->shim().SetValues(minOffset, maxOffset, offset, viewport);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL GetScrollAnimation(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo info, Windows::Foundation::Numerics::float2 currentPosition, void* defaultAnimation, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(GetScrollAnimation, WINRT_WRAP(Windows::UI::Composition::CompositionAnimation), Microsoft::UI::Xaml::Controls::ScrollInfo const&, Windows::Foundation::Numerics::float2 const&, Windows::UI::Composition::CompositionAnimation const&);
            *result = detach_from<Windows::UI::Composition::CompositionAnimation>(this->shim().GetScrollAnimation(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollInfo const*>(&info), *reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&currentPosition), *reinterpret_cast<Windows::UI::Composition::CompositionAnimation const*>(&defaultAnimation)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL OnScrollCompleted(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo info) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OnScrollCompleted, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollInfo const&);
            this->shim().OnScrollCompleted(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollInfo const*>(&info));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ScrollToRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollToRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollToRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollToRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollToRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollToRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ScrollByRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollByRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollByRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollByRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollByRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollByRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ScrollFromRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollFromRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollFromRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollFromRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollFromRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollFromRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_InteractionRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InteractionRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().InteractionRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_InteractionRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(InteractionRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().InteractionRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_InteractionInfoChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InteractionInfoChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().InteractionInfoChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::IScrollController, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_InteractionInfoChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(InteractionInfoChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().InteractionInfoChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs>
{
    int32_t WINRT_CALL get_PointerPoint(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(PointerPoint, WINRT_WRAP(Windows::UI::Input::PointerPoint));
            *value = detach_from<Windows::UI::Input::PointerPoint>(this->shim().PointerPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Handled(bool* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Handled, WINRT_WRAP(bool));
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Handled(bool value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Handled, WINRT_WRAP(void), bool);
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory>
{
    int32_t WINRT_CALL CreateInstance(void* pointerPoint, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs), Windows::UI::Input::PointerPoint const&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs>(this->shim().CreateInstance(*reinterpret_cast<Windows::UI::Input::PointerPoint const*>(&pointerPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>
{
    int32_t WINRT_CALL get_OffsetDelta(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OffsetDelta, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().OffsetDelta());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Options(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Options, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollOptions));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollOptions>(this->shim().Options());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Info(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Info, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().Info());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Info(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Info, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollInfo const&);
            this->shim().Info(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollInfo const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>
{
    int32_t WINRT_CALL CreateInstance(double offsetDelta, void* options, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs), double, Microsoft::UI::Xaml::Controls::ScrollOptions const&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs>(this->shim().CreateInstance(offsetDelta, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs>
{
    int32_t WINRT_CALL get_OffsetVelocity(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(OffsetVelocity, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().OffsetVelocity());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_InertiaDecayRate(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(InertiaDecayRate, WINRT_WRAP(Windows::Foundation::IReference<float>));
            *value = detach_from<Windows::Foundation::IReference<float>>(this->shim().InertiaDecayRate());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Info(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Info, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().Info());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Info(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Info, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollInfo const&);
            this->shim().Info(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollInfo const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgsFactory>
{
    int32_t WINRT_CALL CreateInstance(float offsetVelocity, void* inertiaDecayRate, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs), float, Windows::Foundation::IReference<float> const&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs>(this->shim().CreateInstance(offsetVelocity, *reinterpret_cast<Windows::Foundation::IReference<float> const*>(&inertiaDecayRate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>
{
    int32_t WINRT_CALL get_Offset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Offset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Offset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Options(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Options, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollOptions));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollOptions>(this->shim().Options());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Info(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Info, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().Info());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Info(struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Info, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollInfo const&);
            this->shim().Info(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollInfo const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>
{
    int32_t WINRT_CALL CreateInstance(double offset, void* options, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs), double, Microsoft::UI::Xaml::Controls::ScrollOptions const&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs>(this->shim().CreateInstance(offset, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>
{
    int32_t WINRT_CALL get_Value(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Value, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Value());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>
{
    int32_t WINRT_CALL get_Alignment(Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Alignment, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment>(this->shim().Alignment());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Alignment(Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Alignment, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const&);
            this->shim().Alignment(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>
{
    int32_t WINRT_CALL CreateInstance(double snapPointValue, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment alignment, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint), double, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const&, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint>(this->shim().CreateInstance(snapPointValue, *reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const*>(&alignment), *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScroller> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScroller>
{
    int32_t WINRT_CALL get_Background(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(Windows::UI::Xaml::Media::Brush));
            *value = detach_from<Windows::UI::Xaml::Media::Brush>(this->shim().Background());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Background(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Background, WINRT_WRAP(void), Windows::UI::Xaml::Media::Brush const&);
            this->shim().Background(*reinterpret_cast<Windows::UI::Xaml::Media::Brush const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_Content(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(Windows::UI::Xaml::UIElement));
            *value = detach_from<Windows::UI::Xaml::UIElement>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_Content(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Content, WINRT_WRAP(void), Windows::UI::Xaml::UIElement const&);
            this->shim().Content(*reinterpret_cast<Windows::UI::Xaml::UIElement const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExpressionAnimationSources(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExpressionAnimationSources, WINRT_WRAP(Windows::UI::Composition::CompositionPropertySet));
            *value = detach_from<Windows::UI::Composition::CompositionPropertySet>(this->shim().ExpressionAnimationSources());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalOffset(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalOffset, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalOffset());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomFactor(float* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomFactor, WINRT_WRAP(float));
            *value = detach_from<float>(this->shim().ZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtentWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtentWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExtentWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ExtentHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtentHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ExtentHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ViewportWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewportWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ViewportWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ViewportHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewportHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ViewportHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollableWidth(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollableWidth, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ScrollableWidth());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ScrollableHeight(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollableHeight, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().ScrollableHeight());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentOrientation(Microsoft::UI::Xaml::Controls::ContentOrientation* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOrientation, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ContentOrientation));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ContentOrientation>(this->shim().ContentOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ContentOrientation(Microsoft::UI::Xaml::Controls::ContentOrientation value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOrientation, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ContentOrientation const&);
            this->shim().ContentOrientation(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ContentOrientation const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollChainingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ChainingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ChainingMode>(this->shim().HorizontalScrollChainingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollChainingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ChainingMode const&);
            this->shim().HorizontalScrollChainingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ChainingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollChainingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ChainingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ChainingMode>(this->shim().VerticalScrollChainingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollChainingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ChainingMode const&);
            this->shim().VerticalScrollChainingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ChainingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollRailingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RailingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RailingMode>(this->shim().HorizontalScrollRailingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollRailingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RailingMode const&);
            this->shim().HorizontalScrollRailingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RailingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollRailingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::RailingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::RailingMode>(this->shim().VerticalScrollRailingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollRailingMode(Microsoft::UI::Xaml::Controls::RailingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollRailingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::RailingMode const&);
            this->shim().VerticalScrollRailingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::RailingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollMode>(this->shim().HorizontalScrollMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollMode const&);
            this->shim().HorizontalScrollMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ScrollMode>(this->shim().VerticalScrollMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollMode(Microsoft::UI::Xaml::Controls::ScrollMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ScrollMode const&);
            this->shim().VerticalScrollMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomChainingMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ChainingMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ChainingMode>(this->shim().ZoomChainingMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ZoomChainingMode(Microsoft::UI::Xaml::Controls::ChainingMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomChainingMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ChainingMode const&);
            this->shim().ZoomChainingMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ChainingMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomMode(Microsoft::UI::Xaml::Controls::ZoomMode* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomMode, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomMode));
            *value = detach_from<Microsoft::UI::Xaml::Controls::ZoomMode>(this->shim().ZoomMode());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_ZoomMode(Microsoft::UI::Xaml::Controls::ZoomMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomMode, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::ZoomMode const&);
            this->shim().ZoomMode(*reinterpret_cast<Microsoft::UI::Xaml::Controls::ZoomMode const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IgnoredInputKind(Microsoft::UI::Xaml::Controls::InputKind* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IgnoredInputKind, WINRT_WRAP(Microsoft::UI::Xaml::Controls::InputKind));
            *value = detach_from<Microsoft::UI::Xaml::Controls::InputKind>(this->shim().IgnoredInputKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_IgnoredInputKind(Microsoft::UI::Xaml::Controls::InputKind value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IgnoredInputKind, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::InputKind const&);
            this->shim().IgnoredInputKind(*reinterpret_cast<Microsoft::UI::Xaml::Controls::InputKind const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinZoomFactor(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinZoomFactor, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MinZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MinZoomFactor(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinZoomFactor, WINRT_WRAP(void), double);
            this->shim().MinZoomFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxZoomFactor(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxZoomFactor, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().MaxZoomFactor());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_MaxZoomFactor(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxZoomFactor, WINRT_WRAP(void), double);
            this->shim().MaxZoomFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_State(Microsoft::UI::Xaml::Controls::InteractionState* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(State, WINRT_WRAP(Microsoft::UI::Xaml::Controls::InteractionState));
            *value = detach_from<Microsoft::UI::Xaml::Controls::InteractionState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollController(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollController, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::IScrollController));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::IScrollController>(this->shim().HorizontalScrollController());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalScrollController(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollController, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::Primitives::IScrollController const&);
            this->shim().HorizontalScrollController(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::IScrollController const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollController(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollController, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::IScrollController));
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::IScrollController>(this->shim().VerticalScrollController());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalScrollController(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollController, WINRT_WRAP(void), Microsoft::UI::Xaml::Controls::Primitives::IScrollController const&);
            this->shim().VerticalScrollController(*reinterpret_cast<Microsoft::UI::Xaml::Controls::Primitives::IScrollController const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalAnchorRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().HorizontalAnchorRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_HorizontalAnchorRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatio, WINRT_WRAP(void), double);
            this->shim().HorizontalAnchorRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAnchorRatio(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatio, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().VerticalAnchorRatio());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL put_VerticalAnchorRatio(double value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatio, WINRT_WRAP(void), double);
            this->shim().VerticalAnchorRatio(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalSnapPoints(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalSnapPoints, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>>(this->shim().HorizontalSnapPoints());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalSnapPoints(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalSnapPoints, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>>(this->shim().VerticalSnapPoints());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomSnapPoints(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomSnapPoints, WINRT_WRAP(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>));
            *value = detach_from<Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>>(this->shim().ZoomSnapPoints());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollTo(double horizontalOffset, double verticalOffset, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollTo(horizontalOffset, verticalOffset));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollToWithOptions(double horizontalOffset, double verticalOffset, void* options, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double, Microsoft::UI::Xaml::Controls::ScrollOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollTo(horizontalOffset, verticalOffset, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollBy(horizontalOffsetDelta, verticalOffsetDelta));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollByWithOptions(double horizontalOffsetDelta, double verticalOffsetDelta, void* options, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), double, double, Microsoft::UI::Xaml::Controls::ScrollOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollBy(horizontalOffsetDelta, verticalOffsetDelta, *reinterpret_cast<Microsoft::UI::Xaml::Controls::ScrollOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ScrollFrom(Windows::Foundation::Numerics::float2 offsetsVelocity, void* inertiaDecayRate, struct struct_Microsoft_UI_Xaml_Controls_ScrollInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollFrom, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ScrollInfo), Windows::Foundation::Numerics::float2 const&, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ScrollInfo>(this->shim().ScrollFrom(*reinterpret_cast<Windows::Foundation::Numerics::float2 const*>(&offsetsVelocity), *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&inertiaDecayRate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomTo(float zoomFactor, void* centerPoint, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomTo(zoomFactor, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomToWithOptions(float zoomFactor, void* centerPoint, void* options, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomTo, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&, Microsoft::UI::Xaml::Controls::ZoomOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomTo(zoomFactor, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint), *reinterpret_cast<Microsoft::UI::Xaml::Controls::ZoomOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomBy(float zoomFactorDelta, void* centerPoint, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomBy(zoomFactorDelta, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomByWithOptions(float zoomFactorDelta, void* centerPoint, void* options, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomBy, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&, Microsoft::UI::Xaml::Controls::ZoomOptions const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomBy(zoomFactorDelta, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint), *reinterpret_cast<Microsoft::UI::Xaml::Controls::ZoomOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL ZoomFrom(float zoomFactorVelocity, void* centerPoint, void* inertiaDecayRate, struct struct_Microsoft_UI_Xaml_Controls_ZoomInfo* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomFrom, WINRT_WRAP(Microsoft::UI::Xaml::Controls::ZoomInfo), float, Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const&, Windows::Foundation::IReference<float> const&);
            *result = detach_from<Microsoft::UI::Xaml::Controls::ZoomInfo>(this->shim().ZoomFrom(zoomFactorVelocity, *reinterpret_cast<Windows::Foundation::IReference<Windows::Foundation::Numerics::float2> const*>(&centerPoint), *reinterpret_cast<Windows::Foundation::IReference<float> const*>(&inertiaDecayRate)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL add_ExtentChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ExtentChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ExtentChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ExtentChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ExtentChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ExtentChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_StateChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(StateChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().StateChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_StateChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(StateChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().StateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ViewChanged(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ViewChanged, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const&);
            *token = detach_from<winrt::event_token>(this->shim().ViewChanged(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ViewChanged(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ViewChanged, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ViewChanged(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ScrollAnimationStarting(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollAnimationStarting, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollAnimationStarting(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollAnimationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollAnimationStarting(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollAnimationStarting, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollAnimationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ZoomAnimationStarting(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomAnimationStarting, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ZoomAnimationStarting(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomAnimationStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ZoomAnimationStarting(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ZoomAnimationStarting, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ZoomAnimationStarting(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ScrollCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ScrollCompleted, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ScrollCompleted(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ScrollCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ScrollCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ScrollCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_ZoomCompleted(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomCompleted, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().ZoomCompleted(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ZoomCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_ZoomCompleted(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(ZoomCompleted, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().ZoomCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_BringingIntoView(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BringingIntoView, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().BringingIntoView(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerBringingIntoViewEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_BringingIntoView(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(BringingIntoView, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().BringingIntoView(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }

    int32_t WINRT_CALL add_AnchorRequested(void* handler, winrt::event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(AnchorRequested, WINRT_WRAP(winrt::event_token), Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const&);
            *token = detach_from<winrt::event_token>(this->shim().AnchorRequested(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::ScrollerAnchorRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL remove_AnchorRequested(winrt::event_token token) noexcept final
    {
        typename D::abi_guard guard(this->shim());
        WINRT_ASSERT_DECLARATION(AnchorRequested, WINRT_WRAP(void), winrt::event_token const&);
        this->shim().AnchorRequested(*reinterpret_cast<winrt::event_token const*>(&token));
        return 0;
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory>
{
    int32_t WINRT_CALL CreateInstance(void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::Scroller), Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::Scroller>(this->shim().CreateInstance(*reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>
{
    int32_t WINRT_CALL get_BackgroundProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(BackgroundProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().BackgroundProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ContentOrientationProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ContentOrientationProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ContentOrientationProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollChainingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollChainingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollChainingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollChainingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollChainingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollChainingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollRailingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollRailingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollRailingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollRailingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollRailingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollRailingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalScrollModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalScrollModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalScrollModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalScrollModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalScrollModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalScrollModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomChainingModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomChainingModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ZoomChainingModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_ZoomModeProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(ZoomModeProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().ZoomModeProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_IgnoredInputKindProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(IgnoredInputKindProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().IgnoredInputKindProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MinZoomFactorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MinZoomFactorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MinZoomFactorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_MaxZoomFactorProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(MaxZoomFactorProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().MaxZoomFactorProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_HorizontalAnchorRatioProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(HorizontalAnchorRatioProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().HorizontalAnchorRatioProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }

    int32_t WINRT_CALL get_VerticalAnchorRatioProperty(void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(VerticalAnchorRatioProperty, WINRT_WRAP(Windows::UI::Xaml::DependencyProperty));
            *value = detach_from<Windows::UI::Xaml::DependencyProperty>(this->shim().VerticalAnchorRatioProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>
{
    int32_t WINRT_CALL get_Value(double* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Value, WINRT_WRAP(double));
            *value = detach_from<double>(this->shim().Value());
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>
{};

template <typename D>
struct produce<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory> : produce_base<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>
{
    int32_t WINRT_CALL CreateInstance(double snapPointValue, void* baseInterface, void** innerInterface, void** value) noexcept final
    {
        try
        {
            if (innerInterface) *innerInterface = nullptr;
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            Windows::Foundation::IInspectable __local_innerInterface;
            WINRT_ASSERT_DECLARATION(CreateInstance, WINRT_WRAP(Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint), double, Windows::Foundation::IInspectable const&, Windows::Foundation::IInspectable&);
            *value = detach_from<Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint>(this->shim().CreateInstance(snapPointValue, *reinterpret_cast<Windows::Foundation::IInspectable const*>(&baseInterface), __local_innerInterface));
            if (innerInterface) *innerInterface = detach_abi(__local_innerInterface);
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls::Primitives {

inline ColorPickerSlider::ColorPickerSlider()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ColorPickerSlider, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty ColorPickerSlider::ColorChannelProperty()
{
    return impl::call_factory<ColorPickerSlider, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>([&](auto&& f) { return f.ColorChannelProperty(); });
}

inline ColorSpectrum::ColorSpectrum()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::ColorProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.ColorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::HsvColorProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.HsvColorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::MinHueProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.MinHueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::MaxHueProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.MaxHueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::MinSaturationProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.MinSaturationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::MaxSaturationProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.MaxSaturationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::MinValueProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.MinValueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::MaxValueProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.MaxValueProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::ShapeProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.ShapeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty ColorSpectrum::ComponentsProperty()
{
    return impl::call_factory<ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>([&](auto&& f) { return f.ComponentsProperty(); });
}

inline CommandBarFlyoutCommandBar::CommandBarFlyoutCommandBar()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<CommandBarFlyoutCommandBar, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline NavigationViewItemPresenter::NavigationViewItemPresenter()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<NavigationViewItemPresenter, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty NavigationViewItemPresenter::IconProperty()
{
    return impl::call_factory<NavigationViewItemPresenter, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>([&](auto&& f) { return f.IconProperty(); });
}

inline RadioButtonsListView::RadioButtonsListView()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RadioButtonsListView, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline RadioButtonsListViewItem::RadioButtonsListViewItem()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RadioButtonsListViewItem, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline RepeatedScrollSnapPoint::RepeatedScrollSnapPoint(double offset, double interval, double start, double end, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RepeatedScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>([&](auto&& f) { return f.CreateInstance(offset, interval, start, end, alignment, baseInterface, innerInterface); });
}

inline RepeatedZoomSnapPoint::RepeatedZoomSnapPoint(double offset, double interval, double start, double end)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<RepeatedZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>([&](auto&& f) { return f.CreateInstance(offset, interval, start, end, baseInterface, innerInterface); });
}

inline ScrollControllerInteractionRequestedEventArgs::ScrollControllerInteractionRequestedEventArgs(Windows::UI::Input::PointerPoint const& pointerPoint) :
    ScrollControllerInteractionRequestedEventArgs(impl::call_factory<ScrollControllerInteractionRequestedEventArgs, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory>([&](auto&& f) { return f.CreateInstance(pointerPoint); }))
{}

inline ScrollControllerScrollByRequestedEventArgs::ScrollControllerScrollByRequestedEventArgs(double offsetDelta, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) :
    ScrollControllerScrollByRequestedEventArgs(impl::call_factory<ScrollControllerScrollByRequestedEventArgs, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>([&](auto&& f) { return f.CreateInstance(offsetDelta, options); }))
{}

inline ScrollControllerScrollFromRequestedEventArgs::ScrollControllerScrollFromRequestedEventArgs(float offsetVelocity, optional<float> const& inertiaDecayRate) :
    ScrollControllerScrollFromRequestedEventArgs(impl::call_factory<ScrollControllerScrollFromRequestedEventArgs, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgsFactory>([&](auto&& f) { return f.CreateInstance(offsetVelocity, inertiaDecayRate); }))
{}

inline ScrollControllerScrollToRequestedEventArgs::ScrollControllerScrollToRequestedEventArgs(double offset, Microsoft::UI::Xaml::Controls::ScrollOptions const& options) :
    ScrollControllerScrollToRequestedEventArgs(impl::call_factory<ScrollControllerScrollToRequestedEventArgs, Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>([&](auto&& f) { return f.CreateInstance(offset, options); }))
{}

inline ScrollSnapPoint::ScrollSnapPoint(double snapPointValue, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>([&](auto&& f) { return f.CreateInstance(snapPointValue, alignment, baseInterface, innerInterface); });
}

inline Scroller::Scroller()
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory>([&](auto&& f) { return f.CreateInstance(baseInterface, innerInterface); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::BackgroundProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.BackgroundProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::ContentProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.ContentProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::ContentOrientationProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.ContentOrientationProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::HorizontalScrollChainingModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.HorizontalScrollChainingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::VerticalScrollChainingModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.VerticalScrollChainingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::HorizontalScrollRailingModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.HorizontalScrollRailingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::VerticalScrollRailingModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.VerticalScrollRailingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::HorizontalScrollModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.HorizontalScrollModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::VerticalScrollModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.VerticalScrollModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::ZoomChainingModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.ZoomChainingModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::ZoomModeProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.ZoomModeProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::IgnoredInputKindProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.IgnoredInputKindProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::MinZoomFactorProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.MinZoomFactorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::MaxZoomFactorProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.MaxZoomFactorProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::HorizontalAnchorRatioProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.HorizontalAnchorRatioProperty(); });
}

inline Windows::UI::Xaml::DependencyProperty Scroller::VerticalAnchorRatioProperty()
{
    return impl::call_factory<Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics>([&](auto&& f) { return f.VerticalAnchorRatioProperty(); });
}

inline ZoomSnapPoint::ZoomSnapPoint(double snapPointValue)
{
    Windows::Foundation::IInspectable baseInterface, innerInterface;
    *this = impl::call_factory<ZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>([&](auto&& f) { return f.CreateInstance(snapPointValue, baseInterface, innerInterface); });
}

template <typename D, typename... Interfaces>
struct ColorPickerSliderT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::ISlider, Windows::UI::Xaml::Controls::ISlider2, Windows::UI::Xaml::Controls::Primitives::IRangeBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider, Windows::UI::Xaml::Controls::Slider, Windows::UI::Xaml::Controls::Primitives::RangeBase, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ColorPickerSlider;

protected:
    ColorPickerSliderT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider, Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ColorSpectrumT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = ColorSpectrum;

protected:
    ColorSpectrumT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct CommandBarFlyoutCommandBarT :
    implements<D, Windows::UI::Xaml::Controls::IAppBarOverrides, Windows::UI::Xaml::Controls::IAppBarOverrides3, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IAppBar, Windows::UI::Xaml::Controls::IAppBar2, Windows::UI::Xaml::Controls::IAppBar3, Windows::UI::Xaml::Controls::IAppBar4, Windows::UI::Xaml::Controls::ICommandBar, Windows::UI::Xaml::Controls::ICommandBar2, Windows::UI::Xaml::Controls::ICommandBar3, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar, Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::AppBar, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IAppBarOverridesT<D>, Windows::UI::Xaml::Controls::IAppBarOverrides3T<D>, Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = CommandBarFlyoutCommandBar;

protected:
    CommandBarFlyoutCommandBarT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar, Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct NavigationViewItemPresenterT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = NavigationViewItemPresenter;

protected:
    NavigationViewItemPresenterT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter, Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RadioButtonsListViewT :
    implements<D, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListView, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemsControl3, Windows::UI::Xaml::Controls::IListView, Windows::UI::Xaml::Controls::IListViewBase, Windows::UI::Xaml::Controls::IListViewBase2, Windows::UI::Xaml::Controls::IListViewBase3, Windows::UI::Xaml::Controls::IListViewBase4, Windows::UI::Xaml::Controls::IListViewBase5, Windows::UI::Xaml::Controls::IListViewBase6, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView, Windows::UI::Xaml::Controls::ListView, Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::Controls::IItemsControlOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RadioButtonsListView;

protected:
    RadioButtonsListViewT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RadioButtonsListViewItemT :
    implements<D, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IControlOverrides6, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItem, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControl2, Windows::UI::Xaml::Controls::IControl3, Windows::UI::Xaml::Controls::IControl4, Windows::UI::Xaml::Controls::IControl5, Windows::UI::Xaml::Controls::IControl7, Windows::UI::Xaml::Controls::IControlProtected, Windows::UI::Xaml::Controls::IListViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem, Windows::UI::Xaml::Controls::ListViewItem, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::Controls::IContentControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverridesT<D>, Windows::UI::Xaml::Controls::IControlOverrides6T<D>, Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = RadioButtonsListViewItem;

protected:
    RadioButtonsListViewItemT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem, Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RepeatedScrollSnapPointT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase, Windows::UI::Xaml::DependencyObject>
{
    using composable = RepeatedScrollSnapPoint;

protected:
    RepeatedScrollSnapPointT(double offset, double interval, double start, double end, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>([&](auto&& f) { f.CreateInstance(offset, interval, start, end, alignment, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct RepeatedZoomSnapPointT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase, Windows::UI::Xaml::DependencyObject>
{
    using composable = RepeatedZoomSnapPoint;

protected:
    RepeatedZoomSnapPointT(double offset, double interval, double start, double end)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>([&](auto&& f) { f.CreateInstance(offset, interval, start, end, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ScrollSnapPointT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase, Windows::UI::Xaml::DependencyObject>
{
    using composable = ScrollSnapPoint;

protected:
    ScrollSnapPointT(double snapPointValue, Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>([&](auto&& f) { f.CreateInstance(snapPointValue, alignment, *this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ScrollerT :
    implements<D, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IUIElementOverrides7, Windows::UI::Xaml::IUIElementOverrides8, Windows::UI::Xaml::IUIElementOverrides9, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IScroller, Windows::UI::Composition::IAnimationObject, Windows::UI::Composition::IVisualElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElement3, Windows::UI::Xaml::IFrameworkElement4, Windows::UI::Xaml::IFrameworkElement6, Windows::UI::Xaml::IFrameworkElement7, Windows::UI::Xaml::IFrameworkElementProtected7, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement10, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElement3, Windows::UI::Xaml::IUIElement4, Windows::UI::Xaml::IUIElement5, Windows::UI::Xaml::IUIElement7, Windows::UI::Xaml::IUIElement8, Windows::UI::Xaml::IUIElement9>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::Scroller, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::DependencyObject>,
    Windows::UI::Xaml::IFrameworkElementOverridesT<D>, Windows::UI::Xaml::IFrameworkElementOverrides2T<D>, Windows::UI::Xaml::IUIElementOverridesT<D>, Windows::UI::Xaml::IUIElementOverrides7T<D>, Windows::UI::Xaml::IUIElementOverrides8T<D>, Windows::UI::Xaml::IUIElementOverrides9T<D>
{
    using composable = Scroller;

protected:
    ScrollerT()
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::Scroller, Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory>([&](auto&& f) { f.CreateInstance(*this, this->m_inner); });
    }
};

template <typename D, typename... Interfaces>
struct ZoomSnapPointT :
    implements<D, Windows::Foundation::IInspectable, composing, Interfaces...>,
    impl::require<D, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IDependencyObject2>,
    impl::base<D, Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase, Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase, Windows::UI::Xaml::DependencyObject>
{
    using composable = ZoomSnapPoint;

protected:
    ZoomSnapPointT(double snapPointValue)
    {
        impl::call_factory<Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint, Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>([&](auto&& f) { f.CreateInstance(snapPointValue, *this, this->m_inner); });
    }
};

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRadioButtonsListViewItemFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollFromRequestedEventArgsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScroller> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScroller> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollerFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollerStatics> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListView> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::RadioButtonsListViewItem> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollFromRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::Scroller> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::Scroller> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint> {};
template<> struct hash<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase> : winrt::impl::hash_base<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase> {};

}
