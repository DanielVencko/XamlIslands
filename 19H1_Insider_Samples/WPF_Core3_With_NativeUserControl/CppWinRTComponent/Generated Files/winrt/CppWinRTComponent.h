// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.UI.Xaml.Interop.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/CppWinRTComponent.2.h"

namespace winrt::impl {

template <typename D>
struct produce<D, CppWinRTComponent::IMyNativeUserControl> : produce_base<D, CppWinRTComponent::IMyNativeUserControl>
{};

}

WINRT_EXPORT namespace winrt::CppWinRTComponent {

inline MyNativeUserControl::MyNativeUserControl() :
    MyNativeUserControl(impl::call_factory<MyNativeUserControl>([](auto&& f) { return f.template ActivateInstance<MyNativeUserControl>(); }))
{}

inline XamlMetaDataProvider::XamlMetaDataProvider() :
    XamlMetaDataProvider(impl::call_factory<XamlMetaDataProvider>([](auto&& f) { return f.template ActivateInstance<XamlMetaDataProvider>(); }))
{}

}

namespace winrt::impl {

}

WINRT_EXPORT namespace winrt::experimental::reflect {

template <>
struct base_type<CppWinRTComponent::MyNativeUserControl> { using type = Windows::UI::Xaml::Controls::UserControl; };
}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::CppWinRTComponent::IMyNativeUserControl> : winrt::impl::hash_base<winrt::CppWinRTComponent::IMyNativeUserControl> {};
template<> struct hash<winrt::CppWinRTComponent::MyNativeUserControl> : winrt::impl::hash_base<winrt::CppWinRTComponent::MyNativeUserControl> {};
template<> struct hash<winrt::CppWinRTComponent::XamlMetaDataProvider> : winrt::impl::hash_base<winrt::CppWinRTComponent::XamlMetaDataProvider> {};

}
