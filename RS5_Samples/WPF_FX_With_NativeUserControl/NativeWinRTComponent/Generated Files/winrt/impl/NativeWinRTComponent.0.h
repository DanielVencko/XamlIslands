// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.181115.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop {

struct TypeName;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IXamlType;
struct XmlnsDefinition;

}

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Markup {

struct IXamlMetadataProvider;

}

WINRT_EXPORT namespace winrt::NativeWinRTComponent {

struct IClass;
struct IMyUserControl;
struct Class;
struct MyUserControl;
struct XamlMetaDataProvider;

}

namespace winrt::impl {

template <> struct category<NativeWinRTComponent::IClass>{ using type = interface_category; };
template <> struct category<NativeWinRTComponent::IMyUserControl>{ using type = interface_category; };
template <> struct category<NativeWinRTComponent::Class>{ using type = class_category; };
template <> struct category<NativeWinRTComponent::MyUserControl>{ using type = class_category; };
template <> struct category<NativeWinRTComponent::XamlMetaDataProvider>{ using type = class_category; };
template <> struct name<NativeWinRTComponent::IClass>{ static constexpr auto & value{ L"NativeWinRTComponent.IClass" }; };
template <> struct name<NativeWinRTComponent::IMyUserControl>{ static constexpr auto & value{ L"NativeWinRTComponent.IMyUserControl" }; };
template <> struct name<NativeWinRTComponent::Class>{ static constexpr auto & value{ L"NativeWinRTComponent.Class" }; };
template <> struct name<NativeWinRTComponent::MyUserControl>{ static constexpr auto & value{ L"NativeWinRTComponent.MyUserControl" }; };
template <> struct name<NativeWinRTComponent::XamlMetaDataProvider>{ static constexpr auto & value{ L"NativeWinRTComponent.XamlMetaDataProvider" }; };
template <> struct guid_storage<NativeWinRTComponent::IClass>{ static constexpr guid value{ 0xEACB8E30,0xBA1C,0x5D68,{ 0xA6,0x3E,0x89,0x71,0xBC,0x44,0x7C,0xFB } }; };
template <> struct guid_storage<NativeWinRTComponent::IMyUserControl>{ static constexpr guid value{ 0x19B995DE,0x95C5,0x5E79,{ 0x85,0xD9,0x1D,0x16,0xC4,0x1B,0x14,0xD7 } }; };
template <> struct default_interface<NativeWinRTComponent::Class>{ using type = NativeWinRTComponent::IClass; };
template <> struct default_interface<NativeWinRTComponent::MyUserControl>{ using type = NativeWinRTComponent::IMyUserControl; };
template <> struct default_interface<NativeWinRTComponent::XamlMetaDataProvider>{ using type = Windows::UI::Xaml::Markup::IXamlMetadataProvider; };

template <> struct abi<NativeWinRTComponent::IClass>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_MyProperty(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MyProperty(int32_t value) noexcept = 0;
};};

template <> struct abi<NativeWinRTComponent::IMyUserControl>{ struct type : IInspectable
{
    virtual int32_t WINRT_CALL get_MyProperty(int32_t* value) noexcept = 0;
    virtual int32_t WINRT_CALL put_MyProperty(int32_t value) noexcept = 0;
};};

template <typename D>
struct consume_NativeWinRTComponent_IClass
{
    int32_t MyProperty() const;
    void MyProperty(int32_t value) const;
};
template <> struct consume<NativeWinRTComponent::IClass> { template <typename D> using type = consume_NativeWinRTComponent_IClass<D>; };

template <typename D>
struct consume_NativeWinRTComponent_IMyUserControl
{
    int32_t MyProperty() const;
    void MyProperty(int32_t value) const;
};
template <> struct consume<NativeWinRTComponent::IMyUserControl> { template <typename D> using type = consume_NativeWinRTComponent_IMyUserControl<D>; };

}
